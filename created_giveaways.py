from typing import List, Dict, Any
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
import pytz
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardMarkup, InlineKeyboardButton
from utils import send_message_with_image
import aiogram.exceptions
import json
import asyncio
import math
import boto3
from botocore.client import Config
import requests
import re
from aiogram.types import CallbackQuery

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è üìù
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Yandex Cloud S3 ‚òÅÔ∏è
YANDEX_ACCESS_KEY = 'YCAJEDluWSn-XI0tyGyfwfnVL'
YANDEX_SECRET_KEY = 'YCPkR9H9Ucebg6L6eMGvtfKuFIcO_MK7gyiffY6H'
YANDEX_BUCKET_NAME = 'raffle'
YANDEX_ENDPOINT_URL = 'https://storage.yandexcloud.net'
YANDEX_REGION = 'ru-central1'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è S3 –∫–ª–∏–µ–Ω—Ç–∞ üì¶
s3_client = boto3.client(
    's3',
    region_name=YANDEX_REGION,
    aws_access_key_id=YANDEX_ACCESS_KEY,
    aws_secret_access_key=YANDEX_SECRET_KEY,
    endpoint_url=YANDEX_ENDPOINT_URL,
    config=Config(signature_version='s3v4')
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ üåç
user_selected_communities = {}
paid_users: Dict[int, str] = {}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚öôÔ∏è
MAX_CAPTION_LENGTH = 850
MAX_NAME_LENGTH = 50
MAX_DESCRIPTION_LENGTH = 850
MAX_MEDIA_SIZE_MB = 10
MAX_WINNERS = 100

FORMATTING_GUIDE = """
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ç–µ–∫—Å—Ç–∞:
<blockquote expandable>
- –¶–∏—Ç–∞—Ç–∞
- –ñ–∏—Ä–Ω—ã–π: <b>—Ç–µ–∫—Å—Ç</b>
- –ö—É—Ä—Å–∏–≤: <i>—Ç–µ–∫—Å—Ç</i>
- –ü–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π: <u>—Ç–µ–∫—Å—Ç</u>
- –ó–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π: <s>—Ç–µ–∫—Å—Ç</s>
- –ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π
- –°–∫—Ä—ã—Ç—ã–π: <tg-spoiler>—Ç–µ–∫—Å—Ç</tg-spoiler>
- –°—Å—ã–ª–∫–∞: <a href="https://t.me/PepeGift_Bot">—Ç–µ–∫—Å—Ç</a>
- –ö–æ–¥: <code>—Ç–µ–∫—Å—Ç</code>
- –ö–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏ <tg-emoji emoji-id='5199885118214255386'>üëã</tg-emoji>

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å Telegram –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ 100 —ç–º–æ–¥–∑–∏.</blockquote>
"""

def strip_html_tags(text: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç HTML-—Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ üßπ"""
    return re.sub(r'<[^>]+>', '', text)

def count_length_with_custom_emoji(text: str) -> int:
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞, —Å—á–∏—Ç–∞—è –∫–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏ –∫–∞–∫ 1 —Å–∏–º–≤–æ–ª."""
    emoji_pattern = r'<tg-emoji emoji-id="[^"]+">[^<]+</tg-emoji>'
    custom_emojis = re.findall(emoji_pattern, text)
    cleaned_text = text
    for emoji in custom_emojis:
        cleaned_text = cleaned_text.replace(emoji, ' ')
    return len(cleaned_text)

class GiveawayStates(StatesGroup):
    waiting_for_name = State()  # ‚úèÔ∏è
    waiting_for_description = State()  # üìú
    waiting_for_media_choice = State()  # üñºÔ∏è
    waiting_for_media_upload = State()  # üì§
    waiting_for_end_time = State()  # ‚è∞
    waiting_for_winner_count = State()  # üèÜ
    waiting_for_community_name = State()  # üë•
    waiting_for_new_end_time = State()  # ‚è≥
    waiting_for_media_edit = State()  # üñåÔ∏è
    waiting_for_congrats_message = State()  # üéâ
    waiting_for_common_congrats_message = State()  # üéä
    waiting_for_edit_name = State()  # ‚úèÔ∏è
    waiting_for_edit_description = State()  # üìù
    waiting_for_edit_winner_count = State()  # üèÖ
    creating_giveaway = State()  # üöÄ
    binding_communities = State()  # üîó
    waiting_for_invite_quantity = State()  # üì©

async def upload_to_storage(file_content: bytes, filename: str) -> tuple[bool, str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ üì§"""
    try:
        file_size_mb = len(file_content) / (1024 * 1024)
        if file_size_mb > MAX_MEDIA_SIZE_MB:
            return False, f"<tg-emoji emoji-id='5197564405650307134'>ü§Ø</tg-emoji> –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º—É–º: {MAX_MEDIA_SIZE_MB} –ú–ë üòî"

        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        unique_filename = f"{timestamp}_{filename}"

        presigned_url = s3_client.generate_presigned_url(
            'put_object',
            Params={
                'Bucket': YANDEX_BUCKET_NAME,
                'Key': unique_filename,
                'ContentType': 'application/octet-stream'
            },
            ExpiresIn=3600
        )

        response = requests.put(
            presigned_url,
            data=file_content,
            headers={'Content-Type': 'application/octet-stream'}
        )

        if response.status_code == 200:
            public_url = f"https://{YANDEX_BUCKET_NAME}.storage.yandexcloud.net/{unique_filename}"
            logger.info(f"<tg-emoji emoji-id='5206607081334906820'>‚úîÔ∏è</tg-emoji> –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {unique_filename}")
            return True, public_url
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}")
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: {response.status_code}")

    except Exception as e:
        logger.error(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
        return False, f"<tg-emoji emoji-id='5210952531676504517'>‚ùå</tg-emoji> –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª: {str(e)}"

def register_created_giveaways_handlers(dp: Dispatcher, bot: Bot, conn, cursor):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏ üéÅ"""

    @dp.callback_query(lambda c: c.data == 'created_giveaways' or c.data.startswith('created_giveaways_page:'))
    async def process_created_giveaways(callback_query: CallbackQuery):
        user_id = callback_query.from_user.id
        ITEMS_PER_PAGE = 5
        current_page = int(callback_query.data.split(':')[1]) if ':' in callback_query.data else 1

        try:
            cursor.execute(
                """
                SELECT * FROM giveaways 
                WHERE user_id = %s AND is_active IN ('false', 'waiting')
                """,
                (user_id,)
            )
            giveaways = cursor.fetchall()
            if not giveaways:
                await bot.answer_callback_query(callback_query.id,
                                                text="üì≠ –ü–æ–∫–∞ –Ω–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π? –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π! üöÄ")
                return

            total_giveaways = len(giveaways)
            total_pages = math.ceil(total_giveaways / ITEMS_PER_PAGE)
            start_idx = (current_page - 1) * ITEMS_PER_PAGE
            current_giveaways = giveaways[start_idx:start_idx + ITEMS_PER_PAGE]

            keyboard = InlineKeyboardBuilder()
            for giveaway in current_giveaways:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º giveaway[2] –¥–ª—è name –≤–º–µ—Å—Ç–æ giveaway[1]
                name = str(giveaway[2]) if giveaway[2] is not None else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                clean_name = strip_html_tags(name)[:61] + "..." if len(name) > 64 else strip_html_tags(name)
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º giveaway[6] –¥–ª—è is_active –≤–º–µ—Å—Ç–æ giveaway[4]
                status_indicator = "" if giveaway[6] == 'waiting' else ""
                keyboard.row(InlineKeyboardButton(
                    text=f"{status_indicator} {clean_name}",
                    callback_data=f"view_created_giveaway:{giveaway[0]}"
                ))

            nav_buttons = []
            if current_page > 1:
                nav_buttons.append(
                    InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"created_giveaways_page:{current_page - 1}"))
            if total_pages > 1:
                nav_buttons.append(InlineKeyboardButton(text=f"üìÑ {current_page}/{total_pages}", callback_data="ignore"))
            if current_page < total_pages:
                nav_buttons.append(
                    InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"created_giveaways_page:{current_page + 1}"))

            if nav_buttons:
                keyboard.row(*nav_buttons)
            keyboard.row(InlineKeyboardButton(text=" ‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main_menu"))

            await bot.answer_callback_query(callback_query.id)
            await send_message_with_image(
                bot,
                user_id,
                f"<tg-emoji emoji-id='5197630131534836123'>ü•≥</tg-emoji> –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–∑—ã–≥—Ä—ã—à –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!",
                reply_markup=keyboard.as_markup(),
                message_id=callback_query.message.message_id
            )
        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
            await bot.answer_callback_query(callback_query.id,
                                            text="<tg-emoji emoji-id='5422649047334794716'>üòµ</tg-emoji> –£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòî")

    @dp.callback_query(lambda c: c.data == "ignore")
    async def process_ignore(callback_query: types.CallbackQuery):
        await bot.answer_callback_query(callback_query.id)

    @dp.callback_query(lambda c: c.data.startswith('view_created_giveaway:'))
    async def process_view_created_giveaway(callback_query: CallbackQuery, state: FSMContext):
        giveaway_id = callback_query.data.split(':')[1]
        try:
            cursor.execute("SELECT * FROM giveaways WHERE id = %s", (giveaway_id,))
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
            columns = [desc[0] for desc in cursor.description]
            giveaway = dict(zip(columns, cursor.fetchone()))
            if not giveaway:
                await bot.answer_callback_query(callback_query.id, text="üîç –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω üòï")
                return

            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_post:{giveaway_id}")
            keyboard.button(text="üë• –ü—Ä–∏–≤—è–∑–∞—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–∞", callback_data=f"bind_communities:{giveaway_id}")
            keyboard.button(text="üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"activate_giveaway:{giveaway_id}")
            keyboard.button(text="üì© –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è", callback_data=f"add_invite_task:{giveaway_id}")
            keyboard.button(text="üéâ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º", callback_data=f"message_winners:{giveaway_id}")
            keyboard.button(text="üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"preview_giveaway:{giveaway_id}")
            keyboard.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_giveaway:{giveaway_id}")
            keyboard.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="created_giveaways")
            keyboard.adjust(1)

            invite_info = f"\n<tg-emoji emoji-id='5199885118214255386'>üëã</tg-emoji> –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ {giveaway['quantity_invite']} –¥—Ä—É–≥–∞(–∑–µ–π) –¥–ª—è —É—á–∞—Å—Ç–∏—è!" if \
            giveaway['invite'] else ""
            giveaway_info = f"""
<b>{giveaway['name']}</b>

{giveaway['description']}

<tg-emoji emoji-id='5440539497383087970'>ü•á</tg-emoji> <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:</b> {giveaway['winner_count']}
<tg-emoji emoji-id='5413879192267805083'>üóì</tg-emoji> <b>–ö–æ–Ω–µ—Ü:</b> {(giveaway['end_time'] + timedelta(hours=3)).strftime('%d.%m.%Y %H:%M')} (–ú–°–ö)
{invite_info}
"""

            await bot.answer_callback_query(callback_query.id)
            await state.clear()
            if giveaway['media_type'] and giveaway['media_file_id']:
                media_types = {
                    'photo': types.InputMediaPhoto,
                    'gif': types.InputMediaAnimation,
                    'video': types.InputMediaVideo
                }
                await bot.edit_message_media(
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    media=media_types[giveaway['media_type']](
                        media=giveaway['media_file_id'],
                        caption=giveaway_info,
                        parse_mode='HTML'
                    ),
                    reply_markup=keyboard.as_markup()
                )
            else:
                await send_message_with_image(
                    bot,
                    callback_query.from_user.id,
                    giveaway_info,
                    reply_markup=keyboard.as_markup(),
                    message_id=callback_query.message.message_id,
                    parse_mode='HTML'
                )
        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
            await bot.answer_callback_query(callback_query.id,
                                            text="<tg-emoji emoji-id='5210952531676504517'>‚ùå</tg-emoji> –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ üòî")
            await bot.send_message(
                callback_query.from_user.id,
                "‚ö†Ô∏è –£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!"
            )

    @dp.callback_query(lambda c: c.data.startswith('add_invite_task:'))
    async def process_add_invite_task(callback_query: CallbackQuery, state: FSMContext):
        giveaway_id = callback_query.data.split(':')[1]
        cursor.execute("SELECT invite, quantity_invite FROM giveaways WHERE id = %s", (giveaway_id,))
        columns = [desc[0] for desc in cursor.description]
        giveaway = dict(zip(columns, cursor.fetchone()))

        keyboard = InlineKeyboardBuilder()
        if giveaway['invite']:
            keyboard.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data=f"change_invite_quantity:{giveaway_id}")
            keyboard.button(text="üóëÔ∏è –£–±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"remove_invite_task:{giveaway_id}")
            keyboard.button(text=" ‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_created_giveaway:{giveaway_id}")
            keyboard.adjust(1)
            message_text = f"<tg-emoji emoji-id='5424818078833715060'>üì£</tg-emoji> –ó–∞–¥–∞–Ω–∏–µ '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞' —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ!\n\n–ù—É–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å {giveaway['quantity_invite']} –¥—Ä—É–≥–∞(–∑–µ–π)"
        else:
            keyboard.button(text="‚úÖ –î–∞", callback_data=f"confirm_invite_task:{giveaway_id}")
            keyboard.button(text=" ‚óÄÔ∏è –ù–µ—Ç", callback_data=f"view_created_giveaway:{giveaway_id}")
            keyboard.adjust(2)
            message_text = "<tg-emoji emoji-id='5424818078833715060'>üì£</tg-emoji> –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞'?"

        await bot.answer_callback_query(callback_query.id)
        await state.clear()
        await send_message_with_image(
            bot,
            callback_query.from_user.id,
            message_text,
            reply_markup=keyboard.as_markup(),
            message_id=callback_query.message.message_id
        )

    @dp.callback_query(lambda c: c.data.startswith('confirm_invite_task:'))
    async def process_confirm_invite_task(callback_query: CallbackQuery, state: FSMContext):
        giveaway_id = callback_query.data.split(':')[1]
        await state.update_data(giveaway_id=giveaway_id, last_message_id=callback_query.message.message_id)
        await state.set_state(GiveawayStates.waiting_for_invite_quantity)

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text=" ‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"add_invite_task:{giveaway_id}")

        await bot.answer_callback_query(callback_query.id)
        await send_message_with_image(
            bot,
            callback_query.from_user.id,
            "<tg-emoji emoji-id='5271604874419647061'>üîó</tg-emoji> –°–∫–æ–ª—å–∫–æ –¥—Ä—É–∑–µ–π –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫?\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ",
            reply_markup=keyboard.as_markup(),
            message_id=callback_query.message.message_id
        )

    @dp.callback_query(lambda c: c.data.startswith('change_invite_quantity:'))
    async def process_change_invite_quantity(callback_query: CallbackQuery, state: FSMContext):
        giveaway_id = callback_query.data.split(':')[1]
        await state.update_data(giveaway_id=giveaway_id, last_message_id=callback_query.message.message_id)
        await state.set_state(GiveawayStates.waiting_for_invite_quantity)

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text=" ‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"add_invite_task:{giveaway_id}")

        await bot.answer_callback_query(callback_query.id)
        await send_message_with_image(
            bot,
            callback_query.from_user.id,
            "<tg-emoji emoji-id='5395444784611480792'>‚úèÔ∏è</tg-emoji> –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è",
            reply_markup=keyboard.as_markup(),
            message_id=callback_query.message.message_id
        )

    @dp.callback_query(lambda c: c.data.startswith('remove_invite_task:'))
    async def process_remove_invite_task(callback_query: CallbackQuery, state: FSMContext):  # –î–æ–±–∞–≤–ª—è–µ–º state
        giveaway_id = callback_query.data.split(':')[1]
        try:
            cursor.execute(
                "UPDATE giveaways SET invite = %s, quantity_invite = %s WHERE id = %s",
                (False, 0, giveaway_id)
            )
            conn.commit()
            await bot.answer_callback_query(callback_query.id, text="–ó–∞–¥–∞–Ω–∏–µ —É–±—Ä–∞–Ω–æ ‚úÖ")
            new_callback_query = types.CallbackQuery(
                id=callback_query.id,
                from_user=callback_query.from_user,
                chat_instance=callback_query.chat_instance,
                message=callback_query.message,
                data=f"view_created_giveaway:{giveaway_id}"
            )
            # –ü–µ—Ä–µ–¥–∞–µ–º state –≤ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
            await process_view_created_giveaway(new_callback_query, state)
        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
            conn.rollback()
            await bot.answer_callback_query(callback_query.id,
                                            text="–£–ø—Å! –ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ üòî")

    @dp.message(GiveawayStates.waiting_for_invite_quantity)
    async def process_invite_quantity(message: types.Message, state: FSMContext):
        data = await state.get_data()
        giveaway_id = data['giveaway_id']
        last_message_id = data['last_message_id']

        try:
            quantity = int(message.text)
            if quantity <= 0:
                raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")

            cursor.execute(
                "UPDATE giveaways SET invite = %s, quantity_invite = %s WHERE id = %s",
                (True, quantity, giveaway_id)
            )
            conn.commit()
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data=f"change_invite_quantity:{giveaway_id}")
            keyboard.button(text="üóëÔ∏è –£–±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"remove_invite_task:{giveaway_id}")
            keyboard.button(text=" ‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_created_giveaway:{giveaway_id}")
            keyboard.adjust(1)

            await send_message_with_image(
                bot,
                message.from_user.id,
                f"<tg-emoji emoji-id='5206607081334906820'>‚úîÔ∏è</tg-emoji> –ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ\n\n<tg-emoji emoji-id='5424818078833715060'>üì£</tg-emoji> –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å {quantity} –¥—Ä—É–≥–∞(–∑–µ–π) –¥–ª—è —É—á–∞—Å—Ç–∏—è!",
                reply_markup=keyboard.as_markup(),
                message_id=last_message_id
            )
            await state.clear()

        except ValueError:
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text=" ‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"add_invite_task:{giveaway_id}")
            await send_message_with_image(
                bot,
                message.from_user.id,
                "<tg-emoji emoji-id='5447644880824181073'>‚ö†Ô∏è</tg-emoji> –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ! –ù–∞–ø—Ä–∏–º–µ—Ä, 5",
                reply_markup=keyboard.as_markup(),
                message_id=last_message_id
            )

    @dp.callback_query(lambda c: c.data.startswith('edit_post:'))
    async def process_edit_post(callback_query: CallbackQuery):
        giveaway_id = callback_query.data.split(':')[1]
        await _show_edit_menu(callback_query.from_user.id, giveaway_id, callback_query.message.message_id)

    async def _show_edit_menu(user_id: int, giveaway_id: str, message_id: int = None):
        cursor.execute("SELECT * FROM giveaways WHERE id = %s", (giveaway_id,))
        columns = [desc[0] for desc in cursor.description]
        giveaway = dict(zip(columns, cursor.fetchone()))
        if not giveaway:
            await bot.send_message(user_id, "üîç –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω üòï")
            return

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_name:{giveaway_id}")
        keyboard.button(text="üìÑ –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_description:{giveaway_id}")
        keyboard.button(text="üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏", callback_data=f"edit_winner_count:{giveaway_id}")
        keyboard.button(text="‚è∞ –î–∞—Ç–∞", callback_data=f"change_end_date:{giveaway_id}")
        keyboard.button(text="üñºÔ∏è –ú–µ–¥–∏–∞", callback_data=f"manage_media:{giveaway_id}")
        keyboard.button(text=" ‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_created_giveaway:{giveaway_id}")
        keyboard.adjust(2, 2, 1, 1)

        invite_info = f"\n<tg-emoji emoji-id='5424818078833715060'>üì£</tg-emoji> –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ {giveaway['quantity_invite']} –¥—Ä—É–≥–∞(–∑–µ–π)!" if \
        giveaway['invite'] else ""
        giveaway_info = f"""
<tg-emoji emoji-id='5395444784611480792'>‚úèÔ∏è</tg-emoji> –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?

<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {giveaway['name']}

<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {giveaway['description']}

<tg-emoji emoji-id='5440539497383087970'>ü•á</tg-emoji> <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:</b> {giveaway['winner_count']}
<tg-emoji emoji-id='5413879192267805083'>üóì</tg-emoji> <b>–ö–æ–Ω–µ—Ü:</b> {(giveaway['end_time'] + timedelta(hours=3)).strftime('%d.%m.%Y %H:%M')} (–ú–°–ö)
üñºÔ∏è <b>–ú–µ–¥–∏–∞:</b> {'‚úÖ –ï—Å—Ç—å' if giveaway['media_type'] else '‚ùå –ù–µ—Ç'}
{invite_info}
"""

        try:
            if giveaway['media_type'] and giveaway['media_file_id']:
                media_types = {
                    'photo': types.InputMediaPhoto,
                    'gif': types.InputMediaAnimation,
                    'video': types.InputMediaVideo
                }
                await bot.edit_message_media(
                    chat_id=user_id,
                    message_id=message_id,
                    media=media_types[giveaway['media_type']](
                        media=giveaway['media_file_id'],
                        caption=giveaway_info,
                        parse_mode='HTML'
                    ),
                    reply_markup=keyboard.as_markup()
                )
            else:
                await send_message_with_image(
                    bot,
                    user_id,
                    giveaway_info,
                    reply_markup=keyboard.as_markup(),
                    message_id=message_id,
                    parse_mode='HTML'
                )
        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
            await bot.send_message(user_id,
                                   "<tg-emoji emoji-id='5422649047334794716'>üòµ</tg-emoji> –£–ø—Å! –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!",
                                   parse_mode='HTML')

    @dp.callback_query(lambda c: c.data.startswith('edit_name:'))
    async def process_edit_name(callback_query: CallbackQuery, state: FSMContext):
        giveaway_id = callback_query.data.split(':')[1]
        await state.update_data(giveaway_id=giveaway_id, last_message_id=callback_query.message.message_id)
        await state.set_state(GiveawayStates.waiting_for_edit_name)
        await bot.answer_callback_query(callback_query.id)

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text=" ‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_post:{giveaway_id}")

        await send_message_with_image(
            bot,
            callback_query.from_user.id,
            f"<tg-emoji emoji-id='5395444784611480792'>‚úèÔ∏è</tg-emoji> –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–¥–æ {MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):\n{FORMATTING_GUIDE}",
            reply_markup=keyboard.as_markup(),
            message_id=callback_query.message.message_id,
            parse_mode='HTML'
        )

    @dp.callback_query(lambda c: c.data.startswith('edit_description:'))
    async def process_edit_description(callback_query: CallbackQuery, state: FSMContext):
        giveaway_id = callback_query.data.split(':')[1]
        await state.update_data(giveaway_id=giveaway_id, last_message_id=callback_query.message.message_id)
        await state.set_state(GiveawayStates.waiting_for_edit_description)
        await bot.answer_callback_query(callback_query.id)

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text=" ‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_post:{giveaway_id}")

        await send_message_with_image(
            bot,
            callback_query.from_user.id,
            f"<tg-emoji emoji-id='5282843764451195532'>üñ•</tg-emoji> –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–¥–æ {MAX_DESCRIPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):\n{FORMATTING_GUIDE}",
            reply_markup=keyboard.as_markup(),
            message_id=callback_query.message.message_id,
            parse_mode='HTML'
        )

    @dp.callback_query(lambda c: c.data.startswith('edit_winner_count:'))
    async def process_edit_winner_count(callback_query: CallbackQuery, state: FSMContext):
        giveaway_id = callback_query.data.split(':')[1]
        await state.update_data(giveaway_id=giveaway_id, last_message_id=callback_query.message.message_id)
        await state.set_state(GiveawayStates.waiting_for_edit_winner_count)
        await bot.answer_callback_query(callback_query.id)

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text=" ‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_post:{giveaway_id}")

        await send_message_with_image(
            bot,
            callback_query.from_user.id,
            f"<tg-emoji emoji-id='5440539497383087970'>ü•á</tg-emoji> –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π? –ú–∞–∫—Å–∏–º—É–º {MAX_WINNERS}! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ",
            reply_markup=keyboard.as_markup(),
            message_id=callback_query.message.message_id
        )

    @dp.message(GiveawayStates.waiting_for_edit_name)
    async def process_new_name(message: types.Message, state: FSMContext):
        data = await state.get_data()
        giveaway_id = data['giveaway_id']
        new_name = message.html_text if message.text else ""

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –¥–ª–∏–Ω—ã
        text_length = count_length_with_custom_emoji(new_name)

        if text_length > MAX_NAME_LENGTH:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text=" ‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_post:{giveaway_id}")
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            await send_message_with_image(
                bot,
                message.chat.id,
                f"<tg-emoji emoji-id='5447644880824181073'>‚ö†Ô∏è</tg-emoji> –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º {MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤, —Å–µ–π—á–∞—Å {text_length}. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ!\n{FORMATTING_GUIDE}",
                reply_markup=keyboard.as_markup(),
                message_id=data['last_message_id'],
                parse_mode='HTML'
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–∏–º–∏—Ç Telegram –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
        if text_length > MAX_CAPTION_LENGTH:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text=" ‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_post:{giveaway_id}")
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            await send_message_with_image(
                bot,
                message.chat.id,
                f"<tg-emoji emoji-id='5447644880824181073'>‚ö†Ô∏è</tg-emoji> –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram ({MAX_CAPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –º–µ–¥–∏–∞)! –°–µ–π—á–∞—Å {text_length}. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ!\n{FORMATTING_GUIDE}",
                reply_markup=keyboard.as_markup(),
                message_id=data['last_message_id'],
                parse_mode='HTML'
            )
            return

        try:
            cursor.execute(
                "UPDATE giveaways SET name = %s WHERE id = %s",
                (new_name, giveaway_id)
            )
            conn.commit()
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            await _show_edit_menu(message.from_user.id, giveaway_id, data['last_message_id'])
        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
            conn.rollback()
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text=" ‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_post:{giveaway_id}")
            await send_message_with_image(
                bot,
                message.chat.id,
                "<tg-emoji emoji-id='5422649047334794716'>üòµ</tg-emoji> –£–ø—Å! –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ üòî",
                reply_markup=keyboard.as_markup(),
                message_id=data['last_message_id'],
                parse_mode='HTML'
            )
        await state.clear()

    @dp.message(GiveawayStates.waiting_for_edit_description)
    async def process_new_description(message: types.Message, state: FSMContext):
        data = await state.get_data()
        giveaway_id = data['giveaway_id']
        new_description = message.html_text if message.text else ""

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –¥–ª–∏–Ω—ã
        text_length = count_length_with_custom_emoji(new_description)

        if text_length > MAX_DESCRIPTION_LENGTH:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text=" ‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_post:{giveaway_id}")
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            await send_message_with_image(
                bot,
                message.chat.id,
                f"<tg-emoji emoji-id='5447644880824181073'>‚ö†Ô∏è</tg-emoji> –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º {MAX_DESCRIPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤, —Å–µ–π—á–∞—Å {text_length}. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ!\n{FORMATTING_GUIDE}",
                reply_markup=keyboard.as_markup(),
                message_id=data['last_message_id'],
                parse_mode='HTML'
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–∏–º–∏—Ç Telegram –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
        if text_length > MAX_CAPTION_LENGTH:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text=" ‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_post:{giveaway_id}")
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            await send_message_with_image(
                bot,
                message.chat.id,
                f"<tg-emoji emoji-id='5447644880824181073'>‚ö†Ô∏è</tg-emoji> –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram ({MAX_CAPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –º–µ–¥–∏–∞)! –°–µ–π—á–∞—Å {text_length}. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ!\n{FORMATTING_GUIDE}",
                reply_markup=keyboard.as_markup(),
                message_id=data['last_message_id'],
                parse_mode='HTML'
            )
            return

        try:
            cursor.execute(
                "UPDATE giveaways SET description = %s WHERE id = %s",
                (new_description, giveaway_id)
            )
            conn.commit()
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            await _show_edit_menu(message.from_user.id, giveaway_id, data['last_message_id'])
        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
            conn.rollback()
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text=" ‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_post:{giveaway_id}")
            await send_message_with_image(
                bot,
                message.chat.id,
                "<tg-emoji emoji-id='5210952531676504517'>‚ùå</tg-emoji> –û–π! –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ üòî",
                reply_markup=keyboard.as_markup(),
                message_id=data['last_message_id'],
                parse_mode='HTML'
            )
        await state.clear()

    @dp.message(GiveawayStates.waiting_for_edit_winner_count)
    async def process_new_winner_count(message: types.Message, state: FSMContext):
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        try:
            new_winner_count = int(message.text)
            if new_winner_count <= 0:
                raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")

            if new_winner_count > MAX_WINNERS:
                data = await state.get_data()
                keyboard = InlineKeyboardBuilder()
                keyboard.button(text=" ‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_post:{data['giveaway_id']}")
                await send_message_with_image(
                    bot,
                    message.chat.id,
                    f"<tg-emoji emoji-id='5447644880824181073'>‚ö†Ô∏è</tg-emoji> –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π! –ú–∞–∫—Å–∏–º—É–º {MAX_WINNERS}",
                    message_id=data.get('last_message_id'),
                    reply_markup=keyboard.as_markup()
                )
                return

            data = await state.get_data()
            giveaway_id = data['giveaway_id']
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text=" ‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_post:{giveaway_id}")
            await send_message_with_image(
                bot,
                message.chat.id,
                "<tg-emoji emoji-id='5386367538735104399'>‚åõÔ∏è</tg-emoji> –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π...",
                message_id=data.get('last_message_id'),
            )

            cursor.execute("SELECT winner_count FROM giveaways WHERE id = %s", (giveaway_id,))
            current_winner_count = cursor.fetchone()[0]

            cursor.execute(
                "UPDATE giveaways SET winner_count = %s WHERE id = %s",
                (new_winner_count, giveaway_id)
            )

            if new_winner_count > current_winner_count:
                for place in range(current_winner_count + 1, new_winner_count + 1):
                    cursor.execute(
                        """
                        INSERT INTO congratulations (giveaway_id, place, message)
                        VALUES (%s, %s, %s)
                        """,
                        (giveaway_id, place, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–Ω—è–ª–∏ {place} –º–µ—Å—Ç–æ!")
                    )
            elif new_winner_count < current_winner_count:
                cursor.execute(
                    "DELETE FROM congratulations WHERE giveaway_id = %s AND place >= %s",
                    (giveaway_id, new_winner_count + 1)
                )

            conn.commit()
            await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            await _show_edit_menu(message.from_user.id, giveaway_id, data['last_message_id'])

        except ValueError:
            data = await state.get_data()
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text=" ‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_post:{data['giveaway_id']}")
            await send_message_with_image(
                bot,
                message.chat.id,
                "<tg-emoji emoji-id='5447644880824181073'>‚ö†Ô∏è</tg-emoji> –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ! –ù–∞–ø—Ä–∏–º–µ—Ä, 3",
                message_id=data.get('last_message_id'),
                reply_markup=keyboard.as_markup()
            )
        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
            conn.rollback()
            data = await state.get_data()
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text=" ‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_post:{data['giveaway_id']}")
            await send_message_with_image(
                bot,
                message.chat.id,
                "<tg-emoji emoji-id='5210952531676504517'>‚ùå</tg-emoji> –û–π! –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π üòî",
                message_id=data.get('last_message_id'),
                reply_markup=keyboard.as_markup()
            )

    @dp.callback_query(lambda c: c.data.startswith('manage_media:'))
    async def process_manage_media(callback_query: CallbackQuery, state: FSMContext):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ üñºÔ∏è"""
        giveaway_id = callback_query.data.split(':')[1]
        cursor.execute("SELECT * FROM giveaways WHERE id = %s", (giveaway_id,))
        giveaway = cursor.fetchone()

        if giveaway[7]:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞", callback_data=f"change_media:{giveaway_id}")
            keyboard.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞", callback_data=f"delete_media:{giveaway_id}")
            keyboard.button(text=" ‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_edit_menu:{giveaway_id}")
            keyboard.adjust(1)
            text = "<tg-emoji emoji-id='5352640560718949874'>ü§®</tg-emoji> –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –º–µ–¥–∏–∞?"
        else:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"add_media:{giveaway_id}")
            keyboard.button(text=" ‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_edit_menu:{giveaway_id}")
            keyboard.adjust(2)
            text = f"<tg-emoji emoji-id='5282843764451195532'>üñ•</tg-emoji> –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, GIF –∏–ª–∏ –≤–∏–¥–µ–æ? –ú–∞–∫—Å–∏–º—É–º {MAX_MEDIA_SIZE_MB} –ú–ë! üìé"

        message = await send_message_with_image(
            bot,
            callback_query.from_user.id,
            text,
            reply_markup=keyboard.as_markup(),
            message_id=callback_query.message.message_id
        )
        if message:
            await state.update_data(last_bot_message_id=message.message_id)
        await bot.answer_callback_query(callback_query.id)

    @dp.callback_query(lambda c: c.data.startswith('add_media:') or c.data.startswith('change_media:'))
    async def process_add_or_change_media(callback_query: CallbackQuery, state: FSMContext):
        giveaway_id = callback_query.data.split(':')[1]
        await state.update_data(giveaway_id=giveaway_id)
        await state.set_state(GiveawayStates.waiting_for_media_edit)

        data = await state.get_data()
        last_message_id = data.get('last_bot_message_id') or callback_query.message.message_id

        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=" ‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"manage_media:{giveaway_id}")]])

        message = await send_message_with_image(
            bot,
            callback_query.from_user.id,
            f"<tg-emoji emoji-id='5235837920081887219'>üì∏</tg-emoji> –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, GIF –∏–ª–∏ –≤–∏–¥–µ–æ (–¥–æ {MAX_MEDIA_SIZE_MB} –ú–ë)!",
            reply_markup=keyboard,
            message_id=last_message_id
        )
        if message:
            await state.update_data(last_bot_message_id=message.message_id)
        await bot.answer_callback_query(callback_query.id)

    @dp.callback_query(lambda c: c.data.startswith('back_to_edit_menu:'))
    async def process_back_to_edit_menu(callback_query: CallbackQuery, state: FSMContext):
        giveaway_id = callback_query.data.split(':')[1]
        data = await state.get_data()
        last_message_id = data.get('last_bot_message_id') or callback_query.message.message_id
        await _show_edit_menu(callback_query.from_user.id, giveaway_id, last_message_id)
        await bot.answer_callback_query(callback_query.id)

    @dp.message(GiveawayStates.waiting_for_media_edit)
    async def process_media_edit(message: types.Message, state: FSMContext):
        try:
            data = await state.get_data()
            giveaway_id = data.get('giveaway_id')
            last_message_id = data.get('last_bot_message_id')

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=" ‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_edit_menu:{giveaway_id}")]])
            # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            await send_message_with_image(
                bot,
                message.from_user.id,
                "<tg-emoji emoji-id='5386367538735104399'>‚åõÔ∏è</tg-emoji> –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à–µ –º–µ–¥–∏–∞...",
                reply_markup=keyboard,
                message_id=last_message_id
            )

            if message.photo:
                file_id = message.photo[-1].file_id
                media_type = 'photo'
                file_ext = 'jpg'
            elif message.animation:
                file_id = message.animation.file_id
                media_type = 'gif'
                file_ext = 'gif'
            elif message.video:
                file_id = message.video.file_id
                media_type = 'video'
                file_ext = 'mp4'
            else:
                # –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await bot.edit_message_text(
                        chat_id=message.chat.id,
                        message_id=last_message_id,
                        text="<tg-emoji emoji-id='5447644880824181073'>‚ö†Ô∏è</tg-emoji> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, GIF –∏–ª–∏ –≤–∏–¥–µ–æ!",
                        reply_markup=keyboard
                    )
                except Exception:
                    # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º last_message_id
                    await send_message_with_image(
                        bot,
                        message.from_user.id,
                        "<tg-emoji emoji-id='5447644880824181073'>‚ö†Ô∏è</tg-emoji> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, GIF –∏–ª–∏ –≤–∏–¥–µ–æ!",
                        reply_markup=keyboard,
                        message_id=last_message_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º last_message_id –≤–º–µ—Å—Ç–æ None
                    )
                await bot.delete_message(chat_id=message.chat.id,
                                         message_id=message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                return

            file = await bot.get_file(file_id)
            file_content = await bot.download_file(file.file_path)

            file_size_mb = file.file_size / (1024 * 1024)
            if file_size_mb > MAX_MEDIA_SIZE_MB:
                try:
                    await bot.edit_message_text(
                        chat_id=message.chat.id,
                        message_id=last_message_id,
                        text=f"<tg-emoji emoji-id='5197564405650307134'>ü§Ø</tg-emoji> –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º—É–º {MAX_MEDIA_SIZE_MB} –ú–ë",
                        reply_markup=keyboard
                    )
                except Exception:
                    await send_message_with_image(
                        bot,
                        message.from_user.id,
                        f"<tg-emoji emoji-id='5197564405650307134'>ü§Ø</tg-emoji> –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º—É–º {MAX_MEDIA_SIZE_MB} –ú–ë",
                        reply_markup=keyboard,
                        message_id=last_message_id
                    )
                await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                return

            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"{timestamp}_{message.message_id}.{file_ext}"
            success, result = await upload_to_storage(file_content.read(), filename)

            if not success:
                raise Exception(result)

            cursor.execute(
                "UPDATE giveaways SET media_type = %s, media_file_id = %s WHERE id = %s",
                (media_type, result, giveaway_id)
            )
            conn.commit()
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            await state.clear()
            await _show_edit_menu(message.from_user.id, giveaway_id, last_message_id)

        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
            conn.rollback()
            try:
                await bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=last_message_id,
                    text="<tg-emoji emoji-id='5210952531676504517'>‚ùå</tg-emoji> –û–π! –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏–∞ üòî",
                    reply_markup=keyboard
                )
            except Exception:
                await send_message_with_image(
                    bot,
                    message.from_user.id,
                    "<tg-emoji emoji-id='5210952531676504517'>‚ùå</tg-emoji> –û–π! –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏–∞ üòî",
                    reply_markup=keyboard,
                    message_id=last_message_id
                )
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            await state.clear()

    @dp.callback_query(lambda c: c.data.startswith('delete_media:'))
    async def process_delete_media(callback_query: CallbackQuery, state: FSMContext):
        giveaway_id = callback_query.data.split(':')[1]
        try:
            cursor.execute(
                "UPDATE giveaways SET media_type = NULL, media_file_id = NULL WHERE id = %s",
                (giveaway_id,)
            )
            conn.commit()
            data = await state.get_data()
            last_message_id = data.get('last_bot_message_id') or callback_query.message.message_id
            await _show_edit_menu(callback_query.from_user.id, giveaway_id, last_message_id)
            await bot.answer_callback_query(callback_query.id, text="<tg-emoji emoji-id='5206607081334906820'>‚úîÔ∏è</tg-emoji> –ú–µ–¥–∏–∞ —É–¥–∞–ª–µ–Ω–æ!")
        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
            conn.rollback()
            await bot.answer_callback_query(callback_query.id, text="<tg-emoji emoji-id='5210952531676504517'>‚ùå</tg-emoji> –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞")

    @dp.callback_query(lambda c: c.data.startswith('delete_giveaway:'))
    async def process_delete_giveaway(callback_query: CallbackQuery):
        giveaway_id = callback_query.data.split(':')[1]
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚úÖ –î–∞", callback_data=f"confirm_delete_giveaway:{giveaway_id}")
        keyboard.button(text="‚ùå –ù–µ—Ç", callback_data=f"cancel_delete_giveaway:{giveaway_id}")
        keyboard.adjust(2)
        await send_message_with_image(
            bot,
            callback_query.from_user.id,
            "<tg-emoji emoji-id='5445267414562389170'>üóë</tg-emoji> –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à?",
            reply_markup=keyboard.as_markup(),
            message_id=callback_query.message.message_id
        )

    @dp.callback_query(lambda c: c.data.startswith('confirm_delete_giveaway:'))
    async def process_confirm_delete_giveaway(callback_query: CallbackQuery):
        giveaway_id = callback_query.data.split(':')[1]
        try:
            cursor.execute("DELETE FROM giveaway_communities WHERE giveaway_id = %s", (giveaway_id,))
            cursor.execute("DELETE FROM participations WHERE giveaway_id = %s", (giveaway_id,))
            cursor.execute("DELETE FROM congratulations WHERE giveaway_id = %s", (giveaway_id,))
            cursor.execute("DELETE FROM giveaways WHERE id = %s", (giveaway_id,))
            conn.commit()

            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="–í –º–µ–Ω—é", callback_data="back_to_main_menu")
            await send_message_with_image(
                bot,
                callback_query.from_user.id,
                "<tg-emoji emoji-id='5206607081334906820'>‚úîÔ∏è</tg-emoji> –†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!",
                reply_markup=keyboard.as_markup(),
                message_id=callback_query.message.message_id
            )
        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
            conn.rollback()
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="–í –º–µ–Ω—é", callback_data="back_to_main_menu")
            await send_message_with_image(
                bot,
                callback_query.from_user.id,
                "<tg-emoji emoji-id='5422649047334794716'>üòµ</tg-emoji> –£–ø—Å! –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à üòî",
                reply_markup=keyboard.as_markup(),
                message_id=callback_query.message.message_id
            )

    @dp.callback_query(lambda c: c.data.startswith('cancel_delete_giveaway:'))
    async def process_cancel_delete_giveaway(callback_query: CallbackQuery):
        await process_view_created_giveaway(callback_query)

    @dp.callback_query(lambda c: c.data.startswith('change_end_date:'))
    async def process_change_end_date(callback_query: CallbackQuery, state: FSMContext):
        giveaway_id = callback_query.data.split(':')[1]
        await state.update_data(giveaway_id=giveaway_id, last_message_id=callback_query.message.message_id)
        await state.set_state(GiveawayStates.waiting_for_new_end_time)
        await callback_query.answer()

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text=" ‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_post:{giveaway_id}")

        current_time = datetime.now(pytz.timezone('Europe/Moscow')).strftime('%d.%m.%Y %H:%M')
        html_message = f"""
–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú

<tg-emoji emoji-id='5413879192267805083'>üóì</tg-emoji>  –°–µ–π—á–∞—Å –≤ –ú–æ—Å–∫–≤–µ:\n<code>{current_time}</code>
"""
        await send_message_with_image(
            bot,
            callback_query.from_user.id,
            html_message,
            reply_markup=keyboard.as_markup(),
            message_id=callback_query.message.message_id,
            parse_mode='HTML'
        )

    @dp.callback_query(lambda c: c.data.startswith('preview_giveaway:'))
    async def process_preview_giveaway(callback_query: CallbackQuery):
        giveaway_id = callback_query.data.split(':')[1]
        try:
            cursor.execute("SELECT * FROM giveaways WHERE id = %s", (giveaway_id,))
            columns = [desc[0] for desc in cursor.description]
            giveaway = dict(zip(columns, cursor.fetchone()))
            if not giveaway:
                await bot.answer_callback_query(callback_query.id, text="üîç –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω üòï")
                return

            cursor.execute(
                "UPDATE giveaways SET is_active = %s WHERE id = %s",
                ('waiting', giveaway_id)
            )
            conn.commit()
            logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ is_active –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ {giveaway_id} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 'waiting'")

            participant_count = await get_participant_count(giveaway_id, conn, cursor)

            post_text = f"""
<b>{giveaway['name']}</b>

{giveaway['description']}

<tg-emoji emoji-id='5440539497383087970'>ü•á</tg-emoji> <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:</b> {giveaway['winner_count']}
<tg-emoji emoji-id='5413879192267805083'>üóì</tg-emoji> <b>–ö–æ–Ω–µ—Ü:</b> {(giveaway['end_time'] + timedelta(hours=3)).strftime('%d.%m.%Y %H:%M')} (–ú–°–ö)
"""

            keyboard = InlineKeyboardBuilder()
            keyboard.button(
                text=f"üéâ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å ({participant_count})",
                url=f"https://t.me/Snapi/app?startapp={giveaway_id}"
            )
            keyboard.button(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"view_created_giveaway:{giveaway_id}"
            )
            keyboard.adjust(1)

            await bot.answer_callback_query(callback_query.id)

            if giveaway['media_type'] and giveaway['media_file_id']:
                media_types = {
                    'photo': types.InputMediaPhoto,
                    'gif': types.InputMediaAnimation,
                    'video': types.InputMediaVideo
                }
                await bot.edit_message_media(
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    media=media_types[giveaway['media_type']](
                        media=giveaway['media_file_id'],
                        caption=post_text,
                        parse_mode='HTML'
                    ),
                    reply_markup=keyboard.as_markup()
                )
            else:
                await send_message_with_image(
                    bot,
                    callback_query.from_user.id,
                    post_text,
                    reply_markup=keyboard.as_markup(),
                    message_id=callback_query.message.message_id,
                    parse_mode='HTML'
                )

        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {str(e)}")
            conn.rollback()
            await bot.answer_callback_query(callback_query.id,
                                            text="<tg-emoji emoji-id='5210952531676504517'>‚ùå</tg-emoji> –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ üòî")

    @dp.message(GiveawayStates.waiting_for_new_end_time)
    async def process_new_end_time(message: types.Message, state: FSMContext):
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        data = await state.get_data()
        giveaway_id = data['giveaway_id']

        if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
            await state.clear()
            await _show_edit_menu(message.from_user.id, giveaway_id, data['last_message_id'])
            return

        try:
            new_end_time = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
            moscow_tz = pytz.timezone('Europe/Moscow')
            new_end_time_tz = moscow_tz.localize(new_end_time)

            keyboard = InlineKeyboardBuilder()
            keyboard.button(text=" ‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_post:{giveaway_id}")
            await send_message_with_image(
                bot,
                message.chat.id,
                "<tg-emoji emoji-id='5386367538735104399'>‚åõÔ∏è</tg-emoji> –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...",
                message_id=data.get('last_message_id'),
            )

            cursor.execute(
                "UPDATE giveaways SET end_time = %s WHERE id = %s",
                (new_end_time_tz, giveaway_id)
            )
            conn.commit()
            await state.clear()
            await _show_edit_menu(message.from_user.id, giveaway_id, data['last_message_id'])
        except ValueError:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text=" ‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_post:{giveaway_id}")
            current_time = datetime.now(pytz.timezone('Europe/Moscow')).strftime('%d.%m.%Y %H:%M')
            html_message = f"""
<tg-emoji emoji-id='5447644880824181073'>‚ö†Ô∏è</tg-emoji> –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú

<tg-emoji emoji-id='5413879192267805083'>üóì</tg-emoji> –°–µ–π—á–∞—Å –≤ –ú–æ—Å–∫–≤–µ:\n<code>{current_time}</code>
"""
            await send_message_with_image(
                bot,
                message.chat.id,
                html_message,
                message_id=data.get('last_message_id'),
                reply_markup=keyboard.as_markup(),
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
            conn.rollback()
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text=" ‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_post:{giveaway_id}")
            await send_message_with_image(
                bot,
                message.chat.id,
                "<tg-emoji emoji-id='5210952531676504517'>‚ùå</tg-emoji> –û–π! –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É üòî",
                message_id=data.get('last_message_id'),
                reply_markup=keyboard.as_markup()
            )

    async def get_giveaway_creator(giveaway_id: str) -> int:
        cursor.execute("SELECT user_id FROM giveaways WHERE id = %s", (giveaway_id,))
        result = cursor.fetchone()
        return int(result[0]) if result else -1

    async def get_bound_communities(user_id: int) -> List[Dict[str, Any]]:
        cursor.execute("SELECT * FROM bound_communities WHERE user_id = %s", (user_id,))
        rows = cursor.fetchall()
        columns = [desc[0] for desc in cursor.description]
        return [dict(zip(columns, row)) for row in rows]

    async def bind_community_to_giveaway(giveaway_id, community_id, community_username):
        try:
            cursor.execute("SELECT * FROM bound_communities WHERE community_id = %s", (community_id,))
            community = cursor.fetchone()
            if not community:
                logger.error(f"üö´ –°–æ–æ–±—â–µ—Å—Ç–≤–æ {community_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return False

            columns = [desc[0] for desc in cursor.description]
            community_dict = dict(zip(columns, community))
            actual_username = community_username if community_username != 'id' else (
                community_dict.get('community_username') or community_dict.get('community_name'))

            cursor.execute(
                """
                INSERT INTO giveaway_communities (giveaway_id, community_id, community_username, community_type, user_id, community_name)
                VALUES (%s, %s, %s, %s, %s, %s)
                """,
                (giveaway_id, community_id, actual_username, community_dict['community_type'], community_dict['user_id'], community_dict['community_name'])
            )
            conn.commit()
            return True
        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
            conn.rollback()
            return False

    async def unbind_community_from_giveaway(giveaway_id, community_id):
        cursor.execute(
            "DELETE FROM giveaway_communities WHERE giveaway_id = %s AND community_id = %s",
            (giveaway_id, community_id)
        )
        conn.commit()

    @dp.callback_query(lambda c: c.data == 'bind_communities:' or c.data.startswith('bind_communities:'))
    async def process_bind_communities(callback_query: CallbackQuery, state: FSMContext):
        if callback_query.data == 'bind_communities:':
            await bot.answer_callback_query(callback_query.id,
                                            text="<tg-emoji emoji-id='5210952531676504517'>‚ùå</tg-emoji> –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö üòî")
            return

        giveaway_id = callback_query.data.split(':')[1]
        user_id = callback_query.from_user.id
        await state.update_data(giveaway_id=giveaway_id)
        await bot.answer_callback_query(callback_query.id)

        bound_communities = await get_bound_communities(user_id)
        giveaway_communities = await get_giveaway_communities(giveaway_id)

        user_selected_communities[user_id] = {
            'giveaway_id': giveaway_id,
            'communities': set((comm['community_id'], comm['community_username']) for comm in giveaway_communities)
        }

        keyboard = InlineKeyboardBuilder()

        if bound_communities:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
            for community in bound_communities:
                community_id = community['community_id']
                community_username = community['community_username']
                community_name = community['community_name']
                is_selected = (community_id, community_username) in user_selected_communities[user_id]['communities']

                display_name = truncate_name(community_name)
                text = f"{display_name}" + (' ‚úÖ' if is_selected else '')

                callback_data = f"toggle_community:{giveaway_id}:{community_id}:{community_username}"
                if len(callback_data.encode('utf-8')) > 60:
                    callback_data = f"toggle_community:{giveaway_id}:{community_id}:id"

                keyboard.button(text=text, callback_data=callback_data)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
            keyboard.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_community_selection:{giveaway_id}")

        # –≠—Ç–∏ –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –≤—Å–µ–≥–¥–∞
        keyboard.button(text="‚ûï –ù–æ–≤—ã–π –ø–∞–±–ª–∏–∫", callback_data=f"bind_new_community:{giveaway_id}")
        keyboard.button(text=" ‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_created_giveaway:{giveaway_id}")
        keyboard.adjust(1)

        # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤
        message_text = (
            "<tg-emoji emoji-id='5424818078833715060'>üì£</tg-emoji> –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'!"
            if bound_communities
            else "<tg-emoji emoji-id='5447644880824181073'>‚ö†Ô∏è</tg-emoji> –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –ø–∞–±–ª–∏–∫!"
        )

        await send_message_with_image(
            bot,
            callback_query.from_user.id,
            message_text,
            reply_markup=keyboard.as_markup(),
            message_id=callback_query.message.message_id
        )

    def truncate_name(name, max_length=20):
        return name if len(name) <= max_length else name[:max_length - 3] + "..."

    @dp.callback_query(lambda c: c.data.startswith('toggle_community:'))
    async def process_toggle_community(callback_query: CallbackQuery):
        user_id = callback_query.from_user.id
        parts = callback_query.data.split(':')
        if len(parts) >= 4:
            _, giveaway_id, community_id, community_username = parts
        else:
            await bot.answer_callback_query(callback_query.id,
                                            text="<tg-emoji emoji-id='5210952531676504517'>‚ùå</tg-emoji> –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ üòî")
            return

        try:
            cursor.execute("SELECT community_name FROM bound_communities WHERE community_id = %s", (community_id,))
            community = cursor.fetchone()
            community_name = community[0] if community else community_username

            if user_id not in user_selected_communities or user_selected_communities[user_id][
                'giveaway_id'] != giveaway_id:
                user_selected_communities[user_id] = {'giveaway_id': giveaway_id, 'communities': set()}

            new_keyboard = []
            for row in callback_query.message.reply_markup.inline_keyboard:
                new_row = []
                for button in row:
                    if button.callback_data == callback_query.data:
                        if '‚úÖ' in button.text:
                            new_text = f"{truncate_name(community_name)}"
                            user_selected_communities[user_id]['communities'].discard(
                                (community_id, community_username))
                        else:
                            new_text = f"{truncate_name(community_name)} ‚úÖ"
                            user_selected_communities[user_id]['communities'].add((community_id, community_username))
                        new_row.append(InlineKeyboardButton(text=new_text, callback_data=button.callback_data))
                    else:
                        new_row.append(button)
                new_keyboard.append(new_row)

            await bot.edit_message_reply_markup(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=new_keyboard)
            )
            await bot.answer_callback_query(callback_query.id)
        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
            await bot.answer_callback_query(callback_query.id,
                                            text="<tg-emoji emoji-id='5422649047334794716'>üòµ</tg-emoji> –£–ø—Å! –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ üòî")

    async def get_giveaway_communities(giveaway_id):
        try:
            cursor.execute("SELECT * FROM giveaway_communities WHERE giveaway_id = %s", (giveaway_id,))
            rows = cursor.fetchall()
            columns = [desc[0] for desc in cursor.description]
            return [dict(zip(columns, row)) for row in rows]
        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {str(e)}")
            return []

    @dp.callback_query(lambda c: c.data.startswith('activate_giveaway:'))
    async def process_activate_giveaway(callback_query: CallbackQuery):
        giveaway_id = callback_query.data.split(':')[1]
        user_id = callback_query.from_user.id
        try:
            cursor.execute(
                "SELECT community_id, community_username, community_name FROM giveaway_communities WHERE giveaway_id = %s",
                (giveaway_id,)
            )
            communities = cursor.fetchall()
            communities = [dict(zip(['community_id', 'community_username', 'community_name'], comm)) for comm in
                           communities]

            if not communities:
                await bot.answer_callback_query(callback_query.id, text="‚ö†Ô∏è –ù–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!")
                return

            keyboard = InlineKeyboardBuilder()
            for community in communities:
                display_name = truncate_name(community['community_name'])
                callback_data = f"toggle_activate_community:{giveaway_id}:{community['community_id']}:{community['community_username']}"
                if len(callback_data.encode('utf-8')) > 60:
                    callback_data = f"toggle_activate_community:{giveaway_id}:{community['community_id']}:id"
                keyboard.button(text=display_name, callback_data=callback_data)
            keyboard.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_activate_selection:{giveaway_id}")
            keyboard.button(text=" ‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_created_giveaway:{giveaway_id}")
            keyboard.adjust(1)

            await bot.answer_callback_query(callback_query.id)
            await send_message_with_image(
                bot,
                callback_query.from_user.id,
                "<tg-emoji emoji-id='5210956306952758910'>üëÄ</tg-emoji> –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã):",
                reply_markup=keyboard.as_markup(),
                message_id=callback_query.message.message_id
            )
        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
            await bot.answer_callback_query(callback_query.id,
                                            text="<tg-emoji emoji-id='5210952531676504517'>‚ùå</tg-emoji> –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ—Å—Ç–≤ üòî")

    @dp.callback_query(lambda c: c.data.startswith('toggle_activate_community:'))
    async def process_toggle_activate_community(callback_query: CallbackQuery):
        _, giveaway_id, community_id, community_username = callback_query.data.split(':')
        try:
            cursor.execute("SELECT community_name FROM bound_communities WHERE community_id = %s", (community_id,))
            community = cursor.fetchone()
            community_name = community[0] if community else community_username

            new_keyboard = []
            for row in callback_query.message.reply_markup.inline_keyboard:
                new_row = []
                for button in row:
                    if button.callback_data == callback_query.data:
                        new_text = f"{truncate_name(community_name)}" if '‚úÖ' in button.text else f"{truncate_name(community_name)} ‚úÖ"
                        new_row.append(InlineKeyboardButton(text=new_text, callback_data=button.callback_data))
                    else:
                        new_row.append(button)
                new_keyboard.append(new_row)

            await bot.edit_message_reply_markup(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=new_keyboard)
            )
            await bot.answer_callback_query(callback_query.id)
        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
            await bot.answer_callback_query(callback_query.id,
                                            text="<tg-emoji emoji-id='5210952531676504517'>‚ùå</tg-emoji> –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ üòî")

    @dp.callback_query(lambda c: c.data.startswith('confirm_activate_selection:'))
    async def process_confirm_activate_selection(callback_query: CallbackQuery):
        giveaway_id = callback_query.data.split(':')[1]
        user_id = callback_query.from_user.id

        selected_communities = []
        for row in callback_query.message.reply_markup.inline_keyboard:
            for button in row:
                if button.callback_data.startswith('toggle_activate_community:') and '‚úÖ' in button.text:
                    _, _, community_id, community_username = button.callback_data.split(':')
                    community_name = button.text.replace(' ‚úÖ', '')
                    selected_communities.append((community_id, community_username, community_name))

        if not selected_communities:
            await bot.answer_callback_query(callback_query.id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ!")
            return

        user_selected_communities[user_id] = {
            'giveaway_id': giveaway_id,
            'communities': [(comm[0], comm[1]) for comm in selected_communities]
        }

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤ —Å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
        community_links = []
        for community_id, _, community_name in selected_communities:
            try:
                chat = await bot.get_chat(community_id)
                invite_link = chat.invite_link if chat.invite_link else f"https://t.me/c/{str(community_id).replace('-100', '')}"
                community_links.append(f"<a href=\"{invite_link}\">{community_name}</a>")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ {community_id}: {str(e)}")
                community_links.append(f"{community_name} (—Å—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)")

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"publish_giveaway:{giveaway_id}")
        keyboard.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"activate_giveaway:{giveaway_id}")
        keyboard.adjust(1)

        await bot.answer_callback_query(callback_query.id)
        await send_message_with_image(
            bot,
            callback_query.from_user.id,
            f"<tg-emoji emoji-id='5282843764451195532'>üñ•</tg-emoji> –†–æ–∑—ã–≥—Ä—ã—à –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤: {', '.join(community_links)}\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø—É—Å–∫!",
            keyboard.as_markup(),
            message_id=callback_query.message.message_id
        )

    @dp.callback_query(lambda c: c.data.startswith('confirm_community_selection:'))
    async def process_confirm_community_selection(callback_query: CallbackQuery, state: FSMContext):
        giveaway_id = callback_query.data.split(':')[1]
        user_id = callback_query.from_user.id

        try:
            current_bound_communities = await get_giveaway_communities(giveaway_id)
            current_set = set(
                (str(comm['community_id']), comm['community_username']) for comm in current_bound_communities)

            selected_set = set()
            for row in callback_query.message.reply_markup.inline_keyboard:
                for button in row:
                    if button.callback_data.startswith('toggle_community:') and '‚úÖ' in button.text:
                        parts = button.callback_data.split(':')
                        if len(parts) >= 3:
                            community_id = parts[2]
                            cursor.execute("SELECT * FROM bound_communities WHERE community_id = %s", (community_id,))
                            community = cursor.fetchone()
                            if community:
                                columns = [desc[0] for desc in cursor.description]
                                community_dict = dict(zip(columns, community))
                                community_username = community_dict.get('community_username') or community_dict.get(
                                    'community_name')
                                selected_set.add((str(community_id), community_username))

            to_add = selected_set - current_set
            to_remove = current_set - selected_set

            changes_made = bool(to_add or to_remove)

            if changes_made:
                for community_id, community_username in to_add:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ bound_communities, –≤–∫–ª—é—á–∞—è media_file_ava
                    cursor.execute(
                        "SELECT community_username, community_type, user_id, community_name, media_file_ava "
                        "FROM bound_communities WHERE community_id = %s",
                        (community_id,)
                    )
                    community = cursor.fetchone()
                    if community:
                        community_username, community_type, user_id, community_name, media_file_ava = community
                        # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ giveaway_communities —Å media_file_ava
                        cursor.execute(
                            """
                            INSERT INTO giveaway_communities (
                                giveaway_id, community_id, community_username, community_type, user_id, 
                                community_name, media_file_ava
                            ) VALUES (%s, %s, %s, %s, %s, %s, %s)
                            """,
                            (
                                giveaway_id, community_id, community_username, community_type, user_id,
                                community_name, media_file_ava
                            )
                        )
                    else:
                        logger.error(f"üö´ –°–æ–æ–±—â–µ—Å—Ç–≤–æ {community_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                for community_id, _ in to_remove:
                    await unbind_community_from_giveaway(giveaway_id, community_id)

                conn.commit()
                await bot.answer_callback_query(callback_query.id, text="‚úÖ –°–æ–æ–±—â–µ—Å—Ç–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            else:
                await bot.answer_callback_query(callback_query.id, text="‚úÖ –í—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            new_callback_query = types.CallbackQuery(
                id=callback_query.id,
                from_user=callback_query.from_user,
                chat_instance=callback_query.chat_instance,
                message=callback_query.message,
                data=f"view_created_giveaway:{giveaway_id}"
            )
            if user_id in user_selected_communities:
                del user_selected_communities[user_id]
            await process_view_created_giveaway(new_callback_query, state)

        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
            conn.rollback()
            await bot.answer_callback_query(callback_query.id, text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤ üòî")

    @dp.callback_query(lambda c: c.data.startswith('publish_giveaway:'))
    async def process_publish_giveaway(callback_query: CallbackQuery):
        giveaway_id = callback_query.data.split(':')[1]
        user_id = callback_query.from_user.id
        participant_counter_tasks = []

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text=" ‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"activate_giveaway:{giveaway_id}")
        await send_message_with_image(
            bot,
            callback_query.from_user.id,
            "<tg-emoji emoji-id='5386367538735104399'>‚åõÔ∏è</tg-emoji> –ü—É–±–ª–∏–∫—É–µ–º –≤–∞—à —Ä–æ–∑—ã–≥—Ä—ã—à...",
            message_id=callback_query.message.message_id,
            parse_mode='HTML'
        )

        user_data = user_selected_communities.get(user_id)
        if not user_data or user_data['giveaway_id'] != giveaway_id or not user_data.get('communities'):
            await bot.answer_callback_query(callback_query.id, text="‚ùå –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏! üòî")
            return

        selected_communities = user_data['communities']

        try:
            cursor.execute("SELECT * FROM giveaways WHERE id = %s", (giveaway_id,))
            columns = [desc[0] for desc in cursor.description]
            giveaway = dict(zip(columns, cursor.fetchone()))
            if not giveaway:
                await bot.answer_callback_query(callback_query.id, text="üîç –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω üòï")
                return

            participant_count = await get_participant_count(giveaway_id, conn, cursor)
            post_text = f"""
<b>{giveaway['name']}</b>

{giveaway['description']}

<tg-emoji emoji-id='5440539497383087970'>ü•á</tg-emoji> <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:</b> {giveaway['winner_count']}
<tg-emoji emoji-id='5413879192267805083'>üóì</tg-emoji> <b>–ö–æ–Ω–µ—Ü:</b> {(giveaway['end_time'] + timedelta(hours=3)).strftime('%d.%m.%Y %H:%M')} (–ú–°–ö)
"""

            keyboard = InlineKeyboardBuilder()
            keyboard.button(
                text=f"üéâ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å ({participant_count})",
                url=f"https://t.me/Snapi/app?startapp={giveaway_id}"
            )
            keyboard.adjust(1)

            success_count = 0
            error_count = 0
            error_messages = []
            published_messages = []

            for community_id, community_username in selected_communities:
                try:
                    sent_message = None
                    if giveaway['media_type'] and giveaway['media_file_id']:
                        if giveaway['media_type'] == 'photo':
                            sent_message = await bot.send_photo(int(community_id), giveaway['media_file_id'],
                                                                caption=post_text, reply_markup=keyboard.as_markup(),
                                                                parse_mode='HTML')
                        elif giveaway['media_type'] == 'gif':
                            sent_message = await bot.send_animation(int(community_id),
                                                                    animation=giveaway['media_file_id'],
                                                                    caption=post_text,
                                                                    reply_markup=keyboard.as_markup(),
                                                                    parse_mode='HTML')
                        elif giveaway['media_type'] == 'video':
                            sent_message = await bot.send_video(int(community_id), video=giveaway['media_file_id'],
                                                                caption=post_text, reply_markup=keyboard.as_markup(),
                                                                parse_mode='HTML')
                    else:
                        sent_message = await bot.send_message(int(community_id), text=post_text,
                                                              reply_markup=keyboard.as_markup(), parse_mode='HTML')

                    if sent_message:
                        published_messages.append(
                            {'chat_id': sent_message.chat.id, 'message_id': sent_message.message_id})
                        participant_counter_tasks.append(
                            {'chat_id': sent_message.chat.id, 'message_id': sent_message.message_id})
                        success_count += 1
                    await asyncio.sleep(0.5)

                except aiogram.exceptions.TelegramBadRequest as e:
                    if "chat not found" in str(e).lower():
                        error_count += 1
                        error_messages.append(
                            f"<tg-emoji emoji-id='5210952531676504517'>‚ùå</tg-emoji> –û—à–∏–±–∫–∞ –≤ @{community_username}: –ë–æ—Ç –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
                    else:
                        error_count += 1
                        error_messages.append(
                            f"<tg-emoji emoji-id='5210952531676504517'>‚ùå</tg-emoji> –û—à–∏–±–∫–∞ –≤ @{community_username}: {str(e)}")
                except aiogram.exceptions.TelegramRetryAfter as e:
                    retry_after = e.retry_after
                    logger.warning(
                        f"<tg-emoji emoji-id='5386367538735104399'>‚åõÔ∏è</tg-emoji> –õ–∏–º–∏—Ç Telegram, –∂–¥—ë–º {retry_after} —Å–µ–∫.")
                    await asyncio.sleep(retry_after)
                    try:
                        if giveaway['media_type'] == 'photo':
                            sent_message = await bot.send_photo(int(community_id), giveaway['media_file_id'],
                                                                caption=post_text, reply_markup=keyboard.as_markup(),
                                                                parse_mode='HTML')
                        elif giveaway['media_type'] == 'gif':
                            sent_message = await bot.send_animation(int(community_id),
                                                                    animation=giveaway['media_file_id'],
                                                                    caption=post_text,
                                                                    reply_markup=keyboard.as_markup(),
                                                                    parse_mode='HTML')
                        elif giveaway['media_type'] == 'video':
                            sent_message = await bot.send_video(int(community_id), video=giveaway['media_file_id'],
                                                                caption=post_text, reply_markup=keyboard.as_markup(),
                                                                parse_mode='HTML')
                        else:
                            sent_message = await bot.send_message(int(community_id), text=post_text,
                                                                  reply_markup=keyboard.as_markup(), parse_mode='HTML')

                        if sent_message:
                            published_messages.append(
                                {'chat_id': sent_message.chat.id, 'message_id': sent_message.message_id})
                            participant_counter_tasks.append(
                                {'chat_id': sent_message.chat.id, 'message_id': sent_message.message_id})
                            success_count += 1
                    except aiogram.exceptions.TelegramBadRequest as retry_error:
                        if "chat not found" in str(retry_error).lower():
                            error_count += 1
                            error_messages.append(
                                f"<tg-emoji emoji-id='5210952531676504517'>‚ùå</tg-emoji> –û—à–∏–±–∫–∞ –≤ @{community_username} –ø–æ—Å–ª–µ –ø–∞—É–∑—ã: –ë–æ—Ç –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
                        else:
                            error_count += 1
                            error_messages.append(
                                f"<tg-emoji emoji-id='5210952531676504517'>‚ùå</tg-emoji> –û—à–∏–±–∫–∞ –≤ @{community_username} –ø–æ—Å–ª–µ –ø–∞—É–∑—ã: {str(retry_error)}")
                    except Exception as retry_error:
                        error_count += 1
                        error_messages.append(
                            f"<tg-emoji emoji-id='5210952531676504517'>‚ùå</tg-emoji> –û—à–∏–±–∫–∞ –≤ @{community_username} –ø–æ—Å–ª–µ –ø–∞—É–∑—ã: {str(retry_error)}")
                except Exception as e:
                    error_count += 1
                    error_messages.append(
                        f"<tg-emoji emoji-id='5210952531676504517'>‚ùå</tg-emoji> –û—à–∏–±–∫–∞ –≤ @{community_username}: {str(e)}")

            if success_count > 0:
                try:
                    cursor.execute("DELETE FROM giveaway_winners WHERE giveaway_id = %s", (giveaway_id,))
                    cursor.execute("DELETE FROM participations WHERE giveaway_id = %s", (giveaway_id,))

                    moscow_tz = pytz.timezone('Europe/Moscow')
                    current_time = datetime.now(moscow_tz)

                    cursor.execute(
                        """
                        UPDATE giveaways 
                        SET is_active = %s, created_at = %s, published_messages = %s, participant_counter_tasks = %s 
                        WHERE id = %s
                        """,
                        ('true', current_time, json.dumps(published_messages), json.dumps(participant_counter_tasks),
                         giveaway_id)
                    )
                    conn.commit()

                    counter_tasks = []
                    for task_info in participant_counter_tasks:
                        task = asyncio.create_task(
                            start_participant_counter(bot, task_info['chat_id'], task_info['message_id'], giveaway_id,
                                                      conn, cursor)
                        )
                        counter_tasks.append(task)

                    await bot.answer_callback_query(callback_query.id, text="‚úÖ –†–æ–∑—ã–≥—Ä—ã—à –∑–∞–ø—É—â–µ–Ω! üéâ")

                    channel_links = []
                    unique_chat_ids = set(msg['chat_id'] for msg in published_messages)
                    for chat_id in unique_chat_ids:
                        try:
                            chat = await bot.get_chat(chat_id)
                            channel_name = chat.title
                            invite_link = chat.invite_link if chat.invite_link else f"https://t.me/c/{str(chat_id).replace('-100', '')}"
                            channel_links.append(f"<a href=\"{invite_link}\">{channel_name}</a>")
                        except Exception as e:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ {chat_id}: {str(e)}")
                            channel_links.append("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª")

                    channel_info = f"\n<tg-emoji emoji-id='5424818078833715060'>üì£</tg-emoji> <b>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤:</b> {', '.join(channel_links)}" if channel_links else ""

                    keyboard = InlineKeyboardBuilder()
                    keyboard.button(text="üè† –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")

                    result_message = f"<b><tg-emoji emoji-id='5206607081334906820'>‚úîÔ∏è</tg-emoji> –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ {success_count} —Å–æ–æ–±—â–µ—Å—Ç–≤–∞—Ö!</b>{channel_info}\n<tg-emoji emoji-id='5451882707875276247'>üïØ</tg-emoji> –£—á–∞—Å—Ç–Ω–∏–∫–∏ –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É."
                    if error_count > 0:
                        result_message += f"\n\n<b><tg-emoji emoji-id='5210952531676504517'>‚ùå</tg-emoji> –û—à–∏–±–æ–∫: {error_count}</b>"
                        for error in error_messages:
                            if "bot is not a member" in error:
                                community = error.split('@')[1].split(':')[0]
                                result_message += f"\n<tg-emoji emoji-id='5447644880824181073'>‚ö†Ô∏è</tg-emoji> @{community}: –ë–æ—Ç –Ω–µ –∞–¥–º–∏–Ω –∏–ª–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–æ"
                            else:
                                result_message += f"\n{error}"

                    await send_message_with_image(
                        bot,
                        callback_query.from_user.id,
                        result_message,
                        reply_markup=keyboard.as_markup(),
                        message_id=callback_query.message.message_id,
                        parse_mode='HTML'
                    )
                except Exception as e:
                    logger.error(f"üö´ –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {str(e)}")
                    conn.rollback()
                    await bot.answer_callback_query(callback_query.id,
                                                    text="<tg-emoji emoji-id='5210952531676504517'>‚ùå</tg-emoji> –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ üòî")
            else:
                await bot.answer_callback_query(callback_query.id,
                                                text="<tg-emoji emoji-id='5210952531676504517'>‚ùå</tg-emoji> –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å üòî")
                error_keyboard = InlineKeyboardBuilder()
                error_keyboard.button(text=" ‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_created_giveaway:{giveaway_id}")
                await send_message_with_image(
                    bot,
                    callback_query.from_user.id,
                    f"<b><tg-emoji emoji-id='5210952531676504517'>‚ùå</tg-emoji> –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å</b>\n–û—à–∏–±–æ–∫: {error_count}\n\n<b>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:</b>\n" + "\n".join(
                        error_messages),
                    reply_markup=error_keyboard.as_markup(),
                    message_id=callback_query.message.message_id,
                    parse_mode='HTML'
                )
        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
            await bot.answer_callback_query(callback_query.id,
                                            text="<tg-emoji emoji-id='5210952531676504517'>‚ùå</tg-emoji> –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ üòî")
        finally:
            user_selected_communities.pop(user_id, None)

    async def get_participant_count(giveaway_id: str, conn, cursor) -> int:
        try:
            cursor.execute("SELECT COUNT(*) FROM participations WHERE giveaway_id = %s", (giveaway_id,))
            count = cursor.fetchone()[0]
            return count
        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á—ë—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {str(e)}")
            return 0

    async def update_participant_button(bot: Bot, chat_id: int, message_id: int, giveaway_id: str, conn, cursor):
        try:
            count = await get_participant_count(giveaway_id, conn, cursor)
            keyboard = InlineKeyboardBuilder()
            keyboard.button(
                text=f"üéâ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å ({count})",
                url=f"https://t.me/Snapi/app?startapp={giveaway_id}"
            )
            keyboard.adjust(1)
            await bot.edit_message_reply_markup(
                chat_id=chat_id,
                message_id=message_id,
                reply_markup=keyboard.as_markup()
            )
        except aiogram.exceptions.TelegramBadRequest as e:
            if "message is not modified" not in str(e).lower():
                logger.error(f"üö´ –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏: {str(e)}")
            # –ï—Å–ª–∏ —ç—Ç–æ "message is not modified", –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º –∏ –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º
        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏: {str(e)}")

    async def start_participant_counter(bot: Bot, chat_id: int, message_id: int, giveaway_id: str, conn, cursor):
        while True:
            await update_participant_button(bot, chat_id, message_id, giveaway_id, conn, cursor)
            await asyncio.sleep(60)
