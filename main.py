import asyncio
import json
import logging
from collections import defaultdict
from time import time

from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.dispatcher.middlewares.base import BaseMiddleware

from utils import check_and_end_giveaways, check_usernames, send_message_auto, count_length_with_custom_emoji, \
    MAX_NAME_LENGTH
from history_practical import register_history_handlers
from active_giveaways import register_active_giveaways_handlers
from create_giveaway import register_create_giveaway_handlers, GiveawayStates, build_navigation_keyboard
from database import conn, cursor
from created_giveaways import register_created_giveaways_handlers
from my_participations import register_my_participations_handlers
from congratulations_messages import register_congratulations_messages
from congratulations_messages_active import register_congratulations_messages_active
from new_public import register_new_public
from support import register_support_handlers

logger = logging.getLogger(__name__)

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

BOT_TOKEN = '7412394623:AAEkxMj-WqKVpPfduaY8L88YO1I_7zUIsQg'
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

user_selected_communities = {}
paid_users = {}

user_actions = defaultdict(list)
blocked_users = {}

class MainMenuStates(StatesGroup):
    main_menu = State()

class SpamProtectionMiddleware(BaseMiddleware):
    async def __call__(self, handler, event, data):
        user_id = None
        if isinstance(event, types.Message):
            user_id = event.from_user.id
        elif isinstance(event, CallbackQuery):
            user_id = event.from_user.id

        if user_id:
            current_time = time()

            if user_id in blocked_users:
                if current_time < blocked_users[user_id]:
                    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ {blocked_users[user_id]}")
                    if isinstance(event, types.Message):
                        remaining_time = int(blocked_users[user_id] - time())
                        await event.reply(f"–í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ —Å–ø–∞–º. –û—Å—Ç–∞–ª–æ—Å—å {remaining_time} —Å–µ–∫—É–Ω–¥.")
                    elif isinstance(event, CallbackQuery):
                        remaining_time = int(blocked_users[user_id] - time())
                        await bot.answer_callback_query(
                            event.id,
                            f"–í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ —Å–ø–∞–º. –û—Å—Ç–∞–ª–æ—Å—å {remaining_time} —Å–µ–∫—É–Ω–¥.",
                            show_alert=True
                        )
                    return
                else:
                    logging.info(f"–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏—Å—Ç–µ–∫–ª–∞")
                    del blocked_users[user_id]
                    user_actions[user_id].clear()

            user_actions[user_id] = [t for t in user_actions[user_id] if current_time - t < 1]
            actions_count = len(user_actions[user_id])

            user_actions[user_id].append(current_time)

            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {actions_count + 1} –¥–µ–π—Å—Ç–≤–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ–∫—É–Ω–¥—É")

            if len(user_actions[user_id]) > 10:
                blocked_users[user_id] = current_time + 60
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ —Å–ø–∞–º –¥–æ {blocked_users[user_id]}")
                if isinstance(event, types.Message):
                    remaining_time = int(blocked_users[user_id] - time())
                    await event.reply(f"–í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ —Å–ø–∞–º. –û—Å—Ç–∞–ª–æ—Å—å {remaining_time} —Å–µ–∫—É–Ω–¥.")
                elif isinstance(event, CallbackQuery):
                    remaining_time = int(blocked_users[user_id] - time())
                    await bot.answer_callback_query(
                        event.id,
                        f"–í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ —Å–ø–∞–º. –û—Å—Ç–∞–ª–æ—Å—å {remaining_time} —Å–µ–∫—É–Ω–¥.",
                        show_alert=True
                    )
                return

        return await handler(event, data)

@dp.message(Command("create"))
async def cmd_create(message: types.Message, state: FSMContext):
    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.message_id}: {str(e)}")

    # –í—ã–∑–æ–≤ –ª–æ–≥–∏–∫–∏ –∏–∑ process_create_giveaway
    message_text = f"<tg-emoji emoji-id='5395444784611480792'>‚úèÔ∏è</tg-emoji> –î–∞–≤–∞–π—Ç–µ –ø—Ä–∏–¥—É–º–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–¥–æ {MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):"
    image_url = 'https://storage.yandexcloud.net/raffle/snapi/snapi_name2.jpg'
    data = await state.get_data() if state else {}
    previous_message_length = data.get('previous_message_length', 'short')

    await state.update_data(
        user_messages=[],
        current_message_parts=[],
        limit_exceeded=False,
        last_message_time=None,
        last_message_id=message.message_id,
        previous_message_length=previous_message_length
    )
    await state.set_state(GiveawayStates.waiting_for_name)
    keyboard = await build_navigation_keyboard(state, GiveawayStates.waiting_for_name)

    sent_message = await send_message_auto(
        bot,
        chat_id=message.from_user.id,
        text=message_text,
        reply_markup=keyboard.as_markup(),
        message_id=message.message_id,
        parse_mode='HTML',
        image_url=image_url,
        media_type=None,
        previous_message_length=previous_message_length
    )
    if sent_message:
        await state.update_data(
            last_message_id=sent_message.message_id,
            previous_message_length=previous_message_length
        )

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.message_id}: {str(e)}")

    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
        logger.info(f"–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id} –∫–æ–º–∞–Ω–¥–æ–π /start")

    user_id = message.from_user.id

    cursor.execute(
        """
        SELECT COUNT(*) FROM giveaways 
        WHERE user_id = %s
        """,
        (user_id,)
    )
    has_any_giveaways = cursor.fetchone()[0] > 0

    cursor.execute(
        """
        SELECT COUNT(*) FROM giveaways 
        WHERE user_id = %s AND is_active = 'true'
        """,
        (user_id,)
    )
    has_active_giveaways = cursor.fetchone()[0] > 0

    cursor.execute(
        """
        SELECT COUNT(*) 
        FROM participations p
        JOIN giveaways g ON p.giveaway_id = g.id
        WHERE p.user_id = %s AND g.is_active = 'true'
        """,
        (user_id,)
    )
    active_participations = cursor.fetchone()[0]

    cursor.execute(
        """
        SELECT COUNT(*) 
        FROM giveaway_winners gw
        JOIN giveaways g ON gw.giveaway_id = g.id
        WHERE gw.user_id = %s AND g.is_completed = 'true'
        """,
        (user_id,)
    )
    won_participations = cursor.fetchone()[0]

    has_participations_or_wins = active_participations > 0 or won_participations > 0
    logging.info(f"User {user_id} - has_active_participations: {active_participations}, has_won_participations: {won_participations}")

    cursor.execute(
        """
        SELECT COUNT(*) FROM giveaways 
        WHERE user_id = %s AND is_completed = 'true'
        """,
        (user_id,)
    )
    has_completed_giveaways = cursor.fetchone()[0] > 0

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üéÅ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à", callback_data="create_giveaway")

    if has_any_giveaways:
        keyboard.button(text="üìã –ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏", callback_data="created_giveaways")

    if has_participations_or_wins:
        keyboard.button(text="üéØ –ú–æ–∏ —É—á–∞—Å—Ç–∏—è", callback_data="my_participations")

    if has_completed_giveaways:
        keyboard.button(text="üìú –ò—Å—Ç–æ—Ä–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π", callback_data="giveaway_history")

    keyboard.adjust(1)

    message_text = "<tg-emoji emoji-id='5199885118214255386'>üëã</tg-emoji> –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    current_message_type = 'photo' if count_length_with_custom_emoji(message_text) <= 1024 else 'image'

    data = await state.get_data()
    previous_message_length = data.get('previous_message_length', 'short')
    last_message_id = data.get('last_message_id')

    sent_message = await send_message_auto(
        bot,
        chat_id=message.chat.id,
        text=message_text,
        reply_markup=keyboard.as_markup(),
        message_id=last_message_id,
        parse_mode="HTML",
        image_url='https://storage.yandexcloud.net/raffle/snapi/snapi2.jpg',
        previous_message_length=previous_message_length
    )

    if sent_message:
        await state.update_data(
            last_message_id=sent_message.message_id,
            previous_message_type=current_message_type
        )
        await state.set_state(MainMenuStates.main_menu)

@dp.callback_query(lambda c: c.data == "back_to_main_menu")
async def back_to_main_menu(callback_query: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await state.clear()

    user_id = callback_query.from_user.id

    cursor.execute(
        """
        SELECT COUNT(*) FROM giveaways 
        WHERE user_id = %s
        """,
        (user_id,)
    )
    has_any_giveaways = cursor.fetchone()[0] > 0

    cursor.execute(
        """
        SELECT COUNT(*) FROM giveaways 
        WHERE user_id = %s AND is_active = 'true'
        """,
        (user_id,)
    )
    has_active_giveaways = cursor.fetchone()[0] > 0

    cursor.execute(
        """
        SELECT COUNT(*) 
        FROM participations p
        JOIN giveaways g ON p.giveaway_id = g.id
        WHERE p.user_id = %s AND g.is_active = 'true'
        """,
        (user_id,)
    )
    active_participations = cursor.fetchone()[0]

    cursor.execute(
        """
        SELECT COUNT(*) 
        FROM giveaway_winners gw
        JOIN giveaways g ON gw.giveaway_id = g.id
        WHERE gw.user_id = %s AND g.is_completed = 'true'
        """,
        (user_id,)
    )
    won_participations = cursor.fetchone()[0]

    has_participations_or_wins = active_participations > 0 or won_participations > 0
    logging.info(f"User {user_id} - has_active_participations: {active_participations}, has_won_participations: {won_participations}")

    cursor.execute(
        """
        SELECT COUNT(*) FROM giveaways 
        WHERE user_id = %s AND is_completed = 'true'
        """,
        (user_id,)
    )
    has_completed_giveaways = cursor.fetchone()[0] > 0

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üéÅ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à", callback_data="create_giveaway")

    if has_any_giveaways:
        keyboard.button(text="üìã –ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏", callback_data="created_giveaways")

    if has_participations_or_wins:
        keyboard.button(text="üéØ –ú–æ–∏ —É—á–∞—Å—Ç–∏—è", callback_data="my_participations")

    if has_completed_giveaways:
        keyboard.button(text="üìú –ò—Å—Ç–æ—Ä–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π", callback_data="giveaway_history")

    keyboard.adjust(1)

    message_text = "<tg-emoji emoji-id='5210956306952758910'>üëÄ</tg-emoji> –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    current_message_type = 'photo' if count_length_with_custom_emoji(message_text) <= 1024 else 'image'

    data = await state.get_data()
    previous_message_length = data.get('previous_message_length', 'short')
    last_message_id = data.get('last_message_id', callback_query.message.message_id)

    sent_message = await send_message_auto(
        bot,
        chat_id=callback_query.message.chat.id,
        text=message_text,
        reply_markup=keyboard.as_markup(),
        message_id=last_message_id,
        parse_mode="HTML",
        image_url='https://storage.yandexcloud.net/raffle/snapi/snapi2.jpg',
        previous_message_length=previous_message_length
    )

    if sent_message:
        await state.update_data(
            last_message_id=sent_message.message_id,
            previous_message_type=current_message_type
        )
        await state.set_state(MainMenuStates.main_menu)

dp.message.middleware(SpamProtectionMiddleware())
dp.callback_query.middleware(SpamProtectionMiddleware())

register_history_handlers(dp, bot, conn, cursor)
register_active_giveaways_handlers(dp, bot, conn, cursor)
register_create_giveaway_handlers(dp, bot, conn, cursor)
register_created_giveaways_handlers(dp, bot, conn, cursor)
register_my_participations_handlers(dp, bot, conn, cursor)
register_congratulations_messages(dp, bot, conn, cursor)
register_congratulations_messages_active(dp, bot, conn, cursor)
register_new_public(dp, bot, conn, cursor)
register_support_handlers(dp, bot)

@dp.message(Command("faq"))
async def cmd_faq(message: types.Message, state: FSMContext):
    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.message_id}: {str(e)}")

    faq_text = (
        "<b><tg-emoji emoji-id='5282843764451195532'>üñ•</tg-emoji> –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à?</b>\n"
        "<blockquote expandable>–ù–∞–∂–º–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é ¬´üéÅ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à¬ª –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ—à–∞–≥–æ–≤–æ:\n"
        "<tg-emoji emoji-id='5382322671679708881'>1Ô∏è‚É£</tg-emoji> –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞\n"
        "<tg-emoji emoji-id='5381990043642502553'>2Ô∏è‚É£</tg-emoji> –û–ø–∏—Å–∞–Ω–∏–µ –∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª\n"
        "<tg-emoji emoji-id='5382054253403577563'>3Ô∏è‚É£</tg-emoji> –î–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è\n"
        "<tg-emoji emoji-id='5391197405553107640'>4Ô∏è‚É£</tg-emoji> –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π</blockquote>\n\n"

        "<b><tg-emoji emoji-id='5341715473882955310'>‚öôÔ∏è</tg-emoji> –ß—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Å–æ–∑–¥–∞–Ω–Ω–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ?</b>\n"
        "<blockquote expandable>–í —Å–æ–∑–¥–∞–Ω–Ω–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ:\n"
        "<tg-emoji emoji-id='5395444784611480792'>‚úèÔ∏è</tg-emoji> –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è, –æ–ø–∏—Å–∞–Ω–∏—è, –º–µ–¥–∏–∞, —á–∏—Å–ª–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏ –∫–Ω–æ–ø–∫—É ¬´–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å¬ª\n"
        "<tg-emoji emoji-id='5443038326535759644'>üí¨</tg-emoji> –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π\n"
        "<tg-emoji emoji-id='5424818078833715060'>üì£</tg-emoji> –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞\n"  # –£–±—Ä–∞–ª–∏ <b> –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏
        "<tg-emoji emoji-id='5397916757333654639'>‚ûï</tg-emoji> –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è ¬´–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞¬ª –≤ —É—Å–ª–æ–≤–∏—è</blockquote>\n\n"

        "<b><tg-emoji emoji-id='5424818078833715060'>üì£</tg-emoji> –ö–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à?</b>\n"
        "<blockquote expandable>–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –∏–ª–∏ –≥—Ä—É–ø–ø—ã:\n"
        "<tg-emoji emoji-id='5382322671679708881'>1Ô∏è‚É£</tg-emoji> –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à\n"
        "<tg-emoji emoji-id='5381990043642502553'>2Ô∏è‚É£</tg-emoji> –ù–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–∏–≤—è–∑–∞—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–∞¬ª\n"
        "<tg-emoji emoji-id='5382054253403577563'>3Ô∏è‚É£</tg-emoji> –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "<tg-emoji emoji-id='5391197405553107640'>4Ô∏è‚É£</tg-emoji> –ü–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–µ ‚úÖ\n"
        "–ó–∞—Ç–µ–º –≤ —Ä–∞–∑–¥–µ–ª–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à¬ª –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è.</blockquote>\n\n"

        "<b><tg-emoji emoji-id='5447410659077661506'>üåê</tg-emoji> –ß—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ?</b>\n"
        "<blockquote expandable>–í —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏¬ª –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à (–æ—Ç–º–µ—á–µ–Ω ‚úÖ). –í—ã –º–æ–∂–µ—Ç–µ:\n"
        "<tg-emoji emoji-id='5395444784611480792'>‚úèÔ∏è</tg-emoji> –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à (–∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç—Ä–∞–∑—è—Ç—Å—è –≤ –ø–æ—Å—Ç–∞—Ö)\n"
        "<tg-emoji emoji-id='5210956306952758910'>üëÄ</tg-emoji> –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "<tg-emoji emoji-id='5413879192267805083'>üóì</tg-emoji> –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à –¥–æ—Å—Ä–æ—á–Ω–æ</blockquote>\n\n"

        "<b><tg-emoji emoji-id='5197630131534836123'>ü•≥</tg-emoji> –ß—Ç–æ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞?</b>\n"
        "<blockquote expandable>–ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:\n"
        "<tg-emoji emoji-id='5436386989857320953'>ü§ë</tg-emoji> –í—ã–±–∏—Ä–∞–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º\n"
        "<tg-emoji emoji-id='5451882707875276247'>üïØ</tg-emoji> –ü—É–±–ª–∏–∫—É–µ—Ç –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞—Ö –ø–æ—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π ¬´–†–µ–∑—É–ª—å—Ç–∞—Ç—ã¬ª (–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —É—á–∞—Å—Ç–∏—è)\n"
        "<tg-emoji emoji-id='5461151367559141950'>üéâ</tg-emoji> –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º –≤–∞—à–µ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –≤–∞—Å</blockquote>"
    )
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üéÅ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à", callback_data="create_giveaway")
    keyboard.button(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")
    keyboard.adjust(1)

    current_message_type = 'image' if count_length_with_custom_emoji(faq_text) > 1024 else 'photo'

    data = await state.get_data()
    previous_message_length = data.get('previous_message_length', 'short')
    last_message_id = data.get('last_message_id')

    sent_message = await send_message_auto(
        bot,
        chat_id=message.chat.id,
        text=faq_text,
        reply_markup=keyboard.as_markup(),
        message_id=last_message_id,
        parse_mode="HTML",
        image_url='https://storage.yandexcloud.net/raffle/snapi/snapi2.jpg',
        previous_message_length=previous_message_length
    )

    if sent_message:
        await state.update_data(
            last_message_id=sent_message.message_id,
            previous_message_type=current_message_type
        )
        await state.set_state(MainMenuStates.main_menu)

async def periodic_username_check():
    while True:
        await check_usernames(bot, conn, cursor)
        await asyncio.sleep(60)

async def update_participant_counters(bot: Bot, conn, cursor):
    previous_counts = {}

    while True:
        try:
            cursor.execute("SELECT * FROM giveaways WHERE is_active = %s", ('true',))
            giveaways = cursor.fetchall()
            columns = [desc[0] for desc in cursor.description]
            giveaways = [dict(zip(columns, row)) for row in giveaways]

            for giveaway in giveaways:
                giveaway_id = giveaway['id']

                cursor.execute(
                    "SELECT COUNT(*) FROM participations WHERE giveaway_id = %s",
                    (giveaway_id,)
                )
                participant_count = cursor.fetchone()[0]

                participant_counter_tasks = giveaway.get('participant_counter_tasks')
                if participant_counter_tasks:
                    if isinstance(participant_counter_tasks, str):
                        try:
                            participant_counter_tasks = json.loads(participant_counter_tasks)
                        except json.JSONDecodeError as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ {giveaway_id}: {str(e)}")
                            continue

                    for task in participant_counter_tasks:
                        chat_id = task.get('chat_id')
                        message_id = task.get('message_id')

                        if chat_id and message_id:
                            message_key = f"{giveaway_id}_{chat_id}_{message_id}"
                            previous_count = previous_counts.get(message_key, None)

                            if previous_count == participant_count:
                                logger.info(
                                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ {giveaway_id} –≤ –∫–∞–Ω–∞–ª–µ {chat_id} –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: {participant_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                                continue

                            try:
                                keyboard = InlineKeyboardBuilder()
                                button_text = giveaway.get('button', 'üéâ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ button
                                keyboard.button(
                                    text=f"{button_text} ({participant_count})",
                                    url=f"https://t.me/Snapi/app?startapp={giveaway_id}"
                                )
                                await bot.edit_message_reply_markup(
                                    chat_id=chat_id,
                                    message_id=message_id,
                                    reply_markup=keyboard.as_markup()
                                )
                                previous_counts[message_key] = participant_count
                                logger.info(
                                    f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—á–µ—Ç—á–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ {giveaway_id} –≤ –∫–∞–Ω–∞–ª–µ {chat_id}: {participant_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                            except Exception as e:
                                if "message is not modified" in str(e).lower():
                                    previous_counts[message_key] = participant_count
                                    logger.info(
                                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ {giveaway_id} –≤ –∫–∞–Ω–∞–ª–µ {chat_id} –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: {participant_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                                else:
                                    logger.error(
                                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ {chat_id}, —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {str(e)}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ update_participant_counters: {str(e)}")

        await asyncio.sleep(60)

async def main():
    check_task = asyncio.create_task(check_and_end_giveaways(bot, conn, cursor))
    username_check_task = asyncio.create_task(periodic_username_check())
    participant_counter_task = asyncio.create_task(update_participant_counters(bot, conn, cursor))

    try:
        await dp.start_polling(bot)
    finally:
        check_task.cancel()
        username_check_task.cancel()
        participant_counter_task.cancel()
        cursor.close()
        conn.close()
        logging.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ.")

if __name__ == '__main__':
    asyncio.run(main())
