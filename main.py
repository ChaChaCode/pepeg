import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from supabase import create_client, Client
from fastapi import FastAPI, Request, Response
from fastapi.middleware.cors import CORSMiddleware
from utils import send_message_with_image, check_and_end_giveaways, check_usernames
from active_giveaways import register_active_giveaways_handlers
from create_giveaway import register_create_giveaway_handlers
from created_giveaways import register_created_giveaways_handlers
from my_participations import register_my_participations_handlers
from congratulations_messages import register_congratulations_messages
from congratulations_messages_active import register_congratulations_messages_active
from new_public import register_new_public
from aiogram.fsm.context import FSMContext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = '7412394623:AAEkxMj-WqKVpPfduaY8L88YO1I_7zUIsQg'
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
supabase_url = 'https://olbnxtiigxqcpailyecq.supabase.co'
supabase_key = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9sYm54dGlpZ3hxY3BhaWx5ZWNxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzAxMjQwNzksImV4cCI6MjA0NTcwMDA3OX0.dki8TuMUhhFCoUVpHrcJo4V1ngKEnNotpLtZfRjsePY'
supabase: Client = create_client(supabase_url, supabase_key)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://vite-react-raffle.vercel.app", "http://localhost:3000"],
    allow_credentials=True,
    allow_methods=["GET", "POST", "OPTIONS"],
    allow_headers=["*"],
)

user_selected_communities = {}
paid_users = {}

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
register_active_giveaways_handlers(dp, bot, supabase)
register_create_giveaway_handlers(dp, bot, supabase)
register_created_giveaways_handlers(dp, bot, supabase)
register_my_participations_handlers(dp, bot, supabase)
register_congratulations_messages(dp, bot, supabase)
register_congratulations_messages_active(dp, bot, supabase)
register_new_public(dp, bot, supabase)

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_subscription(chat_id: str, user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id=chat_id, user_id=user_id)
        logging.info(f"–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id}: {member.status}")
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è chat_id={chat_id}, user_id={user_id}: {e}")
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üéÅ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à", callback_data="create_giveaway")],
        [types.InlineKeyboardButton(text="üìã –ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏", callback_data="created_giveaways")],
        [types.InlineKeyboardButton(text="üî• –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏", callback_data="active_giveaways")],
        [types.InlineKeyboardButton(text="üéØ –ú–æ–∏ —É—á–∞—Å—Ç–∏—è", callback_data="my_participations")],
    ])
    await send_message_with_image(
        bot, message.chat.id, "<tg-emoji emoji-id='5199885118214255386'>üëã</tg-emoji> –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    try:
        help_text = (
            "<b><tg-emoji emoji-id='5282843764451195532'>üñ•</tg-emoji> –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à</b>\n"
            "<blockquote expandable>–ü–µ—Ä–≤–æ–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, ‚Äî —ç—Ç–æ –Ω–∞–∂–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∫–Ω–æ–ø–∫—É ¬´üéÅ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à¬ª. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ—à–∞–≥–æ–≤–æ –≤–≤–µ—Å—Ç–∏:\n"
            "<tg-emoji emoji-id='5382322671679708881'>1Ô∏è‚É£</tg-emoji> –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞\n"
            "<tg-emoji emoji-id='5381990043642502553'>2Ô∏è‚É£</tg-emoji> –û–ø–∏—Å–∞–Ω–∏–µ\n"
            "<tg-emoji emoji-id='5381879959335738545'>3Ô∏è‚É£</tg-emoji> –ú–µ–¥–∏–∞—Ñ–∞–π–ª (–µ—Å–ª–∏ –æ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º)\n"
            "<tg-emoji emoji-id='5382054253403577563'>4Ô∏è‚É£</tg-emoji> –î–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è\n"
            "<tg-emoji emoji-id='5391197405553107640'>5Ô∏è‚É£</tg-emoji> –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π</blockquote>\n\n"
        )
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üéÅ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à", callback_data="create_giveaway")
        keyboard.button(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")
        keyboard.adjust(1)
        await bot.send_message(
            chat_id=message.chat.id,
            text=help_text,
            parse_mode="HTML",
            reply_markup=keyboard.as_markup()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cmd_help: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /help.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query(lambda c: c.data == "back_to_main_menu")
async def back_to_main_menu(callback_query: CallbackQuery, state: FSMContext):
    await state.clear()
    await bot.answer_callback_query(callback_query.id)
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üéÅ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à", callback_data="create_giveaway")
    keyboard.button(text="üìã –ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏", callback_data="created_giveaways")
    keyboard.button(text="üî• –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏", callback_data="active_giveaways")
    keyboard.button(text="üéØ –ú–æ–∏ —É—á–∞—Å—Ç–∏—è", callback_data="my_participations")
    keyboard.adjust(1)
    await send_message_with_image(
        bot,
        callback_query.message.chat.id,
        "<tg-emoji emoji-id='5210956306952758910'>üëÄ</tg-emoji> –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard.as_markup(),
        message_id=callback_query.message.message_id
    )

# API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@app.post("/check_subscription")
async def api_check_subscription(request: Request):
    data = await request.json()
    user_id = data.get("user_id")
    chat_id = data.get("chat_id")
    if not user_id or not chat_id:
        logging.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç user_id –∏–ª–∏ chat_id –≤ –∑–∞–ø—Ä–æ—Å–µ")
        return {"error": "Missing user_id or chat_id", "is_subscribed": False}
    logging.info(f"API –∑–∞–ø—Ä–æ—Å: user_id={user_id}, chat_id={chat_id}")
    result = await check_subscription(chat_id, user_id)
    return {"is_subscribed": result}

# –†—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –¥–ª—è preflight-–∑–∞–ø—Ä–æ—Å–∞
@app.options("/check_subscription")
async def options_check_subscription():
    headers = {
        "Access-Control-Allow-Origin": "https://vite-react-raffle.vercel.app",
        "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
        "Access-Control-Allow-Headers": "*",
    }
    return Response(status_code=204, headers=headers)

# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ usernames
async def periodic_username_check():
    while True:
        await check_usernames(bot, supabase)
        await asyncio.sleep(60)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    check_task = asyncio.create_task(check_and_end_giveaways(bot, supabase))
    username_check_task = asyncio.create_task(periodic_username_check())

    from uvicorn import Config, Server
    config = Config(app=app, host="0.0.0.0", port=8000, loop="asyncio")
    server = Server(config)

    try:
        logging.info("–ë–æ—Ç –∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è...")
        await asyncio.gather(
            dp.start_polling(bot),
            server.serve()
        )
    finally:
        await bot.session.close()
        check_task.cancel()
        username_check_task.cancel()
        logging.info("–ë–æ—Ç –∏ —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

if __name__ == "__main__":
    asyncio.run(main())
