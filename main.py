import asyncio
import json
import logging
from collections import defaultdict
from time import time

from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.dispatcher.middlewares.base import BaseMiddleware

from utils import send_message_with_image, check_and_end_giveaways, check_usernames
from history_practical import register_history_handlers
from active_giveaways import register_active_giveaways_handlers
from create_giveaway import register_create_giveaway_handlers
from database import conn, cursor
from created_giveaways import register_created_giveaways_handlers
from my_participations import register_my_participations_handlers
from congratulations_messages import register_congratulations_messages
from congratulations_messages_active import register_congratulations_messages_active
from new_public import register_new_public

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
BOT_TOKEN = '7412394623:AAEkxMj-WqKVpPfduaY8L88YO1I_7zUIsQg'
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
user_selected_communities = {}
paid_users = {}

# –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞
user_actions = defaultdict(list)
blocked_users = {}

# Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∞–º–∞
class SpamProtectionMiddleware(BaseMiddleware):
    async def __call__(self, handler, event, data):
        user_id = None
        if isinstance(event, types.Message):
            user_id = event.from_user.id
        elif isinstance(event, CallbackQuery):
            user_id = event.from_user.id

        if user_id:
            current_time = time()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            if user_id in blocked_users:
                if current_time < blocked_users[user_id]:
                    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ {blocked_users[user_id]}")
                    if isinstance(event, types.Message):
                        remaining_time = int(blocked_users[user_id] - time())
                        await event.reply(f"–í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ —Å–ø–∞–º. –û—Å—Ç–∞–ª–æ—Å—å {remaining_time} —Å–µ–∫—É–Ω–¥.")
                    elif isinstance(event, CallbackQuery):
                        remaining_time = int(blocked_users[user_id] - time())
                        await bot.answer_callback_query(
                            event.id,
                            f"–í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ —Å–ø–∞–º. –û—Å—Ç–∞–ª–æ—Å—å {remaining_time} —Å–µ–∫—É–Ω–¥.",
                            show_alert=True
                        )
                    return
                else:
                    logging.info(f"–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏—Å—Ç–µ–∫–ª–∞")
                    del blocked_users[user_id]
                    user_actions[user_id].clear()

            # –û—á–∏—â–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è —Å—Ç–∞—Ä—à–µ 1 —Å–µ–∫—É–Ω–¥—ã
            user_actions[user_id] = [t for t in user_actions[user_id] if current_time - t < 1]
            actions_count = len(user_actions[user_id])

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            user_actions[user_id].append(current_time)

            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {actions_count + 1} –¥–µ–π—Å—Ç–≤–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ–∫—É–Ω–¥—É")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
            if len(user_actions[user_id]) > 3:
                blocked_users[user_id] = current_time + 60
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ —Å–ø–∞–º –¥–æ {blocked_users[user_id]}")
                if isinstance(event, types.Message):
                    remaining_time = int(blocked_users[user_id] - time())
                    await event.reply(f"–í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ —Å–ø–∞–º. –û—Å—Ç–∞–ª–æ—Å—å {remaining_time} —Å–µ–∫—É–Ω–¥.")
                elif isinstance(event, CallbackQuery):
                    remaining_time = int(blocked_users[user_id] - time())
                    await bot.answer_callback_query(
                        event.id,
                        f"–í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ —Å–ø–∞–º. –û—Å—Ç–∞–ª–æ—Å—å {remaining_time} —Å–µ–∫—É–Ω–¥.",
                        show_alert=True
                    )
                return

        # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
        return await handler(event, data)

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
        logger.info(f"–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id} –∫–æ–º–∞–Ω–¥–æ–π /start")

    user_id = message.from_user.id

    cursor.execute(
        """
        SELECT COUNT(*) FROM giveaways 
        WHERE user_id = %s
        """,
        (user_id,)
    )
    has_any_giveaways = cursor.fetchone()[0] > 0

    cursor.execute(
        """
        SELECT COUNT(*) FROM giveaways 
        WHERE user_id = %s AND is_active = 'true'
        """,
        (user_id,)
    )
    has_active_giveaways = cursor.fetchone()[0] > 0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–∏—è –∏ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏
    cursor.execute(
        """
        SELECT COUNT(*) 
        FROM participations p
        JOIN giveaways g ON p.giveaway_id = g.id
        WHERE p.user_id = %s AND g.is_active = 'true'
        """,
        (user_id,)
    )
    active_participations = cursor.fetchone()[0]

    cursor.execute(
        """
        SELECT COUNT(*) 
        FROM giveaway_winners gw
        JOIN giveaways g ON gw.giveaway_id = g.id
        WHERE gw.user_id = %s AND g.is_completed = 'true'
        """,
        (user_id,)
    )
    won_participations = cursor.fetchone()[0]

    has_participations_or_wins = active_participations > 0 or won_participations > 0
    logging.info(f"User {user_id} - has_active_participations: {active_participations}, has_won_participations: {won_participations}")

    cursor.execute(
        """
        SELECT COUNT(*) FROM giveaways 
        WHERE user_id = %s AND is_completed = 'true'
        """,
        (user_id,)
    )
    has_completed_giveaways = cursor.fetchone()[0] > 0

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üéÅ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à", callback_data="create_giveaway")

    if has_any_giveaways:
        keyboard.button(text="üìã –ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏", callback_data="created_giveaways")

    if has_participations_or_wins:
        keyboard.button(text="üéØ –ú–æ–∏ —É—á–∞—Å—Ç–∏—è", callback_data="my_participations")

    if has_completed_giveaways:
        keyboard.button(text="üìú –ò—Å—Ç–æ—Ä–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π", callback_data="giveaway_history")

    keyboard.adjust(1)

    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    await send_message_with_image(
        bot,
        message.chat.id,
        "<tg-emoji emoji-id='5199885118214255386'>üëã</tg-emoji> –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard.as_markup()
    )

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware
dp.message.middleware(SpamProtectionMiddleware())
dp.callback_query.middleware(SpamProtectionMiddleware())

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–∑ –º–æ–¥—É–ª–µ–π
register_history_handlers(dp, bot, conn, cursor)
register_active_giveaways_handlers(dp, bot, conn, cursor)
register_create_giveaway_handlers(dp, bot, conn, cursor)
register_created_giveaways_handlers(dp, bot, conn, cursor)
register_my_participations_handlers(dp, bot, conn, cursor)
register_congratulations_messages(dp, bot, conn, cursor)
register_congratulations_messages_active(dp, bot, conn, cursor)
register_new_public(dp, bot, conn, cursor)

@dp.callback_query(lambda c: c.data == "back_to_main_menu")
async def back_to_main_menu(callback_query: CallbackQuery, state: FSMContext):
    await state.clear()
    await bot.answer_callback_query(callback_query.id)

    user_id = callback_query.from_user.id

    cursor.execute(
        """
        SELECT COUNT(*) FROM giveaways 
        WHERE user_id = %s
        """,
        (user_id,)
    )
    has_any_giveaways = cursor.fetchone()[0] > 0

    cursor.execute(
        """
        SELECT COUNT(*) FROM giveaways 
        WHERE user_id = %s AND is_active = 'true'
        """,
        (user_id,)
    )
    has_active_giveaways = cursor.fetchone()[0] > 0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–∏—è –∏ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏
    cursor.execute(
        """
        SELECT COUNT(*) 
        FROM participations p
        JOIN giveaways g ON p.giveaway_id = g.id
        WHERE p.user_id = %s AND g.is_active = 'true'
        """,
        (user_id,)
    )
    active_participations = cursor.fetchone()[0]

    cursor.execute(
        """
        SELECT COUNT(*) 
        FROM giveaway_winners gw
        JOIN giveaways g ON gw.giveaway_id = g.id
        WHERE gw.user_id = %s AND g.is_completed = 'true'
        """,
        (user_id,)
    )
    won_participations = cursor.fetchone()[0]

    has_participations_or_wins = active_participations > 0 or won_participations > 0
    logging.info(f"User {user_id} - has_active_participations: {active_participations}, has_won_participations: {won_participations}")

    cursor.execute(
        """
        SELECT COUNT(*) FROM giveaways 
        WHERE user_id = %s AND is_completed = 'true'
        """,
        (user_id,)
    )
    has_completed_giveaways = cursor.fetchone()[0] > 0

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üéÅ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à", callback_data="create_giveaway")

    if has_any_giveaways:
        keyboard.button(text="üìã –ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏", callback_data="created_giveaways")

    if has_participations_or_wins:
        keyboard.button(text="üéØ –ú–æ–∏ —É—á–∞—Å—Ç–∏—è", callback_data="my_participations")

    if has_completed_giveaways:
        keyboard.button(text="üìú –ò—Å—Ç–æ—Ä–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π", callback_data="giveaway_history")

    keyboard.adjust(1)

    await send_message_with_image(
        bot,
        callback_query.message.chat.id,
        "<tg-emoji emoji-id='5210956306952758910'>üëÄ</tg-emoji> –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard.as_markup(),
        message_id=callback_query.message.message_id
    )

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    try:
        help_text = (
            "<b><tg-emoji emoji-id='5282843764451195532'>üñ•</tg-emoji> –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à</b>\n"
            "<blockquote expandable>–ü–µ—Ä–≤–æ–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, ‚Äî —ç—Ç–æ –Ω–∞–∂–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∫–Ω–æ–ø–∫—É ¬´üéÅ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à¬ª. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ—à–∞–≥–æ–≤–æ –≤–≤–µ—Å—Ç–∏:\n"
            "<tg-emoji emoji-id='5382322671679708881'>1Ô∏è‚É£</tg-emoji> –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞\n"
            "<tg-emoji emoji-id='5381990043642502553'>2Ô∏è‚É£</tg-emoji> –û–ø–∏—Å–∞–Ω–∏–µ\n"
            "<tg-emoji emoji-id='5381879959335738545'>3Ô∏è‚É£</tg-emoji> –ú–µ–¥–∏–∞—Ñ–∞–π–ª (–µ—Å–ª–∏ –æ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º)\n"
            "<tg-emoji emoji-id='5382054253403577563'>4Ô∏è‚É£</tg-emoji> –î–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è\n"
            "<tg-emoji emoji-id='5391197405553107640'>5Ô∏è‚É£</tg-emoji> –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π</blockquote>\n\n"

            "<b><tg-emoji emoji-id='5424818078833715060'>üì£</tg-emoji> –ö–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à</b>\n"
            "<blockquote expandable>–ß—Ç–æ–±—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –∏–ª–∏ –≥—Ä—É–ø–ø—ã. –î–ª—è —ç—Ç–æ–≥–æ:\n"
            "<tg-emoji emoji-id='5382322671679708881'>1Ô∏è‚É£</tg-emoji> –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–∞—à —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à\n"
            "<tg-emoji emoji-id='5381990043642502553'>2Ô∏è‚É£</tg-emoji> –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–∏–≤—è–∑–∞—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–∞¬ª\n"
            "<tg-emoji emoji-id='5381879959335738545'>3Ô∏è‚É£</tg-emoji> –ù–∞–∂–º–∏—Ç–µ ¬´‚ûï –ù–æ–≤—ã–π –ø–∞–±–ª–∏–∫¬ª\n"
            "<tg-emoji emoji-id='5382054253403577563'>4Ô∏è‚É£</tg-emoji> –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≤–∞—à –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "<tg-emoji emoji-id='5391197405553107640'>5Ô∏è‚É£</tg-emoji> –ë–æ—Ç —É–≤–µ–¥–æ–º–∏—Ç –≤–∞—Å –æ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–µ ‚úÖ\n"
            "–ü–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à¬ª –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à.</blockquote>\n\n"

            "<b><tg-emoji emoji-id='5341715473882955310'>‚öôÔ∏è</tg-emoji> –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏</b>\n"
            "<blockquote expandable>–í —Å–æ–∑–¥–∞–Ω–Ω–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "<tg-emoji emoji-id='5395444784611480792'>‚úèÔ∏è</tg-emoji> –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, –º–µ–¥–∏–∞—Ñ–∞–π–ª, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏ –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ü–µ –ø–æ—Å—Ç–∞ –∏–ª–∏ –∂–µ –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ\n"
            "<tg-emoji emoji-id='5443038326535759644'>üí¨</tg-emoji> –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π\n"
            "<tg-emoji emoji-id='5397916757333654639'>‚ûï</tg-emoji> –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ ¬´–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞¬ª –≤ —É—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è</blockquote>\n\n"

            "<b><tg-emoji emoji-id='5447410659077661506'>üåê</tg-emoji> –ß—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å, –∫–æ–≥–¥–∞ —Ä–æ–∑—ã–≥—Ä—ã—à –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω</b>\n"
            "<blockquote expandable>–í –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ¬´–ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏¬ª, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –∫–æ—Ç–æ—Ä—ã–π –ø–æ—á–º–µ—á–µ–Ω ‚úÖ –≤ –Ω–∞—á–∞–ª–µ. –í –Ω–µ–º –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "<tg-emoji emoji-id='5395444784611480792'>‚úèÔ∏è</tg-emoji> –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à (–≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç—Ä–∞–∑—è—Ç—Å—è –≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞—Ö)\n"
            "<tg-emoji emoji-id='5210956306952758910'>üëÄ</tg-emoji> –°–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—á–∞—Å—Ç–≤—É—é—Ç\n"
            "<tg-emoji emoji-id='5413879192267805083'>üóì</tg-emoji> –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à</blockquote>\n\n"

            "<b><tg-emoji emoji-id='5197630131534836123'>ü•≥</tg-emoji> –ß—Ç–æ –±—É–¥–µ—Ç, –∫–æ–≥–¥–∞ —Ä–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è</b>\n"
            "<blockquote expandable>–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:\n"
            "<tg-emoji emoji-id='5436386989857320953'>ü§ë</tg-emoji> –û–ø—Ä–µ–¥–µ–ª–∏—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π\n"
            "<tg-emoji emoji-id='5451882707875276247'>üïØ</tg-emoji> –û–ø—É–±–ª–∏–∫—É–µ—Ç –≤ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤–∞—Ö –ø–æ—Å—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏ –∫–Ω–æ–ø–∫–æ–π ¬´–†–µ–∑—É–ª—å—Ç–∞—Ç—ã¬ª (–ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–≤–∏–¥—è—Ç –≥—Ä–∞—Ñ–∏–∫ —É—á–∞—Å—Ç–∏—è)\n"
            "<tg-emoji emoji-id='5461151367559141950'>üéâ</tg-emoji> –û—Ç–ø—Ä–∞–≤–∏—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–¥–∞–Ω–Ω–æ–µ –≤–∞–º–∏ —Ä–∞–Ω–µ–µ –∏ —É–≤–µ–¥–æ–º–∏—Ç –æ–± —ç—Ç–æ–º –≤–∞—Å</blockquote>"
        )
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üéÅ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à", callback_data="create_giveaway")
        keyboard.button(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")
        keyboard.adjust(1)
        await bot.send_message(
            chat_id=message.chat.id,
            text=help_text,
            parse_mode="HTML",
            reply_markup=keyboard.as_markup()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cmd_help: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /help.")

async def periodic_username_check():
    while True:
        await check_usernames(bot, conn, cursor)
        await asyncio.sleep(60)

async def update_participant_counters(bot: Bot, conn, cursor):
    previous_counts = {}

    while True:
        try:
            cursor.execute("SELECT * FROM giveaways WHERE is_active = %s", ('true',))
            giveaways = cursor.fetchall()
            columns = [desc[0] for desc in cursor.description]
            giveaways = [dict(zip(columns, row)) for row in giveaways]

            for giveaway in giveaways:
                giveaway_id = giveaway['id']

                cursor.execute(
                    "SELECT COUNT(*) FROM participations WHERE giveaway_id = %s",
                    (giveaway_id,)
                )
                participant_count = cursor.fetchone()[0]

                participant_counter_tasks = giveaway.get('participant_counter_tasks')
                if participant_counter_tasks:
                    if isinstance(participant_counter_tasks, str):
                        try:
                            participant_counter_tasks = json.loads(participant_counter_tasks)
                        except json.JSONDecodeError as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ {giveaway_id}: {str(e)}")
                            continue

                    for task in participant_counter_tasks:
                        chat_id = task.get('chat_id')
                        message_id = task.get('message_id')

                        if chat_id and message_id:
                            message_key = f"{giveaway_id}_{chat_id}_{message_id}"
                            previous_count = previous_counts.get(message_key, None)

                            if previous_count == participant_count:
                                logger.info(
                                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ {giveaway_id} –≤ –∫–∞–Ω–∞–ª–µ {chat_id} –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: {participant_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                                continue

                            try:
                                keyboard = InlineKeyboardBuilder()
                                keyboard.button(
                                    text=f"üéâ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å ({participant_count})",
                                    url=f"https://t.me/Snapi/app?startapp={giveaway_id}"
                                )
                                await bot.edit_message_reply_markup(
                                    chat_id=chat_id,
                                    message_id=message_id,
                                    reply_markup=keyboard.as_markup()
                                )
                                previous_counts[message_key] = participant_count
                                logger.info(
                                    f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—á–µ—Ç—á–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ {giveaway_id} –≤ –∫–∞–Ω–∞–ª–µ {chat_id}: {participant_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                            except Exception as e:
                                if "message is not modified" in str(e).lower():
                                    previous_counts[message_key] = participant_count
                                    logger.info(
                                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ {giveaway_id} –≤ –∫–∞–Ω–∞–ª–µ {chat_id} –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: {participant_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                                else:
                                    logger.error(
                                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ {chat_id}, —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {str(e)}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ update_participant_counters: {str(e)}")

        await asyncio.sleep(60)

async def main():
    check_task = asyncio.create_task(check_and_end_giveaways(bot, conn, cursor))
    username_check_task = asyncio.create_task(periodic_username_check())
    participant_counter_task = asyncio.create_task(update_participant_counters(bot, conn, cursor))

    try:
        await dp.start_polling(bot)
    finally:
        check_task.cancel()
        username_check_task.cancel()
        participant_counter_task.cancel()
        cursor.close()
        conn.close()
        logging.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ.")

if __name__ == '__main__':
    asyncio.run(main())
