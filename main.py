import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
import psycopg2
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from utils import send_message_with_image, check_and_end_giveaways, check_usernames
from active_giveaways import register_active_giveaways_handlers
from create_giveaway import register_create_giveaway_handlers
from created_giveaways import register_created_giveaways_handlers
from my_participations import register_my_participations_handlers
from congratulations_messages import register_congratulations_messages
from congratulations_messages_active import register_congratulations_messages_active
from new_public import register_new_public
from aiogram.fsm.context import FSMContext
from collections import defaultdict
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
BOT_TOKEN = '7412394623:AAEkxMj-WqKVpPfduaY8L88YO1I_7zUIsQg'
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è PostgreSQL
db_config = {
    "host": "195.200.26.251",
    "port": 5432,
    "database": "mydatabase",
    "user": "app_user",
    "password": "moxy1337"
}

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
try:
    conn = psycopg2.connect(**db_config)
    logging.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ PostgreSQL!")
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
    raise

# –°–æ–∑–¥–∞–π –∫—É—Ä—Å–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
cursor = conn.cursor()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
user_selected_communities = {}
paid_users = {}

# –°–∏—Å—Ç–µ–º–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
MAX_ACTIONS_PER_SECOND = 4  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π –∑–∞ —Å–µ–∫—É–Ω–¥—É
BLOCK_DURATION = 300  # 10 —Å–µ–∫—É–Ω–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
user_requests = defaultdict(list)  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
blocked_users = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
notification_sent = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –±—ã–ª–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ

# –û–±—â–∏–π middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ –¥–µ–π—Å—Ç–≤–∏–π –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
async def rate_limit_middleware(handler, event, data):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –∏ –ø–æ–ª—É—á–∞–µ–º user_id
    if isinstance(event, types.Message):
        user_id = event.from_user.id
        reply_method = event.reply
    elif isinstance(event, CallbackQuery):
        user_id = event.from_user.id
        reply_method = lambda text: bot.send_message(event.message.chat.id, text)
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É —Å callback_data: '{event.data}'")
    else:
        return await handler(event, data)

    current_time = datetime.now()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if user_id in blocked_users:
        if current_time < blocked_users[user_id]:
            # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –º–æ–ª—á–∏–º
            if user_id in notification_sent and notification_sent[user_id]:
                if isinstance(event, CallbackQuery):
                    await bot.answer_callback_query(event.id)  # –ó–∞–∫—Ä—ã–≤–∞–µ–º callback –±–µ–∑ –æ—Ç–≤–µ—Ç–∞
                return
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –æ—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –æ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            await reply_method("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫.")
            notification_sent[user_id] = True
            if isinstance(event, CallbackQuery):
                await bot.answer_callback_query(event.id)  # –ó–∞–∫—Ä—ã–≤–∞–µ–º callback
            return
        else:
            # –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            del blocked_users[user_id]
            if user_id in notification_sent:
                del notification_sent[user_id]

    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (—Å—Ç–∞—Ä—à–µ 1 —Å–µ–∫—É–Ω–¥—ã)
    user_requests[user_id] = [t for t in user_requests[user_id] if (current_time - t).total_seconds() < 1]

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    user_requests[user_id].append(current_time)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
    if len(user_requests[user_id]) > MAX_ACTIONS_PER_SECOND:
        blocked_users[user_id] = current_time + timedelta(seconds=BLOCK_DURATION)
        await reply_method("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫.")
        notification_sent[user_id] = True
        if isinstance(event, CallbackQuery):
            await bot.answer_callback_query(event.id)  # –ó–∞–∫—Ä—ã–≤–∞–µ–º callback
        return

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞, –µ—Å–ª–∏ –ª–∏–º–∏—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω
    return await handler(event, data)

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ middleware –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º –∏ callback-–∑–∞–ø—Ä–æ—Å–∞–º
dp.message.outer_middleware(rate_limit_middleware)
dp.callback_query.outer_middleware(rate_limit_middleware)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
register_active_giveaways_handlers(dp, bot, conn, cursor)
register_create_giveaway_handlers(dp, bot, conn, cursor)
register_created_giveaways_handlers(dp, bot, conn, cursor)
register_my_participations_handlers(dp, bot, conn, cursor)
register_congratulations_messages(dp, bot, conn, cursor)
register_congratulations_messages_active(dp, bot, conn, cursor)
register_new_public(dp, bot, conn, cursor)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª—é–±—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute(
        """
        SELECT COUNT(*) FROM giveaways 
        WHERE user_id = %s
        """,
        (user_id,)
    )
    has_any_giveaways = cursor.fetchone()[0] > 0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    cursor.execute(
        """
        SELECT COUNT(*) FROM giveaways 
        WHERE user_id = %s AND is_active = 'true'
        """,
        (user_id,)
    )
    has_active_giveaways = cursor.fetchone()[0] > 0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É—á–∞—Å—Ç–∏–π –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö
    cursor.execute(
        """
        SELECT COUNT(*) 
        FROM participations p
        JOIN giveaways g ON p.giveaway_id = g.id
        WHERE p.user_id = %s AND g.is_active = 'true'
        """,
        (user_id,)
    )
    has_active_participations = cursor.fetchone()[0] > 0
    logging.info(f"User {user_id} - has_active_participations: {has_active_participations}")

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üéÅ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à", callback_data="create_giveaway")

    # –î–æ–±–∞–≤–ª—è–µ–º "–ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏", –µ—Å–ª–∏ –µ—Å—Ç—å –ª—é–±—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏
    if has_any_giveaways:
        keyboard.button(text="üìã –ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏", callback_data="created_giveaways")

    # –î–æ–±–∞–≤–ª—è–µ–º "–ú–æ–∏ —É—á–∞—Å—Ç–∏—è", —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö
    if has_active_participations:
        keyboard.button(text="üéØ –ú–æ–∏ —É—á–∞—Å—Ç–∏—è", callback_data="my_participations")

    keyboard.adjust(1)

    await send_message_with_image(
        bot,
        message.chat.id,
        "<tg-emoji emoji-id='5199885118214255386'>üëã</tg-emoji> –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query(lambda c: c.data == "back_to_main_menu")
async def back_to_main_menu(callback_query: CallbackQuery, state: FSMContext):
    await state.clear()
    await bot.answer_callback_query(callback_query.id)

    user_id = callback_query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª—é–±—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute(
        """
        SELECT COUNT(*) FROM giveaways 
        WHERE user_id = %s
        """,
        (user_id,)
    )
    has_any_giveaways = cursor.fetchone()[0] > 0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    cursor.execute(
        """
        SELECT COUNT(*) FROM giveaways 
        WHERE user_id = %s AND is_active = 'true'
        """,
        (user_id,)
    )
    has_active_giveaways = cursor.fetchone()[0] > 0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É—á–∞—Å—Ç–∏–π –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö
    cursor.execute(
        """
        SELECT COUNT(*) 
        FROM participations p
        JOIN giveaways g ON p.giveaway_id = g.id
        WHERE p.user_id = %s AND g.is_active = 'true'
        """,
        (user_id,)
    )
    has_active_participations = cursor.fetchone()[0] > 0
    logging.info(f"User {user_id} - has_active_participations: {has_active_participations}")

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üéÅ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à", callback_data="create_giveaway")

    # –î–æ–±–∞–≤–ª—è–µ–º "–ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏", –µ—Å–ª–∏ –µ—Å—Ç—å –ª—é–±—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏
    if has_any_giveaways:
        keyboard.button(text="üìã –ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏", callback_data="created_giveaways")

    # –î–æ–±–∞–≤–ª—è–µ–º "–ú–æ–∏ —É—á–∞—Å—Ç–∏—è", —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö
    if has_active_participations:
        keyboard.button(text="üéØ –ú–æ–∏ —É—á–∞—Å—Ç–∏—è", callback_data="my_participations")

    keyboard.adjust(1)

    await send_message_with_image(
        bot,
        callback_query.message.chat.id,
        "<tg-emoji emoji-id='5210956306952758910'>üëÄ</tg-emoji> –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard.as_markup(),
        message_id=callback_query.message.message_id
    )

async def periodic_username_check():
    while True:
        await check_usernames(bot, conn, cursor)
        await asyncio.sleep(60)

async def main():
    check_task = asyncio.create_task(check_and_end_giveaways(bot, conn, cursor))
    username_check_task = asyncio.create_task(periodic_username_check())

    try:
        await dp.start_polling(bot)
    finally:
        check_task.cancel()
        username_check_task.cancel()
        cursor.close()
        conn.close()
        logging.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ.")

if __name__ == '__main__':
    asyncio.run(main())
