from aiogram import Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ChatMemberUpdated, InlineKeyboardMarkup, InlineKeyboardButton, ChatMemberAdministrator
from aiogram.enums import ChatMemberStatus, ChatType
from aiogram.fsm.storage.base import StorageKey
import logging
import aiohttp
import uuid
import boto3
from botocore.client import Config
from datetime import datetime
import io
import asyncio
from utils import send_message_auto
from created_giveaways import build_community_selection_ui

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Yandex Cloud S3 ‚òÅÔ∏è
YANDEX_ACCESS_KEY = 'YCAJEDluWSn-XI0tyGyfwfnVL'
YANDEX_SECRET_KEY = 'YCPkR9H9Ucebg6L6eMGvtfKuFIcO_MK7gyiffY6H'
YANDEX_BUCKET_NAME = 'raffle'
YANDEX_ENDPOINT_URL = 'https://storage.yandexcloud.net'
YANDEX_REGION = 'ru-central1'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è S3 –∫–ª–∏–µ–Ω—Ç–∞ üì¶
s3_client = boto3.client(
    's3',
    region_name=YANDEX_REGION,
    aws_access_key_id=YANDEX_ACCESS_KEY,
    aws_secret_access_key=YANDEX_SECRET_KEY,
    endpoint_url=YANDEX_ENDPOINT_URL,
    config=Config(signature_version='s3v4')
)

class GiveawayStates(StatesGroup):
    binding_communities = State()

pending_channels = {}

async def upload_to_storage(file_content: bytes, filename: str) -> tuple[bool, str]:
    try:
        file_size_mb = len(file_content) / (1024 * 1024)
        if file_size_mb > 5:
            return False, "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5 –ú–ë"

        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        unique_filename = f"{timestamp}_{filename}"
        s3_client.put_object(
            Bucket=YANDEX_BUCKET_NAME,
            Key=unique_filename,
            Body=io.BytesIO(file_content),
            ContentType="image/jpeg",
            ACL='public-read'
        )
        public_url = f"{YANDEX_ENDPOINT_URL}/{YANDEX_BUCKET_NAME}/{unique_filename}"
        logging.info(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {public_url}")
        return True, public_url
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Yandex Cloud: {str(e)}")
        return False, str(e)

def register_new_public(dp: Dispatcher, bot, conn, cursor):
    avatar_file_ids = {}

    async def download_and_save_avatar(chat_id: str, current_url: str = None) -> str | None:
        try:
            chat_info = await bot.get_chat(chat_id)
            if not chat_info.photo:
                if current_url:
                    old_key = current_url.split(f"{YANDEX_ENDPOINT_URL}/{YANDEX_BUCKET_NAME}/")[1]
                    s3_client.delete_object(Bucket=YANDEX_BUCKET_NAME, Key=old_key)
                    logging.info(f"–°—Ç–∞—Ä–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ S3: {old_key}")
                return None

            new_file_id = chat_info.photo.big_file_id
            if chat_id in avatar_file_ids and avatar_file_ids[chat_id] == new_file_id and current_url:
                logging.info(f"–ê–≤–∞—Ç–∞—Ä–∫–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id} –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å (file_id: {new_file_id})")
                return current_url

            file_info = await bot.get_file(new_file_id)
            async with aiohttp.ClientSession() as session:
                url = f"https://api.telegram.org/file/bot{bot.token}/{file_info.file_path}"
                async with session.get(url) as response:
                    if response.status != 200:
                        return None
                    file_content = await response.read()
            file_name = f"{chat_id}_{uuid.uuid4()}.jpg"
            success, public_url = await upload_to_storage(file_content, file_name)
            if success:
                if current_url and current_url != public_url:
                    old_key = current_url.split(f"{YANDEX_ENDPOINT_URL}/{YANDEX_BUCKET_NAME}/")[1]
                    s3_client.delete_object(Bucket=YANDEX_BUCKET_NAME, Key=old_key)
                    logging.info(f"–°—Ç–∞—Ä–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ S3: {old_key}")
                avatar_file_ids[chat_id] = new_file_id
                return public_url
            return None
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {str(e)}")
            return None

    @dp.my_chat_member()
    async def bot_added_to_chat(event: ChatMemberUpdated, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ."""
        chat = event.chat
        user_id = str(event.from_user.id)
        user_id_int = int(user_id)
        new_status = event.new_chat_member.status

        chat_type_display = "–∫–∞–Ω–∞–ª" if chat.type == ChatType.CHANNEL else "–≥—Ä—É–ø–ø–∞"
        chat_type_db = "channel" if chat.type == ChatType.CHANNEL else "group"
        community_name = chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        community_username = chat.username or community_name
        community_id = str(chat.id)

        logging.info(
            f"–°–æ–±—ã—Ç–∏–µ my_chat_member: {chat_type_display} '{community_name}' (ID: {community_id}), —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {new_status}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}"
        )

        # –ï—Å–ª–∏ –±–æ—Ç –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —á–∞—Ç–∞
        if new_status in [ChatMemberStatus.LEFT, ChatMemberStatus.KICKED]:
            logging.info(f"–ë–æ—Ç –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ {chat_type_display} '{community_name}' (ID: {community_id})")
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —ç—Ç–∏–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º
                cursor.execute(
                    "SELECT user_id FROM bound_communities WHERE community_id = %s",
                    (community_id,)
                )
                user_ids = [row[0] for row in cursor.fetchall()]
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å {community_id}: {user_ids}")

                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                cursor.execute(
                    "DELETE FROM bound_communities WHERE community_id = %s",
                    (community_id,)
                )
                cursor.execute(
                    "DELETE FROM giveaway_communities WHERE community_id = %s",
                    (community_id,)
                )
                conn.commit()
                logging.info(f"–ó–∞–ø–∏—Å–∏ –¥–ª—è {community_id} —É–¥–∞–ª–µ–Ω—ã –∏–∑ bound_communities –∏ giveaway_communities")

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–∞–∂–¥–æ–≥–æ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                notification = f"–ë–æ—Ç –±—ã–ª –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ {chat_type_display}–∞ '{community_name}'."
                for uid in user_ids:
                    try:
                        uid_int = int(uid)
                        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        storage_key = StorageKey(
                            bot_id=bot.id, chat_id=uid_int, user_id=uid_int, destiny="default"
                        )
                        user_state = FSMContext(dp.storage, key=storage_key)
                        await user_state.update_data(admin_notification=notification)
                        await update_community_selection_interface(bot, uid_int, user_state)
                        logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid} –æ–± –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ –∏–∑ {community_id}")
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: {str(e)}")

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –¥–ª—è {community_id}: {str(e)}")
                conn.rollback()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞
        try:
            user_member = await bot.get_chat_member(community_id, user_id_int)
            if user_member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]:
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ {chat_type_display} '{community_name}'")
                return
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ {community_id}: {str(e)}")
            return

        # –ï—Å–ª–∏ –±–æ—Ç —Å—Ç–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if new_status == ChatMemberStatus.ADMINISTRATOR:
            try:
                bot_member = await bot.get_chat_member(chat.id, bot.id)
                if not isinstance(bot_member, ChatMemberAdministrator):
                    await send_message_auto(
                        bot, user_id_int,
                        f"–ë–æ—Ç –Ω–µ –ø–æ–ª—É—á–∏–ª –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ {chat_type_display}–µ '{community_name}'.",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="start")]
                        ]),
                        message_id=None
                    )
                    return

                required_permissions = get_required_permissions(chat_type_db)
                missing_permissions = [
                    perm_name for perm, perm_name in required_permissions.items()
                    if not getattr(bot_member, perm, False)
                ]
                if missing_permissions:
                    await send_message_auto(
                        bot, user_id_int,
                        f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ —É –±–æ—Ç–∞ –≤ {chat_type_display}–µ '{community_name}': {', '.join(missing_permissions)}",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="start")]
                        ]),
                        message_id=None
                    )
                    return

                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞
                admins = await bot.get_chat_administrators(community_id)
                admin_ids = [str(admin.user.id) for admin in admins if not admin.user.is_bot]
                logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã {community_id}: {admin_ids}")

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
                cursor.execute(
                    "SELECT media_file_ava FROM bound_communities WHERE community_id = %s AND user_id = %s",
                    (community_id, user_id)
                )
                result = cursor.fetchone()
                current_url = result[0] if result else None
                avatar_url = await download_and_save_avatar(community_id, current_url)

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                for admin_id in admin_ids:
                    admin_id_int = int(admin_id)
                    try:
                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –≤ –±–∞–∑—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                        success = await record_bound_community(
                            admin_id, community_username, community_id, chat_type_db, community_name, avatar_url
                        )
                        if success:
                            logging.info(f"–°–æ–æ–±—â–µ—Å—Ç–≤–æ '{community_name}' –ø—Ä–∏–≤—è–∑–∞–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}")
                            notification = f"{chat_type_display.capitalize()} '{community_name}' —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞—Ç—å –µ–≥–æ –∫ –≤–∞—à–∏–º —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º."
                            # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                            storage_key = StorageKey(
                                bot_id=bot.id, chat_id=admin_id_int, user_id=admin_id_int, destiny="default"
                            )
                            admin_state = FSMContext(dp.storage, key=storage_key)
                            await admin_state.update_data(admin_notification=notification)
                            try:
                                cursor.execute(
                                    """
                                    INSERT INTO user_binding_state (user_id, admin_notification)
                                    VALUES (%s, %s)
                                    ON CONFLICT (user_id)
                                    DO UPDATE SET admin_notification = EXCLUDED.admin_notification,
                                                  updated_at = CURRENT_TIMESTAMP
                                    """,
                                    (admin_id_int, notification)
                                )
                                conn.commit()
                            except Exception as e:
                                logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {admin_id}: {str(e)}")

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                            state_data = await admin_state.get_data()
                            giveaway_id = state_data.get('giveaway_id')
                            message_id = state_data.get('message_id')

                            if giveaway_id:
                                await handle_successful_binding(
                                    community_id, community_username, admin_id, giveaway_id, admin_state,
                                    message_id, chat_type_db, chat_type_display, community_name, avatar_url
                                )
                            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                            await update_community_selection_interface(bot, admin_id_int, admin_state)
                        else:
                            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ '{community_name}' –¥–ª—è {admin_id}")
                            notification = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å {chat_type_display} '{community_name}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                            storage_key = StorageKey(
                                bot_id=bot.id, chat_id=admin_id_int, user_id=admin_id_int, destiny="default"
                            )
                            admin_state = FSMContext(dp.storage, key=storage_key)
                            await admin_state.update_data(admin_notification=notification)
                            await update_community_selection_interface(bot, admin_id_int, admin_state)
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id} –¥–ª—è {community_id}: {str(e)}")

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –¥–ª—è {community_id}: {str(e)}")
                await send_message_auto(
                    bot, user_id_int,
                    f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {chat_type_display}–∞ '{community_name}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="start")]
                    ]),
                    message_id=None
                )

    @dp.chat_member()
    async def user_status_updated(event: ChatMemberUpdated, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ —Å–Ω—è—Ç–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)."""
        chat = event.chat
        user_id = str(event.new_chat_member.user.id)
        user_id_int = int(user_id)
        new_status = event.new_chat_member.status
        old_status = event.old_chat_member.status

        chat_type_display = "–∫–∞–Ω–∞–ª" if chat.type == ChatType.CHANNEL else "–≥—Ä—É–ø–ø–∞"
        chat_type_db = "channel" if chat.type == ChatType.CHANNEL else "group"
        community_name = chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        community_username = chat.username or community_name
        community_id = str(chat.id)

        logging.info(
            f"–°–æ–±—ã—Ç–∏–µ chat_member: {chat_type_display} '{community_name}' (ID: {community_id}), "
            f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}, —Å—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å: {old_status}, –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {new_status}"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if new_status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR] and \
                old_status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞
                bot_member = await bot.get_chat_member(community_id, bot.id)
                if bot_member.status != ChatMemberStatus.ADMINISTRATOR:
                    logging.info(f"–ë–æ—Ç –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ {chat_type_display} '{community_name}', –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–ª—è {user_id}")
                    return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
                required_permissions = get_required_permissions(chat_type_db)
                missing_permissions = [
                    perm_name for perm, perm_name in required_permissions.items()
                    if not getattr(bot_member, perm, False)
                ]
                if missing_permissions:
                    logging.info(
                        f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ —É –±–æ—Ç–∞ –≤ {chat_type_display} '{community_name}': {', '.join(missing_permissions)}")
                    await send_message_auto(
                        bot, user_id_int,
                        f"–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –ø—Ä–∞–≤ –≤ {chat_type_display}–µ '{community_name}': {', '.join(missing_permissions)}. –ù–∞–∑–Ω–∞—á—å—Ç–µ –∏—Ö –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="start")]
                        ]),
                        message_id=None
                    )
                    return

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
                cursor.execute(
                    "SELECT media_file_ava FROM bound_communities WHERE community_id = %s AND user_id = %s",
                    (community_id, user_id)
                )
                result = cursor.fetchone()
                current_url = result[0] if result else None
                avatar_url = await download_and_save_avatar(community_id, current_url)

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –≤ –±–∞–∑—É
                success = await record_bound_community(
                    user_id, community_username, community_id, chat_type_db, community_name, avatar_url
                )
                if success:
                    logging.info(f"–°–æ–æ–±—â–µ—Å—Ç–≤–æ '{community_name}' –ø—Ä–∏–≤—è–∑–∞–Ω–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user_id}")
                    notification = (
                        f"–í—ã —Å—Ç–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ {chat_type_display} '{community_name}'! "
                        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞—Ç—å –µ–≥–æ –∫ –≤–∞—à–∏–º —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º."
                    )
                    await state.update_data(admin_notification=notification)
                    try:
                        cursor.execute(
                            """
                            INSERT INTO user_binding_state (user_id, admin_notification)
                            VALUES (%s, %s)
                            ON CONFLICT (user_id)
                            DO UPDATE SET admin_notification = EXCLUDED.admin_notification,
                                          updated_at = CURRENT_TIMESTAMP
                            """,
                            (user_id_int, notification)
                        )
                        conn.commit()
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {user_id}: {str(e)}")
                    await update_community_selection_interface(bot, user_id_int, state)
                else:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ '{community_name}' –¥–ª—è {user_id}")
                    await send_message_auto(
                        bot, user_id_int,
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å {chat_type_display} '{community_name}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="start")]
                        ]),
                        message_id=None
                    )

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user_id} –≤ {community_id}: {str(e)}")
                await send_message_auto(
                    bot, user_id_int,
                    f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {chat_type_display}–∞ '{community_name}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="start")]
                    ]),
                    message_id=None
                )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ç–µ—Ä—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        elif old_status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR] and \
                new_status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]:
            try:
                logging.info(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ—Ç–µ—Ä—è–ª —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ {chat_type_display} '{community_name}'")
                cursor.execute(
                    "DELETE FROM bound_communities WHERE community_id = %s AND user_id = %s",
                    (community_id, user_id)
                )
                cursor.execute(
                    "DELETE FROM giveaway_communities WHERE community_id = %s AND user_id = %s",
                    (community_id, user_id)
                )
                conn.commit()
                logging.info(f"–ó–∞–ø–∏—Å–∏ –¥–ª—è {community_id} —É–¥–∞–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

                notification = f"–í—ã –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ {chat_type_display} '{community_name}'. –î–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≤ –±–æ—Ç–µ —É–¥–∞–ª—ë–Ω."
                await state.update_data(admin_notification=notification)
                try:
                    cursor.execute(
                        """
                        INSERT INTO user_binding_state (user_id, admin_notification)
                        VALUES (%s, %s)
                        ON CONFLICT (user_id)
                        DO UPDATE SET admin_notification = EXCLUDED.admin_notification,
                                      updated_at = CURRENT_TIMESTAMP
                        """,
                        (user_id_int, notification)
                    )
                    conn.commit()
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {user_id}: {str(e)}")
                await update_community_selection_interface(bot, user_id_int, state)

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–Ω—è—Ç–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user_id} –≤ {community_id}: {str(e)}")
                conn.rollback()
                await send_message_auto(
                    bot, user_id_int,
                    f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {chat_type_display}–∞ '{community_name}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="start")]
                    ]),
                    message_id=None
                )

    async def update_community_selection_interface(bot, user_id: int, state: FSMContext):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–∏–≤—è–∑–∫–∏."""
        state_data = await state.get_data()
        giveaway_id = state_data.get('giveaway_id')
        message_id = state_data.get('message_id')
        notification = state_data.get('admin_notification')

        # –£–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        # –ï—Å–ª–∏ giveaway_id –∏ message_id –Ω–∞–π–¥–µ–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º UI
        if giveaway_id and message_id:
            try:
                bot_info = await bot.get_me()
                message_text, keyboard, image_url = await build_community_selection_ui(
                    user_id, giveaway_id, bot, bot_info, notification=notification
                )
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º send_message_auto –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                await send_message_auto(
                    bot,
                    user_id,
                    message_text,
                    reply_markup=keyboard,
                    message_id=message_id,
                    parse_mode='HTML',
                    image_url=image_url
                )
                logging.info(
                    f"–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, giveaway_id: {giveaway_id}"
                )

                # –û—á–∏—â–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if notification:
                    await state.update_data(admin_notification=None)
                    try:
                        cursor.execute(
                            "UPDATE user_binding_state SET admin_notification = NULL WHERE user_id = %s",
                            (user_id,)
                        )
                        conn.commit()
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–ª—è {user_id}: {str(e)}")

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è {user_id}: {str(e)}")
                # –û—á–∏—â–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                if notification:
                    await state.update_data(admin_notification=None)
                    try:
                        cursor.execute(
                            "UPDATE user_binding_state SET admin_notification = NULL WHERE user_id = %s",
                            (user_id,)
                        )
                        conn.commit()
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–ª—è {user_id}: {str(e)}")
        else:
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–∏–≤—è–∑–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø—Ä–æ–ø—É—â–µ–Ω–æ")
            if notification:
                try:
                    await send_message_auto(
                        bot,
                        user_id,
                        f"<tg-emoji emoji-id='5206607081334906820'>‚úîÔ∏è</tg-emoji> {notification}",
                        reply_markup=None,
                        message_id=None,
                        parse_mode='HTML',
                        image_url='https://storage.yandexcloud.net/raffle/snapi/snapi.jpg'  # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    )
                    await state.update_data(admin_notification=None)
                    try:
                        cursor.execute(
                            "UPDATE user_binding_state SET admin_notification = NULL WHERE user_id = %s",
                            (user_id,)
                        )
                        conn.commit()
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–ª—è {user_id}: {str(e)}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {user_id}: {str(e)}")

    async def handle_successful_binding(community_id: str, community_username: str, user_id: str, giveaway_id: str,
                                        state: FSMContext, message_id: int, chat_type_db: str, chat_type_display: str,
                                        community_name: str, avatar_url: str = None):
        try:
            cursor.execute(
                "SELECT * FROM giveaway_communities WHERE giveaway_id = %s AND community_id = %s AND user_id = %s",
                (giveaway_id, community_id, user_id)
            )
            if cursor.fetchone():
                notification = f"{chat_type_display.capitalize()} '{community_username}' —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω."
                await state.update_data(admin_notification=notification)
                return

            await bind_community_to_giveaway(
                giveaway_id, community_id, community_username, chat_type_db, user_id, community_name, avatar_url
            )
            notification = f"{chat_type_display.capitalize()} '{community_username}' —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!"
            await state.update_data(admin_notification=notification)
            # –£–±—Ä–∞–ª–∏ –≤—ã–∑–æ–≤ update_community_selection_interface, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ bot_added_to_chat –∏–ª–∏ user_status_updated
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ {community_id} –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É {giveaway_id}: {str(e)}")
            conn.rollback()

    async def record_bound_community(user_id: str, community_username: str, community_id: str, community_type: str,
                                     community_name: str, media_file_ava: str = None):
        try:
            data = {
                'user_id': user_id,
                'community_username': community_username,
                'community_id': community_id,
                'community_type': community_type,
                'community_name': community_name
            }
            if media_file_ava:
                data['media_file_ava'] = media_file_ava

            cursor.execute(
                "SELECT * FROM bound_communities WHERE community_id = %s AND user_id = %s",
                (community_id, user_id)
            )
            if cursor.fetchone():
                update_columns = ', '.join([f"{key} = %s" for key in data.keys()])
                cursor.execute(
                    f"UPDATE bound_communities SET {update_columns} WHERE community_id = %s AND user_id = %s",
                    (*data.values(), community_id, user_id)
                )
            else:
                columns = ', '.join(data.keys())
                placeholders = ', '.join(['%s'] * len(data))
                cursor.execute(
                    f"INSERT INTO bound_communities ({columns}) VALUES ({placeholders})",
                    tuple(data.values())
                )
            conn.commit()
            return True
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ bound_communities: {str(e)}")
            conn.rollback()
            return False

    async def bind_community_to_giveaway(giveaway_id, community_id, community_username, community_type, user_id,
                                         community_name, avatar_url=None):
        try:
            data = {
                "giveaway_id": giveaway_id,
                "community_id": community_id,
                "community_username": community_username,
                "community_type": community_type,
                "user_id": user_id,
                "community_name": community_name
            }
            if avatar_url:
                data["media_file_ava"] = avatar_url
            columns = ', '.join(data.keys())
            placeholders = ', '.join(['%s'] * len(data))
            cursor.execute(
                f"INSERT INTO giveaway_communities ({columns}) VALUES ({placeholders})",
                tuple(data.values())
            )
            conn.commit()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É: {str(e)}")
            conn.rollback()

    def get_required_permissions(chat_type: str):
        if chat_type == "channel":
            return {
                'can_post_messages': '–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π',
                'can_edit_messages': '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π',
                'can_invite_users': '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'
            }
        return {
            'can_delete_messages': '–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π',
            'can_invite_users': '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏',
            'can_pin_messages': '–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π'
        }

    async def check_and_update_avatars():
        while True:
            try:
                cursor.execute("SELECT community_id, user_id, media_file_ava FROM bound_communities")
                communities = cursor.fetchall()
                for community_id, user_id, current_url in communities:
                    try:
                        chat_info = await bot.get_chat(community_id)
                        if not chat_info.photo:
                            if current_url:
                                cursor.execute(
                                    "UPDATE bound_communities SET media_file_ava = NULL WHERE community_id = %s AND user_id = %s",
                                    (community_id, user_id)
                                )
                                old_key = current_url.split(f"{YANDEX_ENDPOINT_URL}/{YANDEX_BUCKET_NAME}/")[1]
                                s3_client.delete_object(Bucket=YANDEX_BUCKET_NAME, Key=old_key)
                                logging.info(f"–°—Ç–∞—Ä–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ S3: {old_key}")
                                conn.commit()
                                logging.info(f"–ê–≤–∞—Ç–∞—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ {community_id}")
                            continue

                        new_url = await download_and_save_avatar(community_id, current_url)
                        if new_url and new_url != current_url:
                            cursor.execute(
                                "UPDATE bound_communities SET media_file_ava = %s WHERE community_id = %s AND user_id = %s",
                                (new_url, community_id, user_id)
                            )
                            conn.commit()
                            logging.info(f"–ê–≤–∞—Ç–∞—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ {community_id}: {new_url}")
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ {community_id}: {str(e)}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ check_and_update_avatars: {str(e)}")
            await asyncio.sleep(36000)

    async def check_bot_chats_and_admins():
        while True:
            try:
                cursor.execute("SELECT community_id FROM bound_communities")
                known_chats = set(row[0] for row in cursor.fetchall())
                current_chats = set()

                for chat_id in known_chats:
                    try:
                        chat_member = await bot.get_chat_member(chat_id, bot.id)
                        if chat_member.status not in [ChatMemberStatus.LEFT, ChatMemberStatus.KICKED]:
                            current_chats.add(chat_id)
                            admins = await bot.get_chat_administrators(chat_id)
                            chat_info = await bot.get_chat(chat_id)

                            chat_type_db = "channel" if chat_info.type == ChatType.CHANNEL else "group"
                            community_name = chat_info.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                            community_username = chat_info.username or community_name

                            cursor.execute(
                                "SELECT media_file_ava FROM bound_communities WHERE community_id = %s",
                                (chat_id,)
                            )
                            result = cursor.fetchone()
                            current_url = result[0] if result else None
                            avatar_url = await download_and_save_avatar(chat_id, current_url)

                            for admin in admins:
                                if admin.user.is_bot:
                                    continue
                                admin_id = str(admin.user.id)
                                admin_id_int = int(admin_id)
                                await record_bound_community(
                                    admin_id, community_username, chat_id, chat_type_db, community_name, avatar_url
                                )
                                logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}")
                                storage_key = StorageKey(
                                    bot_id=bot.id, chat_id=admin_id_int, user_id=admin_id_int, destiny="default"
                                )
                                await update_community_selection_interface(
                                    bot, admin_id_int, FSMContext(dp.storage, key=storage_key)
                                )
                        else:
                            cursor.execute("DELETE FROM bound_communities WHERE community_id = %s", (chat_id,))
                            cursor.execute("DELETE FROM giveaway_communities WHERE community_id = %s", (chat_id,))
                            conn.commit()
                            logging.info(f"–ë–æ—Ç –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —á–∞—Ç–∞ {chat_id}, –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã")
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∞—Ç–∞ {chat_id}: {str(e)}")
                        cursor.execute("DELETE FROM bound_communities WHERE community_id = %s", (chat_id,))
                        cursor.execute("DELETE FROM giveaway_communities WHERE community_id = %s", (chat_id,))
                        conn.commit()

                logging.info(f"–¢–µ–∫—É—â–∏–µ —á–∞—Ç—ã –±–æ—Ç–∞: {current_chats}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ check_bot_chats_and_admins: {str(e)}")
            await asyncio.sleep(3600)

    @dp.startup()
    async def on_startup():
        logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, —Å—Ç–∞—Ä—Ç—É–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏")
        asyncio.create_task(check_and_update_avatars())
        asyncio.create_task(check_bot_chats_and_admins())
