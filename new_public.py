from aiogram import Dispatcher, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ChatMemberUpdated, InlineKeyboardMarkup, InlineKeyboardButton, ChatMemberAdministrator
from aiogram.enums import ChatMemberStatus, ChatType
import logging
import aiohttp
import uuid
import boto3
from botocore.client import Config
from datetime import datetime
import io
import asyncio
from utils import send_message_with_image

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Yandex Cloud S3 ‚òÅÔ∏è
YANDEX_ACCESS_KEY = 'YCAJEDluWSn-XI0tyGyfwfnVL'
YANDEX_SECRET_KEY = 'YCPkR9H9Ucebg6L6eMGvtfKuFIcO_MK7gyiffY6H'
YANDEX_BUCKET_NAME = 'raffle'
YANDEX_ENDPOINT_URL = 'https://storage.yandexcloud.net'
YANDEX_REGION = 'ru-central1'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è S3 –∫–ª–∏–µ–Ω—Ç–∞ üì¶
s3_client = boto3.client(
    's3',
    region_name=YANDEX_REGION,
    aws_access_key_id=YANDEX_ACCESS_KEY,
    aws_secret_access_key=YANDEX_SECRET_KEY,
    endpoint_url=YANDEX_ENDPOINT_URL,
    config=Config(signature_version='s3v4')
)

class GiveawayStates(StatesGroup):
    binding_communities = State()

pending_channels = {}

async def upload_to_storage(file_content: bytes, filename: str) -> tuple[bool, str]:
    try:
        file_size_mb = len(file_content) / (1024 * 1024)
        if file_size_mb > 5:
            return False, "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5 –ú–ë"

        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        unique_filename = f"{timestamp}_{filename}"
        s3_client.put_object(
            Bucket=YANDEX_BUCKET_NAME,
            Key=unique_filename,
            Body=io.BytesIO(file_content),
            ContentType="image/jpeg",
            ACL='public-read'
        )
        public_url = f"{YANDEX_ENDPOINT_URL}/{YANDEX_BUCKET_NAME}/{unique_filename}"
        logging.info(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {public_url}")
        return True, public_url
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Yandex Cloud: {str(e)}")
        return False, str(e)

def register_new_public(dp: Dispatcher, bot, conn, cursor):
    # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ file_id –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–Ω—É—Ç—Ä–∏ —Å–µ—Å—Å–∏–∏
    avatar_file_ids = {}

    async def download_and_save_avatar(chat_id: str, current_url: str = None) -> str | None:
        try:
            chat_info = await bot.get_chat(chat_id)
            if not chat_info.photo:
                return None

            new_file_id = chat_info.photo.big_file_id
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ file_id –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
            if chat_id in avatar_file_ids and avatar_file_ids[chat_id] == new_file_id and current_url:
                logging.info(f"–ê–≤–∞—Ç–∞—Ä–∫–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id} –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å (file_id: {new_file_id})")
                return current_url  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–π URL, –µ—Å–ª–∏ –∞–≤–∞—Ç–∞—Ä–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å

            file_info = await bot.get_file(new_file_id)
            async with aiohttp.ClientSession() as session:
                url = f"https://api.telegram.org/file/bot{bot.token}/{file_info.file_path}"
                async with session.get(url) as response:
                    if response.status != 200:
                        return None
                    file_content = await response.read()
            file_name = f"{chat_id}_{uuid.uuid4()}.jpg"
            success, public_url = await upload_to_storage(file_content, file_name)
            if success:
                avatar_file_ids[chat_id] = new_file_id  # –û–±–Ω–æ–≤–ª—è–µ–º file_id –≤ –ø–∞–º—è—Ç–∏
                return public_url
            return None
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {str(e)}")
            return None

    @dp.callback_query(lambda c: c.data.startswith('bind_new_community:'))
    async def process_bind_new_community(callback_query: types.CallbackQuery, state: FSMContext):
        giveaway_id = callback_query.data.split(':')[1]
        user_id = str(callback_query.from_user.id)
        message_id = callback_query.message.message_id

        await bot.answer_callback_query(callback_query.id)
        await state.set_state(GiveawayStates.binding_communities)
        await state.update_data(giveaway_id=giveaway_id, message_id=message_id)
        pending_channels[user_id] = {'giveaway_id': giveaway_id, 'message_id': message_id}

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"bind_communities:{giveaway_id}")]])
        bot_info = await bot.get_me()
        html_message = f"""
–ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –ø–∞–±–ª–∏–∫/–∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É:  
1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ <code>@{bot_info.username}</code> –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.  
2. –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.  
3. –ù–µ –º–µ–Ω—è–π—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏.  
–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–∞—Ä—É–∂–∏—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ.
"""
        await send_message_with_image(bot, int(user_id), html_message, reply_markup=keyboard, message_id=message_id)

    @dp.my_chat_member()
    async def bot_added_to_chat(event: ChatMemberUpdated, state: FSMContext):
        chat = event.chat
        user_id = str(event.from_user.id)
        new_status = event.new_chat_member.status

        chat_type_display = "–∫–∞–Ω–∞–ª" if chat.type == ChatType.CHANNEL else "–≥—Ä—É–ø–ø–∞"
        chat_type_db = "channel" if chat.type == ChatType.CHANNEL else "group"
        community_name = chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        community_username = chat.username or community_name
        community_id = str(chat.id)

        logging.info(
            f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ {chat_type_display} '{community_name}' (ID: {community_id}), —Å—Ç–∞—Ç—É—Å: {new_status}")

        if new_status == ChatMemberStatus.LEFT:
            logging.info(f"–ë–æ—Ç –ø–æ–∫–∏–Ω—É–ª {chat_type_display} '{community_name}' (ID: {community_id}). –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º.")
            return

        if new_status != ChatMemberStatus.ADMINISTRATOR:
            try:
                await bot.get_chat(community_id)
            except Exception as e:
                logging.warning(f"–ß–∞—Ç {community_id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}")
                cursor.execute("DELETE FROM bound_communities WHERE community_id = %s AND user_id = %s",
                               (community_id, user_id))
                cursor.execute("DELETE FROM giveaway_communities WHERE community_id = %s AND user_id = %s",
                               (community_id, user_id))
                conn.commit()
                return

        if new_status == ChatMemberStatus.ADMINISTRATOR:
            try:
                bot_member = await bot.get_chat_member(chat.id, bot.id)
                if isinstance(bot_member, ChatMemberAdministrator):
                    required_permissions = get_required_permissions(chat_type_db)
                    missing_permissions = [perm_name for perm, perm_name in required_permissions.items() if
                                           not getattr(bot_member, perm, False)]
                    if not missing_permissions:
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π URL –∏–∑ –±–∞–∑—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                        cursor.execute(
                            "SELECT media_file_ava FROM bound_communities WHERE community_id = %s AND user_id = %s",
                            (community_id, user_id))
                        result = cursor.fetchone()
                        current_url = result[0] if result else None
                        avatar_url = await download_and_save_avatar(community_id, current_url)
                        success = await record_bound_community(user_id, community_username, community_id, chat_type_db,
                                                               community_name, avatar_url)
                        logging.info(
                            f"–§–æ–Ω–æ–≤–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ {'—É—Å–ø–µ—à–Ω–∞' if success else '–Ω–µ —É–¥–∞–ª–∞—Å—å'} –¥–ª—è {community_username}")
            except Exception as e:
                logging.warning(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —á–∞—Ç–∞ {community_id}: {str(e)}. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º, —á—Ç–æ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
                cursor.execute("SELECT media_file_ava FROM bound_communities WHERE community_id = %s AND user_id = %s",
                               (community_id, user_id))
                result = cursor.fetchone()
                current_url = result[0] if result else None
                avatar_url = await download_and_save_avatar(community_id, current_url)
                success = await record_bound_community(user_id, community_username, community_id, chat_type_db,
                                                       community_name, avatar_url)
                logging.info(
                    f"–§–æ–Ω–æ–≤–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ {'—É—Å–ø–µ—à–Ω–∞' if success else '–Ω–µ —É–¥–∞–ª–∞—Å—å'} –¥–ª—è {community_username} (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤)")

        state_data = await state.get_data()
        pending_data = pending_channels.get(user_id, {})
        giveaway_id = state_data.get('giveaway_id') or pending_data.get('giveaway_id')
        message_id = state_data.get('message_id') or pending_data.get('message_id')

        if not giveaway_id:
            return

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"bind_communities:{giveaway_id}")]])

        if new_status == ChatMemberStatus.ADMINISTRATOR:
            try:
                bot_member = await bot.get_chat_member(chat.id, bot.id)
                if not isinstance(bot_member, ChatMemberAdministrator):
                    await send_message_with_image(bot, int(user_id),
                                                  f"–ë–æ—Ç –Ω–µ –ø–æ–ª—É—á–∏–ª –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ {chat_type_display}–µ '{community_name}'.",
                                                  reply_markup=keyboard, message_id=message_id)
                    return

                required_permissions = get_required_permissions(chat_type_db)
                missing_permissions = [perm_name for perm, perm_name in required_permissions.items() if
                                       not getattr(bot_member, perm, False)]
                if missing_permissions:
                    await send_message_with_image(bot, int(user_id),
                                                  f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –≤ {chat_type_display}–µ '{community_name}': {', '.join(missing_permissions)}",
                                                  reply_markup=keyboard, message_id=message_id)
                    return

                cursor.execute("SELECT media_file_ava FROM bound_communities WHERE community_id = %s AND user_id = %s",
                               (community_id, user_id))
                result = cursor.fetchone()
                current_url = result[0] if result else None
                avatar_url = await download_and_save_avatar(community_id, current_url)
                await handle_successful_binding(community_id, community_username, user_id, giveaway_id, state,
                                                message_id, chat_type_db, chat_type_display, community_name, avatar_url)
            except Exception as e:
                logging.warning(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —á–∞—Ç–∞ {community_id}: {str(e)}. –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —É—Å–ø–µ—Ö.")
                cursor.execute("SELECT media_file_ava FROM bound_communities WHERE community_id = %s AND user_id = %s",
                               (community_id, user_id))
                result = cursor.fetchone()
                current_url = result[0] if result else None
                avatar_url = await download_and_save_avatar(community_id, current_url)
                await handle_successful_binding(community_id, community_username, user_id, giveaway_id, state,
                                                message_id, chat_type_db, chat_type_display, community_name, avatar_url)

            if user_id in pending_channels:
                del pending_channels[user_id]

        elif new_status == ChatMemberStatus.MEMBER:
            await send_message_with_image(bot, int(user_id),
                                          f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫ –≤ {chat_type_display} '{community_name}'. –ù–∞–∑–Ω–∞—á—å—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                                          reply_markup=keyboard, message_id=message_id)

    async def handle_successful_binding(community_id: str, community_username: str, user_id: str, giveaway_id: str,
                                        state: FSMContext, message_id: int, chat_type_db: str, chat_type_display: str,
                                        community_name: str, avatar_url: str = None):
        cursor.execute(
            "SELECT * FROM giveaway_communities WHERE giveaway_id = %s AND community_id = %s AND user_id = %s",
            (giveaway_id, community_id, user_id))
        if cursor.fetchone():
            await send_message_with_image(bot, int(user_id),
                                          f"{chat_type_display.capitalize()} '{community_username}' —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω.",
                                          reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(
                                              text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"bind_communities:{giveaway_id}")]]),
                                          message_id=message_id)
            return

        await bind_community_to_giveaway(giveaway_id, community_id, community_username, chat_type_db, user_id,
                                         community_name, avatar_url)
        await send_message_with_image(bot, int(user_id),
                                      f"{chat_type_display.capitalize()} '{community_username}' —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!",
                                      reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(
                                          text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"bind_communities:{giveaway_id}")]]),
                                      message_id=message_id)
        await state.clear()

    async def record_bound_community(user_id: str, community_username: str, community_id: str, community_type: str,
                                     community_name: str, media_file_ava: str = None):
        try:
            data = {'user_id': user_id, 'community_username': community_username, 'community_id': community_id,
                    'community_type': community_type, 'community_name': community_name}
            if media_file_ava:
                data['media_file_ava'] = media_file_ava

            cursor.execute("SELECT * FROM bound_communities WHERE community_id = %s AND user_id = %s",
                           (community_id, user_id))
            if cursor.fetchone():
                update_columns = ', '.join([f"{key} = %s" for key in data.keys()])
                cursor.execute(
                    f"UPDATE bound_communities SET {update_columns} WHERE community_id = %s AND user_id = %s",
                    (*data.values(), community_id, user_id))
            else:
                columns = ', '.join(data.keys())
                placeholders = ', '.join(['%s'] * len(data))
                cursor.execute(f"INSERT INTO bound_communities ({columns}) VALUES ({placeholders})",
                               tuple(data.values()))
            conn.commit()
            return True
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ bound_communities: {str(e)}")
            conn.rollback()
            return False

    async def bind_community_to_giveaway(giveaway_id, community_id, community_username, community_type, user_id,
                                         community_name, avatar_url=None):
        data = {"giveaway_id": giveaway_id, "community_id": community_id, "community_username": community_username,
                "community_type": community_type, "user_id": user_id, "community_name": community_name}
        if avatar_url:
            data["media_file_ava"] = avatar_url
        columns = ', '.join(data.keys())
        placeholders = ', '.join(['%s'] * len(data))
        cursor.execute(f"INSERT INTO giveaway_communities ({columns}) VALUES ({placeholders})", tuple(data.values()))
        conn.commit()

    def get_required_permissions(chat_type: str):
        if chat_type == "channel":
            return {'can_post_messages': '–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π', 'can_edit_messages': '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π',
                    'can_invite_users': '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'}
        return {'can_delete_messages': '–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π', 'can_invite_users': '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏',
                'can_pin_messages': '–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π'}

    async def check_and_update_avatars():
        while True:
            try:
                cursor.execute("SELECT community_id, user_id, media_file_ava FROM bound_communities")
                communities = cursor.fetchall()
                for community_id, user_id, current_url in communities:
                    try:
                        chat_info = await bot.get_chat(community_id)
                        if not chat_info.photo:
                            if current_url:  # –ï—Å–ª–∏ –∞–≤–∞—Ç–∞—Ä–∫–∞ –±—ã–ª–∞, –∞ —Ç–µ–ø–µ—Ä—å —É–¥–∞–ª–µ–Ω–∞
                                cursor.execute(
                                    "UPDATE bound_communities SET media_file_ava = NULL WHERE community_id = %s AND user_id = %s",
                                    (community_id, user_id))
                                conn.commit()
                                logging.info(f"–ê–≤–∞—Ç–∞—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ {community_id}")
                            continue

                        new_url = await download_and_save_avatar(community_id, current_url)
                        if new_url and new_url != current_url:  # –ï—Å–ª–∏ –∞–≤–∞—Ç–∞—Ä–∫–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
                            cursor.execute(
                                "UPDATE bound_communities SET media_file_ava = %s WHERE community_id = %s AND user_id = %s",
                                (new_url, community_id, user_id))
                            conn.commit()
                            logging.info(f"–ê–≤–∞—Ç–∞—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ {community_id}: {new_url}")
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ {community_id}: {str(e)}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ check_and_update_avatars: {str(e)}")
            await asyncio.sleep(36000)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    @dp.startup()
    async def on_startup():
        logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, —Å—Ç–∞—Ä—Ç—É–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤–∞—Ç–∞—Ä–æ–∫")
        asyncio.create_task(check_and_update_avatars())
