from aiogram import Bot, Dispatcher, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import ChatMemberUpdatedFilter, IS_MEMBER
from aiogram.types import ChatMemberUpdated, InlineKeyboardMarkup, InlineKeyboardButton, ChatMemberAdministrator
from utils import send_message_with_image
from aiogram.enums import ChatMemberStatus, ChatType
import logging
import aiohttp
import uuid
import boto3
from botocore.client import Config
from datetime import datetime
import requests
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

BOT_TOKEN = '7412394623:AAEkxMj-WqKVpPfduaY8L88YO1I_7zUIsQg'

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Yandex Cloud S3 ‚òÅÔ∏è
YANDEX_ACCESS_KEY = 'YCAJEDluWSn-XI0tyGyfwfnVL'
YANDEX_SECRET_KEY = 'YCPkR9H9Ucebg6L6eMGvtfKuFIcO_MK7gyiffY6H'
YANDEX_BUCKET_NAME = 'raffle'
YANDEX_ENDPOINT_URL = 'https://storage.yandexcloud.net'
YANDEX_REGION = 'ru-central1'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è S3 –∫–ª–∏–µ–Ω—Ç–∞ üì¶
s3_client = boto3.client(
    's3',
    region_name=YANDEX_REGION,
    aws_access_key_id=YANDEX_ACCESS_KEY,
    aws_secret_access_key=YANDEX_SECRET_KEY,
    endpoint_url=YANDEX_ENDPOINT_URL,
    config=Config(signature_version='s3v4')
)

class GiveawayStates(StatesGroup):
    binding_communities = State()
    binding_partner_communities = State()

pending_channels = {}

async def upload_to_storage(file_content: bytes, filename: str) -> tuple[bool, str]:
    try:
        file_size_mb = len(file_content) / (1024 * 1024)
        logging.info(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size_mb} –ú–ë")
        if file_size_mb > 5:
            return False, "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5 –ú–ë"

        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        unique_filename = f"{timestamp}_{filename}"
        logging.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞: {unique_filename}")

        try:
            s3_client.head_bucket(Bucket=YANDEX_BUCKET_NAME)
            logging.info(f"–ë–∞–∫–µ—Ç {YANDEX_BUCKET_NAME} –¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as bucket_error:
            logging.warning(f"–ë–∞–∫–µ—Ç {YANDEX_BUCKET_NAME} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(bucket_error)}")
            try:
                s3_client.create_bucket(
                    Bucket=YANDEX_BUCKET_NAME,
                    CreateBucketConfiguration={'LocationConstraint': YANDEX_REGION}
                )
                logging.info(f"–ë–∞–∫–µ—Ç {YANDEX_BUCKET_NAME} —Å–æ–∑–¥–∞–Ω")
            except Exception as create_error:
                logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∫–µ—Ç–∞: {str(create_error)}")
                raise Exception(f"Cannot access or create bucket: {str(create_error)}")

        try:
            s3_client.put_object(
                Bucket=YANDEX_BUCKET_NAME,
                Key=unique_filename,
                Body=io.BytesIO(file_content),
                ContentType="image/jpeg",
                ACL='public-read'
            )
            logging.info(f"–§–∞–π–ª {unique_filename} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Yandex Cloud –Ω–∞–ø—Ä—è–º—É—é")
        except Exception as s3_error:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–π –∑–∞–≥—Ä—É–∑–∫–∏: {str(s3_error)}")
            presigned_url = s3_client.generate_presigned_url(
                'put_object',
                Params={'Bucket': YANDEX_BUCKET_NAME, 'Key': unique_filename, 'ContentType': 'image/jpeg'},
                ExpiresIn=3600
            )
            headers = {'Content-Type': 'image/jpeg'}
            response = requests.put(presigned_url, data=file_content, headers=headers)

            if response.status_code != 200:
                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ presigned URL: {response.status_code}")
                return False, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ presigned URL: {response.status_code}"

            logging.info(f"–§–∞–π–ª {unique_filename} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ presigned URL")

        public_url = f"{YANDEX_ENDPOINT_URL}/{YANDEX_BUCKET_NAME}/{unique_filename}"
        logging.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω URL: {public_url}")
        return True, public_url

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Yandex Cloud: {str(e)}")
        return False, str(e)

def register_new_public(dp: Dispatcher, bot: Bot, conn, cursor):
    @dp.callback_query(lambda c: c.data.startswith('bind_new_community:'))
    async def process_bind_new_community(callback_query: types.CallbackQuery, state: FSMContext):
        giveaway_id = callback_query.data.split(':')[1]
        user_id = callback_query.from_user.id
        message_id = callback_query.message.message_id

        await state.set_state(GiveawayStates.binding_communities)
        await state.update_data(giveaway_id=giveaway_id, message_id=message_id)
        pending_channels[user_id] = {
            'giveaway_id': giveaway_id,
            'message_id': message_id
        }

        await bot.answer_callback_query(callback_query.id)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"bind_communities:{giveaway_id}")]
        ])

        bot_info = await bot.get_me()
        name_public = f"@{bot_info.username}"
        html_message = f"""
–ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –ø–∞–±–ª–∏–∫/–∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É:  

1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ <code>{name_public}</code> –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.  
2. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ: –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø–∞–±–ª–∏–∫–∞/–∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã.  
3. –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –Ω–µ –º–µ–Ω—è–π—Ç–µ –ø—Ä–∞–≤–∞ ‚Äî –æ–Ω–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.  

–ë–æ—Ç —Å–∞–º –æ–±–Ω–∞—Ä—É–∂–∏—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–∏–≤—è–∂–µ—Ç –µ–≥–æ. –ú–æ–∂–Ω–æ –∑–∞—Ä–∞–Ω–µ–µ –¥–æ–±–∞–≤–ª—è—Ç—å –±–æ—Ç–∞ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞–±–ª–∏–∫–æ–≤, –∞ –∑–∞—Ç–µ–º –ø—Ä–∏–≤—è–∑–∞—Ç—å –∏—Ö.
"""
        await send_message_with_image(
            bot,
            user_id,
            html_message,
            reply_markup=keyboard,
            parse_mode='HTML',
            message_id=message_id
        )

    async def download_and_save_avatar(chat_id):
        try:
            logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            chat_info = await bot.get_chat(chat_id)
            if not chat_info.photo:
                logging.info(f"–£ —á–∞—Ç–∞ {chat_id} –Ω–µ—Ç —Ñ–æ—Ç–æ")
                return None

            file_id = chat_info.photo.big_file_id
            logging.info(f"–ü–æ–ª—É—á–µ–Ω file_id –∞–≤–∞—Ç–∞—Ä–∞: {file_id}")
            file_info = await bot.get_file(file_id)
            file_path = file_info.file_path
            logging.info(f"–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {file_path}")

            async with aiohttp.ClientSession() as session:
                url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_path}"
                logging.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ —Å URL: {url}")
                async with session.get(url) as response:
                    if response.status != 200:
                        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞, —Å—Ç–∞—Ç—É—Å: {response.status}")
                        return None
                    file_content = await response.read()
                    logging.info(f"–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω, —Ä–∞–∑–º–µ—Ä: {len(file_content)} –±–∞–π—Ç")

            file_name = f"{chat_id}_{uuid.uuid4()}.jpg"
            success, public_url = await upload_to_storage(file_content, file_name)
            if success:
                logging.info(f"–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Yandex Cloud: {public_url}")
                return public_url
            else:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞ –≤ Yandex Cloud: {public_url}")
                return None

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ download_and_save_avatar –¥–ª—è —á–∞—Ç–∞ {chat_id}: {str(e)}")
            return None

    @dp.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=IS_MEMBER))
    async def bot_added_as_admin(event: ChatMemberUpdated, state: FSMContext):
        chat = event.chat
        user_id = event.from_user.id

        chat_type_display = "–∫–∞–Ω–∞–ª" if chat.type == ChatType.CHANNEL else "–≥—Ä—É–ø–ø–∞"
        chat_type_db = "channel" if chat.type == ChatType.CHANNEL else "group"
        community_name = chat.title
        community_username = chat.username if chat.username else community_name
        community_id = str(chat.id)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞—Ä–∞–Ω–µ–µ
        required_permissions = get_required_permissions(chat_type_db)
        missing_permissions = []

        # –§–æ–Ω–æ–≤–∞—è –ø—Ä–∏–≤—è–∑–∫–∞: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –≤ bound_communities –≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ –±–æ—Ç —Å—Ç–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if event.new_chat_member.status == ChatMemberStatus.ADMINISTRATOR:
            bot_member = await bot.get_chat_member(chat.id, bot.id)
            if isinstance(bot_member, ChatMemberAdministrator):
                missing_permissions = [
                    perm_name for perm, perm_name in required_permissions.items()
                    if not getattr(bot_member, perm, False)
                ]

                if not missing_permissions:  # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∞ –µ—Å—Ç—å
                    avatar_url = await download_and_save_avatar(chat.id)
                    success = await record_bound_community(
                        user_id, community_username, community_id, chat_type_db, community_name, avatar_url
                    )
                    if success:
                        logging.info(
                            f"–°–æ–æ–±—â–µ—Å—Ç–≤–æ {community_username} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ bound_communities –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
                    else:
                        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ {community_username} –≤ bound_communities")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É
        state_data = await state.get_data()
        pending_data = pending_channels.get(user_id, {})
        giveaway_id = state_data.get('giveaway_id') or pending_data.get('giveaway_id')
        message_id = state_data.get('message_id') or pending_data.get('message_id')

        if not giveaway_id:  # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏–≤—è–∑–∫–∏, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
            return  # –£–±—Ä–∞–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–≤—è–∑–∫–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"bind_communities:{giveaway_id}")]
        ])

        if event.new_chat_member.status == ChatMemberStatus.ADMINISTRATOR:
            bot_member = await bot.get_chat_member(chat.id, bot.id)
            if not isinstance(bot_member, ChatMemberAdministrator):
                await send_message_with_image(
                    bot, user_id,
                    f"–ë–æ—Ç –Ω–µ –ø–æ–ª—É—á–∏–ª –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ {chat_type_display}–µ \"{community_name}\".",
                    reply_markup=keyboard,
                    message_id=message_id
                )
                return

            missing_permissions = [
                perm_name for perm, perm_name in required_permissions.items()
                if not getattr(bot_member, perm, False)
            ]

            if missing_permissions:
                missing_perms_str = ', '.join(missing_permissions)
                await send_message_with_image(
                    bot, user_id,
                    f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –±–æ—Ç–∞ –≤ {chat_type_display}–µ \"{community_name}\". –¢—Ä–µ–±—É—é—Ç—Å—è: {missing_perms_str}",
                    reply_markup=keyboard,
                    message_id=message_id
                )
                return

            # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∞ –µ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∞–≤–∞—Ç–∞—Ä –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω–æ–≤–æ
            avatar_url = await download_and_save_avatar(chat.id)
            logging.info(f"–ü–æ–ª—É—á–µ–Ω URL –∞–≤–∞—Ç–∞—Ä–∞: {avatar_url}")
            await handle_successful_binding(
                chat.id, community_username, user_id, giveaway_id,
                state, message_id, chat_type_db, chat_type_display, community_name, avatar_url
            )
            if user_id in pending_channels:
                del pending_channels[user_id]

        elif event.new_chat_member.status == ChatMemberStatus.MEMBER:
            await send_message_with_image(
                bot, user_id,
                f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫ –≤ {chat_type_display} \"{community_name}\". –ù–∞–∑–Ω–∞—á—å—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å –ø–æ–ª–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏.",
                reply_markup=keyboard,
                message_id=message_id
            )

    async def handle_successful_binding(channel_id: int, community_username: str, user_id: int, giveaway_id: str,
                                        state: FSMContext, message_id: int, chat_type_db: str, chat_type_display: str,
                                        community_name: str, avatar_url: str = None):
        try:
            cursor.execute(
                """
                SELECT * FROM giveaway_communities 
                WHERE giveaway_id = %s AND community_id = %s AND user_id = %s
                """,
                (giveaway_id, str(channel_id), user_id)
            )
            existing = cursor.fetchone()

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"bind_communities:{giveaway_id}")]
            ])

            if existing:
                await send_message_with_image(
                    bot, user_id,
                    f"{chat_type_display.capitalize()} \"{community_username}\" —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —ç—Ç–æ–º—É —Ä–æ–∑—ã–≥—Ä—ã—à—É.",
                    reply_markup=keyboard,
                    message_id=message_id
                )
                return

            logging.info(f"–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ —Å –∞–≤–∞—Ç–∞—Ä–æ–º: {avatar_url}")
            await bind_community_to_giveaway(giveaway_id, str(channel_id), community_username, chat_type_db, user_id,
                                             community_name, avatar_url)
            # –°–æ–æ–±—â–µ—Å—Ç–≤–æ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ bound_communities –Ω–∞ —Ñ–æ–Ω–µ, –ø–æ—ç—Ç–æ–º—É –∑–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤—è–∑–∫–∞ –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"bind_communities:{giveaway_id}")]
            ])

            await send_message_with_image(
                bot, user_id,
                f"{chat_type_display.capitalize()} \"{community_username}\" —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É!",
                reply_markup=keyboard,
                message_id=message_id
            )
            await state.clear()

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_successful_binding: {str(e)}")
            await send_message_with_image(
                bot, user_id,
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ {chat_type_display}–∞ \"{community_username}\". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                message_id=message_id
            )

    async def record_bound_community(user_id: int, community_username: str, community_id: str, community_type: str,
                                     community_name: str, media_file_ava: str = None):
        try:
            cursor.execute(
                """
                SELECT * FROM bound_communities 
                WHERE community_id = %s AND user_id = %s
                """,
                (community_id, user_id)
            )
            existing = cursor.fetchone()

            data = {
                'user_id': user_id,
                'community_username': community_username,
                'community_id': community_id,
                'community_type': community_type,
                'community_name': community_name
            }
            if media_file_ava:
                data['media_file_ava'] = media_file_ava
                logging.info(f"–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ bound_communities —Å –∞–≤–∞—Ç–∞—Ä–æ–º: {media_file_ava}")
            else:
                logging.info("–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ bound_communities –±–µ–∑ –∞–≤–∞—Ç–∞—Ä–∞")

            if existing:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                update_columns = ', '.join([f"{key} = %s" for key in data.keys()])
                cursor.execute(
                    f"""
                    UPDATE bound_communities 
                    SET {update_columns}
                    WHERE community_id = %s AND user_id = %s
                    """,
                    (*data.values(), community_id, user_id)
                )
            else:
                # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                columns = ', '.join(data.keys())
                placeholders = ', '.join(['%s'] * len(data))
                cursor.execute(
                    f"""
                    INSERT INTO bound_communities ({columns})
                    VALUES ({placeholders})
                    """,
                    tuple(data.values())
                )
            conn.commit()
            return True
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞: {str(e)}")
            conn.rollback()
            return False

    async def bind_community_to_giveaway(giveaway_id, community_id, community_username, community_type, user_id,
                                         community_name, avatar_url=None):
        data = {
            "giveaway_id": giveaway_id,
            "community_id": community_id,
            "community_username": community_username,
            "community_type": community_type,
            "user_id": user_id,
            "community_name": community_name
        }
        if avatar_url:
            data["media_file_ava"] = avatar_url
            logging.info(f"–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ giveaway_communities —Å –∞–≤–∞—Ç–∞—Ä–æ–º: {avatar_url}")
        else:
            logging.info("–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ giveaway_communities –±–µ–∑ –∞–≤–∞—Ç–∞—Ä–∞")

        try:
            columns = ', '.join(data.keys())
            placeholders = ', '.join(['%s'] * len(data))
            cursor.execute(
                f"""
                INSERT INTO giveaway_communities ({columns})
                VALUES ({placeholders})
                """,
                tuple(data.values())
            )
            conn.commit()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞: {str(e)}")
            if "community_type" in str(e):
                del data["community_type"]
                columns = ', '.join(data.keys())
                placeholders = ', '.join(['%s'] * len(data))
                cursor.execute(
                    f"""
                    INSERT INTO giveaway_communities ({columns})
                    VALUES ({placeholders})
                    """,
                    tuple(data.values())
                )
                conn.commit()
            else:
                conn.rollback()
                raise e

    def get_required_permissions(chat_type: str):
        if chat_type == "channel":
            return {
                'can_post_messages': '–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π',
                'can_edit_messages': '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π',
                'can_invite_users': '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'
            }
        else:  # group
            return {
                'can_delete_messages': '–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π',
                'can_invite_users': '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏',
                'can_pin_messages': '–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π',
                'can_manage_video_chats': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ —á–∞—Ç–∞–º–∏'
            }
