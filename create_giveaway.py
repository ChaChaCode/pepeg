from aiogram import Dispatcher, Bot, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from supabase import create_client, Client
from datetime import datetime
import pytz
from utils import send_message_with_image
import logging
import boto3
from botocore.client import Config
import io
import requests
from urllib.parse import urlparse
import aiogram.exceptions
from datetime import timedelta  # Ensure this is imported at the top
from aiogram.types import InputMediaPhoto, InputMediaAnimation, InputMediaVideo  # Add these imports

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è üìù
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase üóÑÔ∏è
supabase_url = 'https://olbnxtiigxqcpailyecq.supabase.co'
supabase_key = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9sYm54dGlpZ3hxY3BhaWx5ZWNxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzAxMjQwNzksImV4cCI6MjA0NTcwMDA3OX0.dki8TuMUhhFCoUVpHrcJo4V1ngKEnNotpLtZfRjsePY'
supabase: Client = create_client(supabase_url, supabase_key)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Yandex Cloud S3 ‚òÅÔ∏è
YANDEX_ACCESS_KEY = 'YCAJEDluWSn-XI0tyGyfwfnVL'
YANDEX_SECRET_KEY = 'YCPkR9H9Ucebg6L6eMGvtfKuFIcO_MK7gyiffY6H'
YANDEX_BUCKET_NAME = 'raffle'
YANDEX_ENDPOINT_URL = 'https://storage.yandexcloud.net'
YANDEX_REGION = 'ru-central1'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è S3 –∫–ª–∏–µ–Ω—Ç–∞ üì¶
s3_client = boto3.client(
    's3',
    region_name=YANDEX_REGION,
    aws_access_key_id=YANDEX_ACCESS_KEY,
    aws_secret_access_key=YANDEX_SECRET_KEY,
    endpoint_url=YANDEX_ENDPOINT_URL,
    config=Config(signature_version='s3v4')
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚öôÔ∏è
MAX_NAME_LENGTH = 100
MAX_DESCRIPTION_LENGTH = 2500
MAX_MEDIA_SIZE_MB = 5
MAX_WINNERS = 50

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM üéõÔ∏è
class GiveawayStates(StatesGroup):
    waiting_for_name = State()          # ‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ
    waiting_for_description = State()   # üìú –û–ø–∏—Å–∞–Ω–∏–µ
    waiting_for_media_choice = State()  # üñºÔ∏è –í—ã–±–æ—Ä –º–µ–¥–∏–∞
    waiting_for_media_upload = State()  # üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞
    waiting_for_end_time = State()      # ‚è∞ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
    waiting_for_winner_count = State()  # üèÜ –ö–æ–ª-–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π

FORMATTING_GUIDE = """
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ç–µ–∫—Å—Ç–∞:
<blockquote expandable>
- –¶–∏—Ç–∞—Ç–∞
- –ñ–∏—Ä–Ω—ã–π: <b>—Ç–µ–∫—Å—Ç</b>
- –ö—É—Ä—Å–∏–≤: <i>—Ç–µ–∫—Å—Ç</i>
- –ü–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π: <u>—Ç–µ–∫—Å—Ç</u>
- –ó–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π: <s>—Ç–µ–∫—Å—Ç</s>
- –ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π
- –°–∫—Ä—ã—Ç—ã–π: <tg-spoiler>—Ç–µ–∫—Å—Ç</tg-spoiler>
- –°—Å—ã–ª–∫–∞: <a href="https://t.me/PepeGift_Bot">—Ç–µ–∫—Å—Ç</a>
- –ö–æ–¥: <code>—Ç–µ–∫—Å—Ç</code>
- –ö–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏ <tg-emoji emoji-id='5199885118214255386'>üëã</tg-emoji>
</blockquote>
"""

async def upload_to_storage(file_content: bytes, filename: str) -> tuple[bool, str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ üì§"""
    try:
        file_size_mb = len(file_content) / (1024 * 1024)
        if file_size_mb > MAX_MEDIA_SIZE_MB:
            return False, f"<tg-emoji emoji-id='5197564405650307134'>ü§Ø</tg-emoji> –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º—É–º: {MAX_MEDIA_SIZE_MB} –ú–ë üòî"

        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        unique_filename = f"{timestamp}_{filename}"

        try:
            s3_client.put_object(
                Bucket=YANDEX_BUCKET_NAME,
                Key=unique_filename,
                Body=io.BytesIO(file_content),
                ContentType="application/octet-stream"
            )
            public_url = f"https://{YANDEX_BUCKET_NAME}.storage.yandexcloud.net/{unique_filename}"
            logger.info(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {unique_filename}")
            return True, public_url

        except Exception as s3_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ S3: {str(s3_error)}")
            presigned_url = s3_client.generate_presigned_url(
                'put_object',
                Params={'Bucket': YANDEX_BUCKET_NAME, 'Key': unique_filename, 'ContentType': 'application/octet-stream'},
                ExpiresIn=3600
            )
            parsed_url = urlparse(presigned_url)
            headers = {'Content-Type': 'application/octet-stream', 'Host': parsed_url.netloc}
            response = requests.put(presigned_url, data=io.BytesIO(file_content), headers=headers)

            if response.status_code == 200:
                public_url = f"https://{YANDEX_BUCKET_NAME}.storage.yandexcloud.net/{unique_filename}"
                logger.info(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ URL: {unique_filename}")
                return True, public_url
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ URL: {response.status_code}")
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: {response.status_code}")

    except Exception as e:
        logger.error(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
        return False, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}"

async def save_giveaway(supabase, user_id: int, name: str, description: str, end_time: str, winner_count: int,
                        media_type: str = None, media_file_id: str = None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö üíæ"""
    moscow_tz = pytz.timezone('Europe/Moscow')
    end_time_dt = datetime.strptime(end_time, "%d.%m.%Y %H:%M")
    end_time_tz = moscow_tz.localize(end_time_dt)
    giveaway_data = {
        'user_id': user_id,
        'name': name,
        'description': description,
        'end_time': end_time_tz.isoformat(),
        'winner_count': winner_count,
        'is_active': 'false',
        'media_type': media_type,
        'media_file_id': media_file_id
    }
    try:
        response = supabase.table('giveaways').insert(giveaway_data).execute()
        if response.data:
            giveaway_id = response.data[0]['id']
            default_congrats_message = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ \"{name}\"!"
            for place in range(1, winner_count + 1):
                supabase.table('congratulations').insert({
                    'giveaway_id': giveaway_id,
                    'place': place,
                    'message': default_congrats_message
                }).execute()
            return True, giveaway_id
        return False, None
    except Exception as e:
        logger.error(f"üö´ –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
        return False, None

def register_create_giveaway_handlers(dp: Dispatcher, bot: Bot, supabase: Client):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ üéÅ"""

    @dp.callback_query(lambda c: c.data == 'create_giveaway')
    async def process_create_giveaway(callback_query: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ üöÄ"""
        await bot.answer_callback_query(callback_query.id)
        await state.set_state(GiveawayStates.waiting_for_name)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="back_to_main_menu")]])
        await send_message_with_image(
            bot,
            callback_query.from_user.id,
            f"<tg-emoji emoji-id='5395444784611480792'>‚úèÔ∏è</tg-emoji> –î–∞–≤–∞–π—Ç–µ –ø—Ä–∏–¥—É–º–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–¥–æ {MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):\n{FORMATTING_GUIDE}",
            reply_markup=keyboard,
            message_id=callback_query.message.message_id,
            parse_mode='HTML'
        )
        await state.update_data(last_message_id=callback_query.message.message_id)

    @dp.message(GiveawayStates.waiting_for_name)
    async def process_name(message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ üéØ"""
        formatted_text = message.html_text if message.text else ""

        if len(formatted_text) > MAX_NAME_LENGTH:
            data = await state.get_data()
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="back_to_main_menu")]])
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            await send_message_with_image(
                bot,
                message.chat.id,
                f"<tg-emoji emoji-id='5447644880824181073'>‚ö†Ô∏è</tg-emoji> –ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º {MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤, —Å–µ–π—á–∞—Å {len(formatted_text)}. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ!\n{FORMATTING_GUIDE}",
                reply_markup=keyboard,
                message_id=data['last_message_id'],
                parse_mode='HTML'
            )
            return

        await state.update_data(name=formatted_text)
        await state.set_state(GiveawayStates.waiting_for_description)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="back_to_main_menu")]])
        data = await state.get_data()
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        await send_message_with_image(
            bot,
            message.chat.id,
            f"<tg-emoji emoji-id='5282843764451195532'>üñ•</tg-emoji> –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–¥–æ {MAX_DESCRIPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):\n{FORMATTING_GUIDE}",
            reply_markup=keyboard,
            message_id=data['last_message_id'],
            parse_mode='HTML'
        )

    @dp.message(GiveawayStates.waiting_for_description)
    async def process_description(message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ üìú"""
        formatted_text = message.html_text if message.text else ""

        if len(formatted_text) > MAX_DESCRIPTION_LENGTH:
            data = await state.get_data()
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="back_to_main_menu")]])
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            await send_message_with_image(
                bot,
                message.chat.id,
                f"<tg-emoji emoji-id='5197564405650307134'>ü§Ø</tg-emoji> –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º {MAX_DESCRIPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤, —Å–µ–π—á–∞—Å {len(formatted_text)}. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ!\n{FORMATTING_GUIDE}",
                reply_markup=keyboard,
                message_id=data['last_message_id'],
                parse_mode='HTML'
            )
            return

        await state.update_data(description=formatted_text)
        await state.set_state(GiveawayStates.waiting_for_media_choice)
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚úÖ –î–∞", callback_data="add_media")
        keyboard.button(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_media")
        keyboard.button(text="–í –º–µ–Ω—é", callback_data="back_to_main_menu")
        keyboard.adjust(2, 1)
        data = await state.get_data()
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        await send_message_with_image(
            bot,
            message.chat.id,
            f"<tg-emoji emoji-id='5282843764451195532'>üñ•</tg-emoji> –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, GIF –∏–ª–∏ –≤–∏–¥–µ–æ? (–¥–æ {MAX_MEDIA_SIZE_MB} –ú–ë) üìé",
            reply_markup=keyboard.as_markup(),
            message_id=data['last_message_id'],
            parse_mode='HTML'
        )

    @dp.callback_query(lambda c: c.data in ["add_media", "skip_media", "back_to_media_choice"])
    async def process_media_choice(callback_query: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–µ–¥–∏–∞ üñºÔ∏è"""
        try:
            await bot.answer_callback_query(callback_query.id)
        except aiogram.exceptions.TelegramBadRequest as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback: {str(e)}")

        if callback_query.data == "add_media":
            await state.set_state(GiveawayStates.waiting_for_media_upload)
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=" ‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_media_choice")]])
            await send_message_with_image(
                bot,
                callback_query.from_user.id,
                f"<tg-emoji emoji-id='5235837920081887219'>üì∏</tg-emoji> –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, GIF –∏–ª–∏ –≤–∏–¥–µ–æ (–¥–æ {MAX_MEDIA_SIZE_MB} –ú–ë)!",
                reply_markup=keyboard,
                message_id=callback_query.message.message_id,
                parse_mode='HTML'
            )
        elif callback_query.data == "skip_media":
            await process_end_time_request(callback_query.from_user.id, state, callback_query.message.message_id)
        elif callback_query.data == "back_to_media_choice":
            await state.set_state(GiveawayStates.waiting_for_media_choice)
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚úÖ –î–∞", callback_data="add_media")
            keyboard.button(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_media")
            keyboard.button(text="–í –º–µ–Ω—é", callback_data="back_to_main_menu")
            keyboard.adjust(2, 1)
            await send_message_with_image(
                bot,
                callback_query.from_user.id,
                f"<tg-emoji emoji-id='5282843764451195532'>üñ•</tg-emoji> –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, GIF –∏–ª–∏ –≤–∏–¥–µ–æ? (–¥–æ {MAX_MEDIA_SIZE_MB} –ú–ë) üìé",
                reply_markup=keyboard.as_markup(),
                message_id=callback_query.message.message_id,
                parse_mode='HTML'
            )

    @dp.message(GiveawayStates.waiting_for_media_upload)
    async def process_media_upload(message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –º–µ–¥–∏–∞ üì§"""
        try:
            data = await state.get_data()
            last_message_id = data.get('last_message_id')
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=" ‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_media_choice")]])
            await send_message_with_image(
                bot,
                message.chat.id,
                "<tg-emoji emoji-id='5386367538735104399'>‚åõÔ∏è</tg-emoji> –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à–µ –º–µ–¥–∏–∞...",
                reply_markup=keyboard,
                message_id=last_message_id,
                parse_mode='HTML'
            )

            if message.photo:
                file_id = message.photo[-1].file_id
                media_type = 'photo'
                file_ext = 'jpg'
            elif message.animation:
                file_id = message.animation.file_id
                media_type = 'gif'
                file_ext = 'gif'
            elif message.video:
                file_id = message.video.file_id
                media_type = 'video'
                file_ext = 'mp4'
            else:
                await send_message_with_image(
                    bot,
                    message.chat.id,
                    "<tg-emoji emoji-id='5282843764451195532'>üñ•</tg-emoji> –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, GIF –∏–ª–∏ –≤–∏–¥–µ–æ!",
                    reply_markup=keyboard,
                    message_id=last_message_id,
                    parse_mode='HTML'
                )
                return

            file = await bot.get_file(file_id)
            file_content = await bot.download_file(file.file_path)
            file_size_mb = file.file_size / (1024 * 1024)
            if file_size_mb > MAX_MEDIA_SIZE_MB:
                await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                await send_message_with_image(
                    bot,
                    message.chat.id,
                    f"<tg-emoji emoji-id='5197564405650307134'>ü§Ø</tg-emoji> –§–∞–π–ª –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º—É–º {MAX_MEDIA_SIZE_MB} –ú–ë, —Å–µ–π—á–∞—Å {file_size_mb:.2f} –ú–ë üòî",
                    reply_markup=keyboard,
                    message_id=last_message_id,
                    parse_mode='HTML'
                )
                return

            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"{timestamp}_{message.message_id}.{file_ext}"
            success, result = await upload_to_storage(file_content.read(), filename)

            if not success:
                raise Exception(result)

            await state.update_data(media_type=media_type, media_file_id=result)
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            await process_end_time_request(message.chat.id, state, last_message_id)

        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
            data = await state.get_data()
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=" ‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_media_choice")]])
            await send_message_with_image(
                bot,
                message.chat.id,
                "<tg-emoji emoji-id='5210952531676504517'>‚ùå</tg-emoji> –û–π! –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏–∞ üòî –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!",
                reply_markup=keyboard,
                message_id=data.get('last_message_id'),
                parse_mode='HTML'
            )

    async def process_end_time_request(chat_id: int, state: FSMContext, message_id: int = None):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ ‚è∞"""
        await state.set_state(GiveawayStates.waiting_for_end_time)
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–í –º–µ–Ω—é", callback_data="back_to_main_menu")
        current_time = datetime.now(pytz.timezone('Europe/Moscow')).strftime('%d.%m.%Y %H:%M')
        html_message = f"""
–ö–æ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Ä–æ–∑—ã–≥—Ä—ã—à? –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</b>

<tg-emoji emoji-id='5413879192267805083'>üóì</tg-emoji> –°–µ–π—á–∞—Å –≤ –ú–æ—Å–∫–≤–µ:\n<code>{current_time}</code>
"""
        await send_message_with_image(
            bot,
            chat_id,
            html_message,
            reply_markup=keyboard.as_markup(),
            message_id=message_id,
            parse_mode='HTML'
        )

    @dp.message(GiveawayStates.waiting_for_end_time)
    async def process_end_time(message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è ‚è∞"""
        try:
            new_end_time = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
            await state.update_data(end_time=message.text)
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            await state.set_state(GiveawayStates.waiting_for_winner_count)
            data = await state.get_data()
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="–í –º–µ–Ω—é", callback_data="back_to_main_menu")
            await send_message_with_image(
                bot,
                message.chat.id,
                f"<tg-emoji emoji-id='5440539497383087970'>ü•á</tg-emoji> –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π? –ú–∞–∫—Å–∏–º—É–º {MAX_WINNERS}!",
                message_id=data.get('last_message_id'),
                reply_markup=keyboard.as_markup(),
                parse_mode='HTML'
            )
        except ValueError:
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            data = await state.get_data()
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="–í –º–µ–Ω—é", callback_data="back_to_main_menu")
            current_time = datetime.now(pytz.timezone('Europe/Moscow')).strftime('%d.%m.%Y %H:%M')
            html_message = f"""
<tg-emoji emoji-id='5447644880824181073'>‚ö†Ô∏è</tg-emoji> –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</b>

<tg-emoji emoji-id='5413879192267805083'>üóì</tg-emoji> –°–µ–π—á–∞—Å –≤ –ú–æ—Å–∫–≤–µ: <code>{current_time}</code>
"""
            await send_message_with_image(
                bot,
                message.chat.id,
                html_message,
                message_id=data.get('last_message_id'),
                reply_markup=keyboard.as_markup(),
                parse_mode='HTML'
            )

    async def send_new_giveaway_message(chat_id, giveaway, giveaway_info, keyboard, message_id=None):
        """Updates an existing message or sends a new giveaway message with or without media."""
        try:
            if message_id:  # If message_id is provided, edit the existing message
                if giveaway['media_type'] and giveaway['media_file_id']:
                    media_types = {
                        'photo': InputMediaPhoto,
                        'gif': InputMediaAnimation,
                        'video': InputMediaVideo
                    }
                    await bot.edit_message_media(
                        chat_id=chat_id,
                        message_id=message_id,
                        media=media_types[giveaway['media_type']](
                            media=giveaway['media_file_id'],
                            caption=giveaway_info,
                            parse_mode='HTML'
                        ),
                        reply_markup=keyboard.as_markup()
                    )
                else:
                    # Use send_message_with_image with placeholder image when no media
                    await send_message_with_image(
                        bot,
                        chat_id,
                        giveaway_info,
                        reply_markup=keyboard.as_markup(),
                        message_id=message_id,
                        parse_mode='HTML'
                    )
            else:  # If no message_id, send a new message
                if giveaway['media_type'] and giveaway['media_file_id']:
                    if giveaway['media_type'] == 'photo':
                        await bot.send_photo(chat_id, giveaway['media_file_id'], caption=giveaway_info,
                                             reply_markup=keyboard.as_markup(), parse_mode='HTML')
                    elif giveaway['media_type'] == 'gif':
                        await bot.send_animation(chat_id, animation=giveaway['media_file_id'], caption=giveaway_info,
                                                 reply_markup=keyboard.as_markup(), parse_mode='HTML')
                    elif giveaway['media_type'] == 'video':
                        await bot.send_video(chat_id, video=giveaway['media_file_id'], caption=giveaway_info,
                                             reply_markup=keyboard.as_markup(), parse_mode='HTML')
                else:
                    # Use send_message_with_image with placeholder image when no media
                    await send_message_with_image(
                        bot,
                        chat_id,
                        giveaway_info,
                        reply_markup=keyboard.as_markup(),
                        parse_mode='HTML'
                    )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            raise

    async def display_giveaway(bot: Bot, chat_id: int, giveaway_id: int, supabase: Client, message_id: int = None):
        """Displays the giveaway details by updating the existing message."""
        try:
            # Fetch giveaway details from Supabase
            response = supabase.table('giveaways').select('*').eq('id', giveaway_id).single().execute()
            if not response.data:
                raise Exception("Giveaway not found in database")

            giveaway = response.data

            # Build the keyboard with all options
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_post:{giveaway_id}")
            keyboard.button(text="üë• –ü—Ä–∏–≤—è–∑–∞—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–∞", callback_data=f"bind_communities:{giveaway_id}")
            keyboard.button(text="üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"activate_giveaway:{giveaway_id}")
            keyboard.button(text="üì© –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è", callback_data=f"add_invite_task:{giveaway_id}")
            keyboard.button(text="üéâ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º", callback_data=f"message_winners:{giveaway_id}")
            keyboard.button(text="üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"preview_giveaway:{giveaway_id}")
            keyboard.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_giveaway:{giveaway_id}")
            keyboard.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="created_giveaways")
            keyboard.adjust(1)

            # Include invite info if applicable
            invite_info = f"\n<tg-emoji emoji-id='5352899869369446268'>üòä</tg-emoji> –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ {giveaway['quantity_invite']} –¥—Ä—É–∑–µ–π –¥–ª—è —É—á–∞—Å—Ç–∏—è!" if giveaway.get('invite',
                                                                                                               False) else ""

            # Format the giveaway message
            end_time_msk = (datetime.fromisoformat(giveaway['end_time']) + timedelta(hours=3)).strftime(
                '%d.%m.%Y %H:%M')
            giveaway_info = f"""
<b>{giveaway['name']}</b>

{giveaway['description']}

<tg-emoji emoji-id='5440539497383087970'>ü•á</tg-emoji> <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:</b> {giveaway['winner_count']}
<tg-emoji emoji-id='5413879192267805083'>üóì</tg-emoji> <b>–ö–æ–Ω–µ—Ü:</b> {end_time_msk} (–ú–°–ö)
{invite_info}
"""

            # Update the existing message with the giveaway details
            await send_new_giveaway_message(chat_id, giveaway, giveaway_info, keyboard, message_id=message_id)

        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {str(e)}")
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="created_giveaways")
            # Fallback to editing the message with an error if possible
            if message_id:
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text="‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ üòî\n‚ö†Ô∏è –£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!",
                    reply_markup=keyboard.as_markup(),
                    parse_mode='HTML'
                )
            else:
                await send_message_with_image(
                    bot,
                    chat_id,
                    "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ üòî\n‚ö†Ô∏è –£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!",
                    reply_markup=keyboard.as_markup(),
                    parse_mode='HTML'
                )

    @dp.message(GiveawayStates.waiting_for_winner_count)
    async def process_winner_count(message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π üèÜ"""
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        try:
            winner_count = int(message.text)
            if winner_count <= 0:
                raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
            if winner_count > MAX_WINNERS:
                data = await state.get_data()
                keyboard = InlineKeyboardBuilder()
                keyboard.button(text="–í –º–µ–Ω—é", callback_data="back_to_main_menu")
                await send_message_with_image(
                    bot,
                    message.chat.id,
                    f"<tg-emoji emoji-id='5447644880824181073'>‚ö†Ô∏è</tg-emoji> –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ! –ú–∞–∫—Å–∏–º—É–º {MAX_WINNERS} –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π",
                    message_id=data.get('last_message_id'),
                    reply_markup=keyboard.as_markup(),
                    parse_mode='HTML'
                )
                return

            data = await state.get_data()
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="–í –º–µ–Ω—é", callback_data="back_to_main_menu")
            # Send the "Creating..." message that will be updated
            await send_message_with_image(
                bot,
                message.chat.id,
                "<tg-emoji emoji-id='5386367538735104399'>‚åõÔ∏è</tg-emoji> –°–æ–∑–¥–∞—ë–º –≤–∞—à —Ä–æ–∑—ã–≥—Ä—ã—à...",
                message_id=data.get('last_message_id'),
                reply_markup=keyboard.as_markup(),
                parse_mode='HTML'
            )

            success, giveaway_id = await save_giveaway(
                supabase,
                message.from_user.id,
                data['name'],
                data['description'],
                data['end_time'],
                winner_count,
                data.get('media_type'),
                data.get('media_file_id')
            )

            if success:
                # Update the "Creating..." message with giveaway details
                await display_giveaway(bot, message.chat.id, giveaway_id, supabase,
                                       message_id=data.get('last_message_id'))
                await state.clear()
            else:
                keyboard = InlineKeyboardBuilder()
                keyboard.button(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="create_giveaway")
                keyboard.button(text="–í –º–µ–Ω—é", callback_data="back_to_main_menu")
                keyboard.adjust(1)
                # Update the "Creating..." message with an error
                await bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=data.get('last_message_id'),
                    text="‚ùå –û–π! –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à üòî –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑?",
                    reply_markup=keyboard.as_markup(),
                    parse_mode='HTML'
                )

        except ValueError:
            data = await state.get_data()
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="–í –º–µ–Ω—é", callback_data="back_to_main_menu")
            await send_message_with_image(
                bot,
                message.chat.id,
                "<tg-emoji emoji-id='5447644880824181073'>‚ö†Ô∏è</tg-emoji> –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ! –ù–∞–ø—Ä–∏–º–µ—Ä, 3",
                message_id=data.get('last_message_id'),
                reply_markup=keyboard.as_markup(),
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
            data = await state.get_data()
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="create_giveaway")
            keyboard.button(text="–í –º–µ–Ω—é", callback_data="back_to_main_menu")
            keyboard.adjust(1)
            # Update the "Creating..." message with a general error
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=data.get('last_message_id'),
                text="‚ùå –£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòî –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑?",
                reply_markup=keyboard.as_markup(),
                parse_mode='HTML'
            )
