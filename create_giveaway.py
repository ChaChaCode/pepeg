from aiogram import Dispatcher, Bot, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, LinkPreviewOptions
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime
import pytz
import logging
import boto3
from botocore.client import Config
import io
import re
import random
import string

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Yandex Cloud S3 ‚òÅÔ∏è
YANDEX_ACCESS_KEY = 'YCAJEDluWSn-XI0tyGyfwfnVL'
YANDEX_SECRET_KEY = 'YCPkR9H9Ucebg6L6eMGvtfKuFIcO_MK7gyiffY6H'
YANDEX_BUCKET_NAME = 'raffle'
YANDEX_ENDPOINT_URL = 'https://storage.yandexcloud.net'
YANDEX_REGION = 'ru-central1'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è S3 –∫–ª–∏–µ–Ω—Ç–∞ üì¶
s3_client = boto3.client(
    's3',
    region_name=YANDEX_REGION,
    aws_access_key_id=YANDEX_ACCESS_KEY,
    aws_secret_access_key=YANDEX_SECRET_KEY,
    endpoint_url=YANDEX_ENDPOINT_URL,
    config=Config(signature_version='s3v4')
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_CAPTION_LENGTH = 2500
MAX_NAME_LENGTH = 50
MAX_DESCRIPTION_LENGTH = 2500
MAX_MEDIA_SIZE_MB = 10
MAX_WINNERS = 100

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class GiveawayStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_description_and_media = State()  # –ù–æ–≤–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    waiting_for_end_time = State()
    waiting_for_winner_count = State()

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
FORMATTING_GUIDE_INITIAL = """
üñ• –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–¥–æ 2500 —Å–∏–º–≤–æ–ª–æ–≤) —Å –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–º (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ GIF –¥–æ 10 –ú–ë):

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ç–µ–∫—Å—Ç–∞:
<blockquote expandable>- –¶–∏—Ç–∞—Ç–∞
- –ñ–∏—Ä–Ω—ã–π: <b>—Ç–µ–∫—Å—Ç</b>
- –ö–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏ <tg-emoji emoji-id='5199885118214255386'>üëã</tg-emoji>
- –ö—É—Ä—Å–∏–≤: <i>—Ç–µ–∫—Å—Ç</i>
- –ü–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π: <u>—Ç–µ–∫—Å—Ç</u>
- –ó–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π: <s>—Ç–µ–∫—Å—Ç</s>
- –ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π
- –°–∫—Ä—ã—Ç—ã–π: <tg-spoiler>—Ç–µ–∫—Å—Ç</tg-spoiler>
- –°—Å—ã–ª–∫–∞: <a href="https://t.me/PepeGift_Bot">—Ç–µ–∫—Å—Ç</a>
- –ö–æ–¥: <code>—Ç–µ–∫—Å—Ç</code></blockquote>

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
- <code>{win}</code> ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π  
- <code>{data}</code> ‚Äî –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, 30.03.2025 20:45 (–ø–æ –ú–°–ö)  
"""

FORMATTING_GUIDE_UPDATE = """
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ç–µ–∫—Å—Ç–∞:
<blockquote expandable>- –¶–∏—Ç–∞—Ç–∞
- –ñ–∏—Ä–Ω—ã–π: <b>—Ç–µ–∫—Å—Ç</b>
- –ö–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏ <tg-emoji emoji-id='5199885118214255386'>üëã</tg-emoji>
- –ö—É—Ä—Å–∏–≤: <i>—Ç–µ–∫—Å—Ç</i>
- –ü–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π: <u>—Ç–µ–∫—Å—Ç</u>
- –ó–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π: <s>—Ç–µ–∫—Å—Ç</s>
- –ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π
- –°–∫—Ä—ã—Ç—ã–π: <tg-spoiler>—Ç–µ–∫—Å—Ç</tg-spoiler>
- –°—Å—ã–ª–∫–∞: <a href="https://t.me/PepeGift_Bot">—Ç–µ–∫—Å—Ç</a>
- –ö–æ–¥: <code>—Ç–µ–∫—Å—Ç</code></blockquote>

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
- <code>{win}</code> ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π  
- <code>{data}</code> ‚Äî –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, 30.03.2025 20:45 (–ø–æ –ú–°–ö)
"""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ 8-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞
def generate_unique_code(cursor) -> str:
    while True:
        code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
        cursor.execute("SELECT COUNT(*) FROM giveaways WHERE id = %s", (code,))
        if cursor.fetchone()[0] == 0:
            return code

async def build_navigation_keyboard(state: FSMContext, current_state: State) -> InlineKeyboardBuilder:
    data = await state.get_data()
    keyboard = InlineKeyboardBuilder()

    next_states = {
        GiveawayStates.waiting_for_name: (GiveawayStates.waiting_for_description_and_media, 'next_to_description_and_media', 'name'),
        GiveawayStates.waiting_for_description_and_media: (GiveawayStates.waiting_for_end_time, 'next_to_end_time', 'description'),
        GiveawayStates.waiting_for_end_time: (GiveawayStates.waiting_for_winner_count, 'next_to_winner_count', 'end_time'),
    }

    back_states = {
        GiveawayStates.waiting_for_description_and_media: 'back_to_name',
        GiveawayStates.waiting_for_end_time: 'back_to_description_and_media',
        GiveawayStates.waiting_for_winner_count: 'back_to_end_time',
    }

    has_next = False
    has_back = False
    has_delete = False

    # –ö–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞" –ø–æ—è–≤–ª—è–µ—Ç—Å—è, –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞ –∏ –º—ã –Ω–∞ —ç—Ç–∞–ø–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –º–µ–¥–∏–∞
    if current_state == GiveawayStates.waiting_for_description_and_media and data.get('media_url'):
        keyboard.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞", callback_data="delete_media")
        has_delete = True

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if current_state in back_states:
        keyboard.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=back_states[current_state])
        has_back = True

    # –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" –¥–ª—è —ç—Ç–∞–ø–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –º–µ–¥–∏–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è, –µ—Å–ª–∏ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
    if current_state == GiveawayStates.waiting_for_description_and_media:
        if data.get('description'):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
            keyboard.button(text="–î–∞–ª–µ–µ ‚ñ∂Ô∏è", callback_data="next_to_end_time")
            has_next = True
    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
    elif current_state in next_states:
        next_state, callback, required_field = next_states[current_state]
        if required_field in data and data[required_field]:
            keyboard.button(text="–î–∞–ª–µ–µ ‚ñ∂Ô∏è", callback_data=callback)
            has_next = True

    keyboard.button(text="–í –º–µ–Ω—é", callback_data="back_to_main_menu")

    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
    if has_delete:
        if has_back and has_next:
            keyboard.adjust(1, 2, 1)  # –£–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ, –ù–∞–∑–∞–¥ –∏ –î–∞–ª–µ–µ –≤–º–µ—Å—Ç–µ, –í –º–µ–Ω—é –æ—Ç–¥–µ–ª—å–Ω–æ
        elif has_back or has_next:
            keyboard.adjust(1, 1, 1)  # –£–¥–∞–ª–∏—Ç—å, –ù–∞–∑–∞–¥ –∏–ª–∏ –î–∞–ª–µ–µ, –í –º–µ–Ω—é
        else:
            keyboard.adjust(1, 1)  # –£–¥–∞–ª–∏—Ç—å, –í –º–µ–Ω—é
    else:
        if has_back and has_next:
            keyboard.adjust(2, 1)  # –ù–∞–∑–∞–¥ –∏ –î–∞–ª–µ–µ –≤–º–µ—Å—Ç–µ, –í –º–µ–Ω—é –æ—Ç–¥–µ–ª—å–Ω–æ
        else:
            keyboard.adjust(1, 1)  # –ù–∞–∑–∞–¥ –∏–ª–∏ –í –º–µ–Ω—é

    return keyboard


def count_length_with_custom_emoji(text: str) -> int:
    # –£–¥–∞–ª—è–µ–º HTML-—Ç–µ–≥–∏
    tag_pattern = r'<[^>]+>'
    cleaned_text = re.sub(tag_pattern, '', text)

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ —Ç–µ–≥–æ–≤
    length = len(cleaned_text)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–ª–∏–Ω—É –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    length += text.count('{win}') * (5 - len('{win}'))  # 5 —Å–∏–º–≤–æ–ª–æ–≤ –º–∏–Ω—É—Å –¥–ª–∏–Ω–∞ —Å–∞–º–æ–π —Å—Ç—Ä–æ–∫–∏ "{win}"
    length += text.count('{data}') * (16 - len('{data}'))  # 16 —Å–∏–º–≤–æ–ª–æ–≤ –º–∏–Ω—É—Å –¥–ª–∏–Ω–∞ —Å–∞–º–æ–π —Å—Ç—Ä–æ–∫–∏ "{data}"

    return length

async def upload_to_storage(file_content: bytes, filename: str) -> tuple[bool, str]:
    try:
        file_size_mb = len(file_content) / (1024 * 1024)
        if file_size_mb > MAX_MEDIA_SIZE_MB:
            return False, f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º—É–º: {MAX_MEDIA_SIZE_MB} –ú–ë"

        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        unique_filename = f"{timestamp}_{filename}"

        s3_client.put_object(
            Bucket=YANDEX_BUCKET_NAME,
            Key=unique_filename,
            Body=io.BytesIO(file_content),
            ContentType="application/octet-stream"
        )
        public_url = f"https://{YANDEX_BUCKET_NAME}.storage.yandexcloud.net/{unique_filename}"
        logger.info(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {unique_filename}")
        return True, public_url
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        return False, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}"

async def save_giveaway(conn, cursor, user_id: int, name: str, description: str, end_time: str,
                       winner_count: int, media_type: str = None, media_file_id: str = None):
    moscow_tz = pytz.timezone('Europe/Moscow')
    end_time_dt = datetime.strptime(end_time, "%d.%m.%Y %H:%M")
    end_time_tz = moscow_tz.localize(end_time_dt)

    try:
        giveaway_id = generate_unique_code(cursor)

        cursor.execute(
            """
            INSERT INTO giveaways (id, user_id, name, description, end_time, winner_count, is_active, media_type, media_file_id)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
            """,
            (giveaway_id, user_id, name, description, end_time_tz, winner_count, False, media_type, media_file_id)
        )

        default_congrats_message = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ \"{name}\"!"
        for place in range(1, winner_count + 1):
            cursor.execute(
                """
                INSERT INTO congratulations (giveaway_id, place, message)
                VALUES (%s, %s, %s)
                """,
                (giveaway_id, place, default_congrats_message)
            )

        conn.commit()
        return True, giveaway_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
        conn.rollback()
        return False, None

def register_create_giveaway_handlers(dp: Dispatcher, bot: Bot, conn, cursor):
    @dp.callback_query(lambda c: c.data == 'create_giveaway')
    async def process_create_giveaway(callback_query: CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)
        await state.set_state(GiveawayStates.waiting_for_name)
        keyboard = await build_navigation_keyboard(state, GiveawayStates.waiting_for_name)
        image_url = 'https://storage.yandexcloud.net/raffle/snapi/snapi_name2.jpg'
        message_text = f"<a href=\"{image_url}\">\u200B</a><tg-emoji emoji-id='5395444784611480792'>‚úèÔ∏è</tg-emoji> –î–∞–≤–∞–π—Ç–µ –ø—Ä–∏–¥—É–º–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–¥–æ {MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):"
        link_preview_options = LinkPreviewOptions(show_above_text=True)

        await bot.edit_message_text(
            chat_id=callback_query.from_user.id,
            message_id=callback_query.message.message_id,
            text=message_text,
            reply_markup=keyboard.as_markup(),
            parse_mode='HTML',
            link_preview_options=link_preview_options
        )
        await state.update_data(last_message_id=callback_query.message.message_id)

    @dp.message(GiveawayStates.waiting_for_name)
    async def process_name(message: types.Message, state: FSMContext):
        if message.text and message.text.startswith('/'):
            return

        formatted_text = message.html_text if message.text else ""
        text_length = count_length_with_custom_emoji(formatted_text)

        if text_length > MAX_NAME_LENGTH:
            data = await state.get_data()
            keyboard = await build_navigation_keyboard(state, GiveawayStates.waiting_for_name)
            image_url = 'https://storage.yandexcloud.net/raffle/snapi/snapi_name2.jpg'
            error_text = f"<a href=\"{image_url}\">\u200B</a>‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º {MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤, —Å–µ–π—á–∞—Å {text_length}. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ!"
            link_preview_options = LinkPreviewOptions(show_above_text=True)
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=data['last_message_id'],
                text=error_text,
                reply_markup=keyboard.as_markup(),
                parse_mode='HTML',
                link_preview_options=link_preview_options
            )
            return

        await state.update_data(name=formatted_text)
        await state.set_state(GiveawayStates.waiting_for_description_and_media)
        data = await state.get_data()
        keyboard = await build_navigation_keyboard(state, GiveawayStates.waiting_for_description_and_media)
        image_url = 'https://storage.yandexcloud.net/raffle/snapi/snapi_opis2.jpg'
        message_text = f"<a href=\"{image_url}\">\u200B</a>{FORMATTING_GUIDE_INITIAL}"
        link_preview_options = LinkPreviewOptions(show_above_text=True)

        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=data['last_message_id'],
            text=message_text,
            reply_markup=keyboard.as_markup(),
            parse_mode='HTML',
            link_preview_options=link_preview_options
        )

    @dp.callback_query(lambda c: c.data == "next_to_description_and_media")
    async def next_to_description_and_media(callback_query: CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)
        await state.set_state(GiveawayStates.waiting_for_description_and_media)
        data = await state.get_data()
        description = data.get('description', '')
        media_url = data.get('media_url', '')
        media_type = data.get('media_type', '')
        keyboard = await build_navigation_keyboard(state, GiveawayStates.waiting_for_description_and_media)
        image_url = media_url if media_url else 'https://storage.yandexcloud.net/raffle/snapi/snapi_opis2.jpg'
        link_preview_options = LinkPreviewOptions(show_above_text=True)

        media_display = f"üì∏ –¢–µ–∫—É—â–µ–µ –º–µ–¥–∏–∞: {'–§–æ—Ç–æ' if media_type == 'photo' else 'GIF' if media_type == 'gif' else '–í–∏–¥–µ–æ'}." if media_url else "üì∏ –¢–µ–∫—É—â–µ–µ –º–µ–¥–∏–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
        message_text = (
            f"<a href=\"{image_url}\">\u200B</a>üñ• –¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n{description if description else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
            f"{media_display}\n\n"
            f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–º –∏–ª–∏ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –º–µ–¥–∏–∞:\n\n"
            f"{FORMATTING_GUIDE_UPDATE}"
        )

        await bot.edit_message_text(
            chat_id=callback_query.from_user.id,
            message_id=callback_query.message.message_id,
            text=message_text,
            reply_markup=keyboard.as_markup(),
            parse_mode='HTML',
            link_preview_options=link_preview_options
        )

    @dp.message(GiveawayStates.waiting_for_description_and_media)
    async def process_description_and_media(message: types.Message, state: FSMContext):
        if message.text and message.text.startswith('/'):
            return

        data = await state.get_data()
        placeholder_url = 'https://storage.yandexcloud.net/raffle/snapi/snapi_opis2.jpg'
        link_preview_options = LinkPreviewOptions(show_above_text=True)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (–∏–∑ message.text –∏–ª–∏ message.caption)
        formatted_text = None
        if message.text:
            formatted_text = message.html_text
        elif message.caption:
            formatted_text = message.html_text

        if formatted_text:
            text_length = count_length_with_custom_emoji(formatted_text)
            if text_length > MAX_DESCRIPTION_LENGTH:
                keyboard = await build_navigation_keyboard(state, GiveawayStates.waiting_for_description_and_media)
                error_text = (
                    f"<a href=\"{data.get('media_url', placeholder_url)}\">\u200B</a>"
                    f"‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º {MAX_DESCRIPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤, —Å–µ–π—á–∞—Å {text_length}. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ!\n\n"
                    f"{FORMATTING_GUIDE_UPDATE}"
                )
                await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                await bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=data['last_message_id'],
                    text=error_text,
                    reply_markup=keyboard.as_markup(),
                    parse_mode='HTML',
                    link_preview_options=link_preview_options
                )
                return
            await state.update_data(description=formatted_text)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞
        file_id = None
        file_ext = None
        media_type = None

        if message.photo:
            file_id = message.photo[-1].file_id
            media_type = 'photo'
            file_ext = 'jpg'
        elif message.animation:
            file_id = message.animation.file_id
            media_type = 'gif'
            file_ext = 'mp4'
        elif message.video:
            file_id = message.video.file_id
            media_type = 'video'
            file_ext = 'mp4'

        if file_id and file_ext:
            file = await bot.get_file(file_id)
            if file.file_size / (1024 * 1024) > MAX_MEDIA_SIZE_MB:
                keyboard = await build_navigation_keyboard(state, GiveawayStates.waiting_for_description_and_media)
                error_text = (
                    f"<a href=\"{placeholder_url}\">\u200B</a>"
                    f"ü§Ø –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º—É–º {MAX_MEDIA_SIZE_MB} –ú–ë\n\n"
                    f"{FORMATTING_GUIDE_UPDATE}"
                )
                await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                await bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=data['last_message_id'],
                    text=error_text,
                    reply_markup=keyboard.as_markup(),
                    parse_mode='HTML',
                    link_preview_options=link_preview_options
                )
                return

            file_content = await bot.download_file(file.file_path)
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"{timestamp}_{message.message_id}.{file_ext}"
            success, media_url = await upload_to_storage(file_content.read(), filename)

            if not success:
                keyboard = await build_navigation_keyboard(state, GiveawayStates.waiting_for_description_and_media)
                error_text = (
                    f"<a href=\"{placeholder_url}\">\u200B</a>"
                    f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞: {media_url}\n\n"
                    f"{FORMATTING_GUIDE_UPDATE}"
                )
                await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                await bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=data['last_message_id'],
                    text=error_text,
                    reply_markup=keyboard.as_markup(),
                    parse_mode='HTML',
                    link_preview_options=link_preview_options
                )
                return

            await state.update_data(media_url=media_url, media_type=media_type)

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        if not formatted_text and not (message.photo or message.animation or message.video):
            keyboard = await build_navigation_keyboard(state, GiveawayStates.waiting_for_description_and_media)
            error_text = (
                f"<a href=\"{data.get('media_url', placeholder_url)}\">\u200B</a>"
                f"‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –º–µ–¥–∏–∞ –∏–ª–∏ –∏ —Ç–æ, –∏ –¥—Ä—É–≥–æ–µ!\n\n"
                f"{FORMATTING_GUIDE_UPDATE}"
            )
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=data['last_message_id'],
                text=error_text,
                reply_markup=keyboard.as_markup(),
                parse_mode='HTML',
                link_preview_options=link_preview_options
            )
            return

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞
        data = await state.get_data()
        description = data.get('description', '')
        media_url = data.get('media_url', '')
        media_type = data.get('media_type', '')
        keyboard = await build_navigation_keyboard(state, GiveawayStates.waiting_for_description_and_media)
        image_url = media_url if media_url else placeholder_url
        media_display = f"üì∏ –¢–µ–∫—É—â–µ–µ –º–µ–¥–∏–∞: {'–§–æ—Ç–æ' if media_type == 'photo' else 'GIF' if media_type == 'gif' else '–í–∏–¥–µ–æ'}." if media_url else "üì∏ –¢–µ–∫—É—â–µ–µ –º–µ–¥–∏–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
        message_text = (
            f"<a href=\"{image_url}\">\u200B</a>üñ• –¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n{description if description else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
            f"{media_display}\n\n"
            f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–º –∏–ª–∏ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –º–µ–¥–∏–∞:\n\n"
            f"{FORMATTING_GUIDE_UPDATE}"
        )

        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=data['last_message_id'],
            text=message_text,
            reply_markup=keyboard.as_markup(),
            parse_mode='HTML',
            link_preview_options=link_preview_options
        )

    @dp.callback_query(lambda c: c.data == "delete_media")
    async def delete_media(callback_query: CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)
        await state.update_data(media_url=None, media_type=None)
        data = await state.get_data()
        keyboard = await build_navigation_keyboard(state, GiveawayStates.waiting_for_description_and_media)
        description = data.get('description', '')
        placeholder_url = 'https://storage.yandexcloud.net/raffle/snapi/snapi_opis2.jpg'
        message_text = (
            f"üì∏ –¢–µ–∫—É—â–µ–µ –º–µ–¥–∏–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.\n"
            f"<a href=\"{placeholder_url}\">\u200B</a>üñ• –¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n{description if description else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
            f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–º –∏–ª–∏ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –º–µ–¥–∏–∞:\n\n"
            f"{FORMATTING_GUIDE_UPDATE}"
        )
        link_preview_options = LinkPreviewOptions(show_above_text=True)

        await bot.edit_message_text(
            chat_id=callback_query.from_user.id,
            message_id=callback_query.message.message_id,
            text=message_text,
            reply_markup=keyboard.as_markup(),
            parse_mode='HTML',
            link_preview_options=link_preview_options
        )

    @dp.callback_query(lambda c: c.data == "back_to_name")
    async def back_to_name(callback_query: CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)
        await state.set_state(GiveawayStates.waiting_for_name)
        data = await state.get_data()
        name = data.get('name', '')
        keyboard = await build_navigation_keyboard(state, GiveawayStates.waiting_for_name)
        image_url = 'https://storage.yandexcloud.net/raffle/snapi/snapi_name2.jpg'
        message_text = f"<a href=\"{image_url}\">\u200B</a><tg-emoji emoji-id='5395444784611480792'>‚úèÔ∏è</tg-emoji> –¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {name}\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:"
        link_preview_options = LinkPreviewOptions(show_above_text=True)

        await bot.edit_message_text(
            chat_id=callback_query.from_user.id,
            message_id=callback_query.message.message_id,
            text=message_text,
            reply_markup=keyboard.as_markup(),
            parse_mode='HTML',
            link_preview_options=link_preview_options
        )

    @dp.callback_query(lambda c: c.data == "next_to_end_time")
    async def next_to_end_time(callback_query: CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)
        await state.set_state(GiveawayStates.waiting_for_end_time)
        data = await state.get_data()
        end_time = data.get('end_time', '')
        keyboard = await build_navigation_keyboard(state, GiveawayStates.waiting_for_end_time)
        current_time = datetime.now(pytz.timezone('Europe/Moscow')).strftime('%d.%m.%Y %H:%M')
        image_url = 'https://storage.yandexcloud.net/raffle/snapi/snapi2.jpg'
        message_text = (
            f"<a href=\"{image_url}\">\u200B</a>–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{end_time}</b>\n\n"
            f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</b> –ø–æ –ú–°–ö\n\n"
            f"<tg-emoji emoji-id='5413879192267805083'>üóì</tg-emoji> –°–µ–π—á–∞—Å –≤ –ú–æ—Å–∫–≤–µ: <code>{current_time}</code>"
            if end_time else
            f"<a href=\"{image_url}\">\u200B</a>–ö–æ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Ä–æ–∑—ã–≥—Ä—ã—à? –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</b> (–ø–æ –ú–°–ö)\n\n"
            f"<tg-emoji emoji-id='5413879192267805083'>üóì</tg-emoji> –°–µ–π—á–∞—Å –≤ –ú–æ—Å–∫–≤–µ: <code>{current_time}</code>"
        )
        link_preview_options = LinkPreviewOptions(show_above_text=True)

        await bot.edit_message_text(
            chat_id=callback_query.from_user.id,
            message_id=callback_query.message.message_id,
            text=message_text,
            reply_markup=keyboard.as_markup(),
            parse_mode='HTML',
            link_preview_options=link_preview_options
        )

    @dp.callback_query(lambda c: c.data == "back_to_description_and_media")
    async def back_to_description_and_media(callback_query: CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)
        await state.set_state(GiveawayStates.waiting_for_description_and_media)
        data = await state.get_data()
        description = data.get('description', '')
        media_url = data.get('media_url', '')
        media_type = data.get('media_type', '')
        keyboard = await build_navigation_keyboard(state, GiveawayStates.waiting_for_description_and_media)
        image_url = media_url if media_url else 'https://storage.yandexcloud.net/raffle/snapi/snapi_opis2.jpg'
        media_display = f"üì∏ –¢–µ–∫—É—â–µ–µ –º–µ–¥–∏–∞: {'–§–æ—Ç–æ' if media_type == 'photo' else 'GIF' if media_type == 'gif' else '–í–∏–¥–µ–æ'}." if media_url else "üì∏ –¢–µ–∫—É—â–µ–µ –º–µ–¥–∏–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
        message_text = (
            f"<a href=\"{image_url}\">\u200B</a>üñ• –¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n{description if description else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
            f"{media_display}\n\n"
            f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–º –∏–ª–∏ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –º–µ–¥–∏–∞:\n\n"
            f"{FORMATTING_GUIDE_UPDATE}"
        )
        link_preview_options = LinkPreviewOptions(show_above_text=True)

        await bot.edit_message_text(
            chat_id=callback_query.from_user.id,
            message_id=callback_query.message.message_id,
            text=message_text,
            reply_markup=keyboard.as_markup(),
            parse_mode='HTML',
            link_preview_options=link_preview_options
        )

    @dp.message(GiveawayStates.waiting_for_end_time)
    async def process_end_time(message: types.Message, state: FSMContext):
        if message.text and message.text.startswith('/'):
            return

        data = await state.get_data()
        current_time = datetime.now(pytz.timezone('Europe/Moscow')).strftime('%d.%m.%Y %H:%M')
        image_url = 'https://storage.yandexcloud.net/raffle/snapi/snapi2.jpg'
        link_preview_options = LinkPreviewOptions(show_above_text=True)

        try:
            end_time_dt = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
            moscow_tz = pytz.timezone('Europe/Moscow')
            end_time_tz = moscow_tz.localize(end_time_dt)
            if end_time_tz <= datetime.now(moscow_tz):
                raise ValueError("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!")

            await state.update_data(end_time=message.text)
            await state.set_state(GiveawayStates.waiting_for_winner_count)
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_end_time")
            keyboard.button(text="–í –º–µ–Ω—é", callback_data="back_to_main_menu")
            keyboard.adjust(1)

            message_text = f"<a href=\"{image_url}\">\u200B</a><tg-emoji emoji-id='5440539497383087970'>ü•á</tg-emoji> –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π? –ú–∞–∫—Å–∏–º—É–º {MAX_WINNERS}!"
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=data['last_message_id'],
                text=message_text,
                reply_markup=keyboard.as_markup(),
                parse_mode='HTML',
                link_preview_options=link_preview_options
            )

        except ValueError as e:
            keyboard = await build_navigation_keyboard(state, GiveawayStates.waiting_for_end_time)
            if "day is out of range for month" in str(e):
                error_msg = "‚ö†Ô∏è –î–µ–Ω—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è –º–µ—Å—è—Ü–∞"
            elif "does not match format" in str(e):
                error_msg = "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.03.2025 12:00)"
            else:
                error_msg = str(e)

            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            error_text = f"<a href=\"{image_url}\">\u200B</a>{error_msg}\nüóì –°–µ–π—á–∞—Å –≤ –ú–æ—Å–∫–≤–µ: <code>{current_time}</code>"
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=data['last_message_id'],
                text=error_text,
                reply_markup=keyboard.as_markup(),
                parse_mode='HTML',
                link_preview_options=link_preview_options
            )

    @dp.callback_query(lambda c: c.data == "next_to_winner_count")
    async def next_to_winner_count(callback_query: CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)
        await state.set_state(GiveawayStates.waiting_for_winner_count)
        data = await state.get_data()
        image_url = 'https://storage.yandexcloud.net/raffle/snapi/snapi2.jpg'
        link_preview_options = LinkPreviewOptions(show_above_text=True)

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_end_time")
        keyboard.button(text="–í –º–µ–Ω—é", callback_data="back_to_main_menu")
        keyboard.adjust(1)

        message_text = f"<a href=\"{image_url}\">\u200B</a><tg-emoji emoji-id='5440539497383087970'>ü•á</tg-emoji> –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π? –ú–∞–∫—Å–∏–º—É–º {MAX_WINNERS}!"
        await bot.edit_message_text(
            chat_id=callback_query.from_user.id,
            message_id=callback_query.message.message_id,
            text=message_text,
            reply_markup=keyboard.as_markup(),
            parse_mode='HTML',
            link_preview_options=link_preview_options
        )

    @dp.callback_query(lambda c: c.data == "back_to_end_time")
    async def back_to_end_time(callback_query: CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)
        await state.set_state(GiveawayStates.waiting_for_end_time)
        data = await state.get_data()
        end_time = data.get('end_time', '')
        keyboard = await build_navigation_keyboard(state, GiveawayStates.waiting_for_end_time)
        current_time = datetime.now(pytz.timezone('Europe/Moscow')).strftime('%d.%m.%Y %H:%M')
        image_url = 'https://storage.yandexcloud.net/raffle/snapi/snapi2.jpg'
        message_text = (
            f"<a href=\"{image_url}\">\u200B</a>–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{end_time}</b>\n\n"
            f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</b> –ø–æ –ú–°–ö\n\n"
            f"<tg-emoji emoji-id='5413879192267805083'>üóì</tg-emoji> –°–µ–π—á–∞—Å –≤ –ú–æ—Å–∫–≤–µ: <code>{current_time}</code>"
            if end_time else
            f"<a href=\"{image_url}\">\u200B</a>–ö–æ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Ä–æ–∑—ã–≥—Ä—ã—à? –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</b> (–ø–æ –ú–°–ö)\n\n"
            f"<tg-emoji emoji-id='5413879192267805083'>üóì</tg-emoji> –°–µ–π—á–∞—Å –≤ –ú–æ—Å–∫–≤–µ: <code>{current_time}</code>"
        )
        link_preview_options = LinkPreviewOptions(show_above_text=True)

        await bot.edit_message_text(
            chat_id=callback_query.from_user.id,
            message_id=callback_query.message.message_id,
            text=message_text,
            reply_markup=keyboard.as_markup(),
            parse_mode='HTML',
            link_preview_options=link_preview_options
        )

    @dp.message(GiveawayStates.waiting_for_winner_count)
    async def process_winner_count(message: types.Message, state: FSMContext):
        if message.text and message.text.startswith('/'):
            return

        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        data = await state.get_data()
        image_url = 'https://storage.yandexcloud.net/raffle/snapi/snapi2.jpg'
        link_preview_options = LinkPreviewOptions(show_above_text=True)

        try:
            winner_count = int(message.text)
            if winner_count <= 0:
                raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
            if winner_count > MAX_WINNERS:
                raise ValueError(f"–ú–∞–∫—Å–∏–º—É–º {MAX_WINNERS} –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π")

            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="–í –º–µ–Ω—é", callback_data="back_to_main_menu")

            message_text = f"<a href=\"{image_url}\">\u200B</a><tg-emoji emoji-id='5386367538735104399'>‚åõÔ∏è</tg-emoji> –°–æ–∑–¥–∞—ë–º –≤–∞—à —Ä–æ–∑—ã–≥—Ä—ã—à..."
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=data.get('last_message_id'),
                text=message_text,
                reply_markup=keyboard.as_markup(),
                parse_mode='HTML',
                link_preview_options=link_preview_options
            )

            media_url = data.get('media_url')
            media_type = data.get('media_type')

            success, giveaway_id = await save_giveaway(
                conn,
                cursor,
                message.from_user.id,
                data['name'],
                data['description'],
                data['end_time'],
                winner_count,
                media_type,
                media_url
            )

            if success:
                await display_giveaway(bot, message.chat.id, giveaway_id, conn, cursor,
                                       message_id=data.get('last_message_id'))
                await state.clear()
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à")

        except ValueError as ve:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_end_time")
            keyboard.button(text="–í –º–µ–Ω—é", callback_data="back_to_main_menu")
            keyboard.adjust(1)

            if "invalid literal for int()" in str(ve):
                error_msg = "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ! –ù–∞–ø—Ä–∏–º–µ—Ä, 1, 5 –∏–ª–∏ 10"
            else:
                error_msg = str(ve) if str(ve) else f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {MAX_WINNERS}"

            error_text = f"<a href=\"{image_url}\">\u200B</a><tg-emoji emoji-id='5447644880824181073'>‚ö†Ô∏è</tg-emoji> {error_msg}"
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=data.get('last_message_id'),
                text=error_text,
                reply_markup=keyboard.as_markup(),
                parse_mode='HTML',
                link_preview_options=link_preview_options
            )

        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="create_giveaway")
            keyboard.button(text="–í –º–µ–Ω—é", callback_data="back_to_main_menu")
            keyboard.adjust(1)
            error_message = f"<a href=\"{image_url}\">\u200B</a>‚ùå –û—à–∏–±–∫–∞: {str(e) if str(e) else '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'}"

            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=data.get('last_message_id'),
                text=error_message,
                reply_markup=keyboard.as_markup(),
                parse_mode='HTML',
                link_preview_options=link_preview_options
            )

    async def display_giveaway(bot: Bot, chat_id: int, giveaway_id: str, conn, cursor, message_id: int = None):
        try:
            cursor.execute("SELECT * FROM giveaways WHERE id = %s", (giveaway_id,))
            columns = [desc[0] for desc in cursor.description]
            giveaway = dict(zip(columns, cursor.fetchone()))
            if not giveaway:
                raise Exception("Giveaway not found in database")

            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_post:{giveaway_id}")
            keyboard.button(text="üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"preview_giveaway:{giveaway_id}")
            keyboard.button(text="üë• –ü—Ä–∏–≤—è–∑–∞—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–∞", callback_data=f"bind_communities:{giveaway_id}")
            keyboard.button(text="üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"activate_giveaway:{giveaway_id}")
            keyboard.button(text="üì© –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è", callback_data=f"add_invite_task:{giveaway_id}")
            keyboard.button(text="üéâ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º", callback_data=f"message_winners:{giveaway_id}")
            keyboard.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_giveaway:{giveaway_id}")
            keyboard.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="created_giveaways")
            keyboard.adjust(2, 2, 1, 1, 1, 1)

            description = giveaway['description']
            winner_count = str(giveaway['winner_count'])
            end_time = giveaway['end_time'].strftime('%d.%m.%Y %H:%M (–ú–°–ö)') if giveaway['end_time'] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            formatted_description = description.replace('{win}', winner_count).replace('{data}', end_time)

            media_file_id = giveaway.get('media_file_id')
            image_url = media_file_id if media_file_id else 'https://storage.yandexcloud.net/raffle/snapi/snapi2.jpg'

            giveaway_info = f"<a href=\"{image_url}\">\u200B</a>{formatted_description}"
            link_preview_options = LinkPreviewOptions(show_above_text=True)

            if message_id:
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=giveaway_info,
                    reply_markup=keyboard.as_markup(),
                    parse_mode='HTML',
                    link_preview_options=link_preview_options
                )
            else:
                await bot.send_message(
                    chat_id=chat_id,
                    text=giveaway_info,
                    reply_markup=keyboard.as_markup(),
                    parse_mode='HTML',
                    link_preview_options=link_preview_options
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {str(e)}")
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="created_giveaways")
            image_url = 'https://storage.yandexcloud.net/raffle/snapi/snapi2.jpg'
            error_text = f"<a href=\"{image_url}\">\u200B</a>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!"
            link_preview_options = LinkPreviewOptions(show_above_text=True)

            if message_id:
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=error_text,
                    reply_markup=keyboard.as_markup(),
                    parse_mode='HTML',
                    link_preview_options=link_preview_options
                )
            else:
                await bot.send_message(
                    chat_id=chat_id,
                    text=error_text,
                    reply_markup=keyboard.as_markup(),
                    parse_mode='HTML',
                    link_preview_options=link_preview_options
                )
