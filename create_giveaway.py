from aiogram import Dispatcher, Bot, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime
import pytz
import logging
import io
from utils import send_message_auto, count_length_with_custom_emoji, FORMATTING_GUIDE_INITIAL, FORMATTING_GUIDE_UPDATE, \
    generate_unique_code, MAX_MEDIA_SIZE_MB, MAX_NAME_LENGTH, MAX_CAPTION_LENGTH, MAX_DESCRIPTION_LENGTH, MAX_WINNERS, \
    s3_client, YANDEX_BUCKET_NAME, get_file_url, strip_formatting
import html
from typing import Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class GiveawayStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_description_and_media = State()
    waiting_for_end_time = State()
    waiting_for_winner_count = State()

def sanitize_html(text: str) -> str:
    text = html.escape(text, quote=False)
    safe_tags = [
        '<b>', '</b>', '<i>', '</i>', '<u>', '</u>', '<s>', '</s>',
        '<code>', '</code>', '<tg-spoiler>', '</tg-spoiler>',
        '<tg-emoji', '</tg-emoji>', '<a href="', '</a>', '<blockquote', '</blockquote>'
    ]
    for tag in safe_tags:
        text = text.replace(html.escape(tag, quote=False), tag)
    return text

async def build_navigation_keyboard(state: FSMContext, current_state: State) -> InlineKeyboardBuilder:
    data = await state.get_data()
    keyboard = InlineKeyboardBuilder()

    next_states = {
        GiveawayStates.waiting_for_name: (GiveawayStates.waiting_for_description_and_media, 'next_to_description_and_media', 'name'),
        GiveawayStates.waiting_for_end_time: (GiveawayStates.waiting_for_winner_count, 'next_to_winner_count', 'end_time'),
    }

    back_states = {
        GiveawayStates.waiting_for_description_and_media: 'back_to_name',
        GiveawayStates.waiting_for_end_time: 'back_to_description_and_media',
        GiveawayStates.waiting_for_winner_count: 'back_to_end_time',
    }

    has_next = False
    has_back = False
    has_delete = False

    if current_state == GiveawayStates.waiting_for_description_and_media and data.get('media_url'):
        keyboard.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞", callback_data="delete_media")
        has_delete = True

    if current_state in back_states:
        keyboard.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=back_states[current_state])
        has_back = True

    if current_state == GiveawayStates.waiting_for_description_and_media:
        description = data.get('description', '')
        if description.strip():
            keyboard.button(text="–î–∞–ª–µ–µ ‚ñ∂Ô∏è", callback_data="next_to_end_time")
            has_next = True
    elif current_state in next_states:
        next_state, callback, required_field = next_states[current_state]
        if required_field in data and data[required_field]:
            keyboard.button(text="–î–∞–ª–µ–µ ‚ñ∂Ô∏è", callback_data=callback)
            has_next = True

    keyboard.button(text="–í –º–µ–Ω—é", callback_data="back_to_main_menu")

    if has_delete:
        if has_back and has_next:
            keyboard.adjust(1, 2, 1)
        elif has_back or has_next:
            keyboard.adjust(1, 1, 1)
        else:
            keyboard.adjust(1, 1)
    else:
        if has_back and has_next:
            keyboard.adjust(2, 1)
        else:
            keyboard.adjust(1, 1)

    logger.info(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è {current_state.state}: has_next={has_next}, has_back={has_back}, has_delete={has_delete}, description={data.get('description')}, media_url={data.get('media_url')}")
    return keyboard

async def upload_to_storage(file_content: bytes, filename: str) -> tuple[bool, str]:
    try:
        file_size_mb = len(file_content) / (1024 * 1024)
        if file_size_mb > MAX_MEDIA_SIZE_MB:
            return False, f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –ú–∞–∫—Å–∏–º—É–º: {MAX_MEDIA_SIZE_MB} –ú–ë"

        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        unique_filename = f"{timestamp}_{filename}"

        s3_client.put_object(
            Bucket=YANDEX_BUCKET_NAME,
            Key=unique_filename,
            Body=io.BytesIO(file_content),
            ContentType="application/octet-stream"
        )
        public_url = f"https://{YANDEX_BUCKET_NAME}.storage.yandexcloud.net/{unique_filename}"
        logger.info(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {unique_filename}")
        return True, public_url
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        return False, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}"

async def save_giveaway(conn, cursor, user_id: int, name: str, description: str, end_time: str,
                        winner_count: int, media_type: str = None, media_file_id: str = None):
    moscow_tz = pytz.timezone('Europe/Moscow')
    end_time_dt = datetime.strptime(end_time, "%d.%m.%Y %H:%M")
    end_time_tz = moscow_tz.localize(end_time_dt)

    try:
        giveaway_id = generate_unique_code(cursor)

        cursor.execute(
            """
            INSERT INTO giveaways (id, user_id, name, description, end_time, winner_count, is_active, media_type, media_file_id)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
            """,
            (giveaway_id, user_id, name, description, end_time_tz, winner_count, False, media_type, media_file_id)
        )

        default_congrats_message = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ \"{name}\""
        for place in range(1, winner_count + 1):
            cursor.execute(
                """
                INSERT INTO congratulations (giveaway_id, place, message)
                VALUES (%s, %s, %s)
                """,
                (giveaway_id, place, default_congrats_message)
            )

        conn.commit()
        return True, giveaway_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
        conn.rollback()
        return False, None

def register_create_giveaway_handlers(dp: Dispatcher, bot: Bot, conn, cursor):
    @dp.callback_query(lambda c: c.data == 'create_giveaway')
    async def process_create_giveaway(callback_query: CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)
        message_text = f"<tg-emoji emoji-id='5395444784611480792'>‚úèÔ∏è</tg-emoji> –î–∞–≤–∞–π—Ç–µ –ø—Ä–∏–¥—É–º–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–¥–æ {MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):"
        image_url = 'https://storage.yandexcloud.net/raffle/snapi/snapi_name2.jpg'
        data = await state.get_data() if state else {}
        previous_message_length = data.get('previous_message_length', 'short')

        await state.update_data(
            user_messages=[],
            current_message_parts=[],
            limit_exceeded=False,
            last_message_time=None,
            last_message_id=callback_query.message.message_id,
            previous_message_length=previous_message_length
        )
        await state.set_state(GiveawayStates.waiting_for_name)
        keyboard = await build_navigation_keyboard(state, GiveawayStates.waiting_for_name)

        sent_message = await send_message_auto(
            bot,
            chat_id=callback_query.from_user.id,
            text=message_text,
            reply_markup=keyboard.as_markup(),
            message_id=callback_query.message.message_id,
            parse_mode='HTML',
            image_url=image_url,
            media_type=None,
            previous_message_length=previous_message_length
        )
        if sent_message:
            await state.update_data(
                last_message_id=sent_message.message_id,
                previous_message_length=previous_message_length
            )

    @dp.message(GiveawayStates.waiting_for_name)
    async def process_name(message: types.Message, state: FSMContext):
        global previous_message_length
        if message.text and message.text.startswith('/'):
            return

        data = await state.get_data()
        last_message_id = data.get('last_message_id')
        user_messages = data.get('user_messages', [])
        limit_exceeded = data.get('limit_exceeded', False)
        current_message_parts = data.get('current_message_parts', [])
        last_message_time = data.get('last_message_time')
        new_text = message.html_text if message.text else ""

        # –¢–µ–∫—É—â–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
        current_time = datetime.now().timestamp()
        image_url = 'https://storage.yandexcloud.net/raffle/snapi/snapi_name2.jpg'

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = await build_navigation_keyboard(state, GiveawayStates.waiting_for_name)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—å—é –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏–Ω—Ç–µ—Ä–≤–∞–ª 2 —Å–µ–∫—É–Ω–¥—ã)
        if last_message_time is not None and (current_time - last_message_time) <= 2:
            current_message_parts.append(new_text)
            await state.update_data(
                current_message_parts=current_message_parts,
                last_message_time=current_time,
                user_messages=user_messages,
                limit_exceeded=limit_exceeded
            )
            return  # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â—É—é —á–∞—Å—Ç—å, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∏—á–µ–≥–æ

        # –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –±–æ–ª—å—à–µ 2 —Å–µ–∫—É–Ω–¥ –∏–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–∏
        if current_message_parts:
            combined_message = "".join(current_message_parts)
            if combined_message:
                user_messages.append(combined_message)
            current_message_parts = [new_text]
        else:
            current_message_parts = [new_text]

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            current_message_parts=current_message_parts,
            last_message_time=current_time,
            user_messages=user_messages,
            limit_exceeded=limit_exceeded
        )

        # –ü–æ–¥—Å—á–µ—Ç –¥–ª–∏–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        combined_current_message = "".join(current_message_parts)
        current_length = count_length_with_custom_emoji(combined_current_message)

        # –ï—Å–ª–∏ –ª–∏–º–∏—Ç –±—ã–ª –ø—Ä–µ–≤—ã—à–µ–Ω —Ä–∞–Ω–µ–µ
        if limit_exceeded:
            if 0 < current_length <= MAX_NAME_LENGTH and current_length <= MAX_CAPTION_LENGTH:
                try:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    text_to_save = strip_formatting(combined_current_message)
                    await state.update_data(
                        name=text_to_save,
                        user_messages=[],
                        current_message_parts=[],
                        limit_exceeded=False,
                        last_message_time=None
                    )
                    await state.set_state(GiveawayStates.waiting_for_description_and_media)

                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    try:
                        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                    except Exception as delete_error:
                        logger.warning(
                            f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.message_id}: {str(delete_error)}")

                    keyboard = await build_navigation_keyboard(state, GiveawayStates.waiting_for_description_and_media)
                    message_text = FORMATTING_GUIDE_INITIAL
                    previous_message_length = data.get('previous_message_length', 'short')
                    sent_message = await send_message_auto(
                        bot=bot,
                        chat_id=message.chat.id,
                        text=message_text,
                        reply_markup=keyboard.as_markup(),
                        message_id=last_message_id,
                        parse_mode='HTML',
                        image_url='https://storage.yandexcloud.net/raffle/snapi/snapi_opis2.jpg',
                        media_type=None,
                        previous_message_length=previous_message_length
                    )
                    if sent_message:
                        await state.update_data(
                            last_message_id=sent_message.message_id,
                            previous_message_length=previous_message_length
                        )
                except Exception as save_error:
                    logger.error(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏: {str(save_error)}")
                    try:
                        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                    except Exception as delete_error:
                        logger.warning(
                            f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.message_id}: {str(delete_error)}")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
                    error_text = "<tg-emoji emoji-id='5210952531676504517'>‚ùå</tg-emoji> –û–π –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ üòî"
                    sent_message = await send_message_auto(
                        bot=bot,
                        chat_id=message.chat.id,
                        text=error_text,
                        reply_markup=keyboard.as_markup(),
                        message_id=None,
                        parse_mode='HTML',
                        image_url=image_url,
                        media_type=None,
                        previous_message_length=previous_message_length
                    )
                    if sent_message:
                        await state.update_data(
                            last_message_id=sent_message.message_id,
                            previous_message_length=previous_message_length
                        )
            else:
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if last_message_id:
                    try:
                        await bot.delete_message(chat_id=message.chat.id, message_id=last_message_id)
                    except Exception as delete_error:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {last_message_id}: {str(delete_error)}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–æ–π
                error_message = (
                    f"<tg-emoji emoji-id='5447644880824181073'>‚ö†Ô∏è</tg-emoji> –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ {MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.\n–¢–µ–∫—É—â–µ–µ: {current_length}\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
                    if current_length > MAX_NAME_LENGTH or not combined_current_message
                    else f"<tg-emoji emoji-id='5447644880824181073'>‚ö†Ô∏è</tg-emoji> –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram ({MAX_CAPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤).\n–¢–µ–∫—É—â–µ–µ: {current_length}\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
                )
                previous_message_length = data.get('previous_message_length', 'short')
                sent_message = await send_message_auto(
                    bot=bot,
                    chat_id=message.chat.id,
                    text=error_message,
                    reply_markup=keyboard.as_markup(),
                    message_id=None,
                    parse_mode='HTML',
                    image_url=image_url,
                    media_type=None,
                    previous_message_length=previous_message_length
                )
                if sent_message:
                    await state.update_data(
                        last_message_id=sent_message.message_id,
                        previous_message_length=previous_message_length,
                        limit_exceeded=True,
                        last_message_time=current_time
                    )
            return

        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–π –¥–ª–∏–Ω—ã –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        total_length = sum(count_length_with_custom_emoji(msg) for msg in user_messages if msg)
        total_length += current_length

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
        if total_length > MAX_NAME_LENGTH or not combined_current_message or total_length > MAX_CAPTION_LENGTH:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if last_message_id:
                try:
                    await bot.delete_message(chat_id=message.chat.id, message_id=last_message_id)
                except Exception as delete_error:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {last_message_id}: {str(delete_error)}")

            await state.update_data(
                user_messages=user_messages,
                current_message_parts=current_message_parts,
                limit_exceeded=True,
                last_message_id=None,
                last_message_time=current_time
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–æ–π
            error_message = (
                f"<tg-emoji emoji-id='5447644880824181073'>‚ö†Ô∏è</tg-emoji> –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç ({MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤).\n–û–±—â–∞—è –¥–ª–∏–Ω–∞: {total_length}\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
                if total_length > MAX_NAME_LENGTH or not combined_current_message
                else f"<tg-emoji emoji-id='5447644880824181073'>‚ö†Ô∏è</tg-emoji> –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram ({MAX_CAPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤).\n–û–±—â–∞—è –¥–ª–∏–Ω–∞: {total_length}\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
            )
            previous_message_length = data.get('previous_message_length', 'short')
            sent_message = await send_message_auto(
                bot=bot,
                chat_id=message.chat.id,
                text=error_message,
                reply_markup=keyboard.as_markup(),
                message_id=None,
                parse_mode='HTML',
                image_url=image_url,
                media_type=None,
                previous_message_length=previous_message_length
            )
            if sent_message:
                await state.update_data(
                    last_message_id=sent_message.message_id,
                    previous_message_length=previous_message_length
                )
            return

        # –ï—Å–ª–∏ –ª–∏–º–∏—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            text_to_save = strip_formatting(combined_current_message)
            await state.update_data(
                name=text_to_save,
                user_messages=[],
                current_message_parts=[],
                last_message_time=None
            )
            await state.set_state(GiveawayStates.waiting_for_description_and_media)

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            except Exception as delete_error:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.message_id}: {str(delete_error)}")

            keyboard = await build_navigation_keyboard(state, GiveawayStates.waiting_for_description_and_media)
            message_text = FORMATTING_GUIDE_INITIAL
            previous_message_length = data.get('previous_message_length', 'short')
            sent_message = await send_message_auto(
                bot=bot,
                chat_id=message.chat.id,
                text=message_text,
                reply_markup=keyboard.as_markup(),
                message_id=last_message_id,
                parse_mode='HTML',
                image_url='https://storage.yandexcloud.net/raffle/snapi/snapi_opis2.jpg',
                media_type=None,
                previous_message_length=previous_message_length
            )
            if sent_message:
                await state.update_data(
                    last_message_id=sent_message.message_id,
                    previous_message_length=previous_message_length
                )
        except Exception as save_error:
            logger.error(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏: {str(save_error)}")
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            except Exception as delete_error:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.message_id}: {str(delete_error)}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
            error_text = "<tg-emoji emoji-id='5210952531676504517'>‚ùå</tg-emoji> –û–π –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ üòî"
            sent_message = await send_message_auto(
                bot=bot,
                chat_id=message.chat.id,
                text=error_text,
                reply_markup=keyboard.as_markup(),
                message_id=None,
                parse_mode='HTML',
                image_url=image_url,
                media_type=None,
                previous_message_length=previous_message_length
            )
            if sent_message:
                await state.update_data(
                    last_message_id=sent_message.message_id,
                    previous_message_length=previous_message_length
                )

    @dp.message(GiveawayStates.waiting_for_description_and_media)
    async def process_description_and_media(message: types.Message, state: FSMContext):
        if message.text and message.text.startswith('/'):
            return

        data = await state.get_data()
        last_message_id = data.get('last_message_id')
        user_messages = data.get('user_messages', [])
        limit_exceeded = data.get('limit_exceeded', False)
        current_message_parts = data.get('current_message_parts', [])
        last_message_time = data.get('last_message_time')
        placeholder_url = 'https://storage.yandexcloud.net/raffle/snapi/snapi_opis2.jpg'

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        formatted_text = None
        if message.text:
            formatted_text = sanitize_html(message.html_text)
        elif message.caption:
            formatted_text = sanitize_html(message.html_text)

        # –¢–µ–∫—É—â–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
        current_time = datetime.now().timestamp()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—å—é –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏–Ω—Ç–µ—Ä–≤–∞–ª 2 —Å–µ–∫—É–Ω–¥—ã)
        if formatted_text and last_message_time is not None and (current_time - last_message_time) <= 2:
            current_message_parts.append(formatted_text)
            await state.update_data(
                current_message_parts=current_message_parts,
                last_message_time=current_time,
                user_messages=user_messages,
                limit_exceeded=limit_exceeded
            )
            # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –∏–Ω–∞—á–µ –∂–¥–µ–º —Å–ª–µ–¥—É—é—â—É—é —á–∞—Å—Ç—å
            if not (message.photo or message.animation or message.video):
                return  # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â—É—é —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∏—á–µ–≥–æ

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
        combined_current_message = ""
        if formatted_text:
            if current_message_parts:
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏ –∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
                current_message_parts.append(formatted_text)
                combined_current_message = "".join(current_message_parts)
                current_message_parts = []  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            else:
                combined_current_message = formatted_text
        elif current_message_parts:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
            combined_current_message = "".join(current_message_parts)
            current_message_parts = []

        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        if combined_current_message:
            user_messages = [combined_current_message]  # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º
        else:
            user_messages = []

        # –ü–æ–¥—Å—á–µ—Ç –¥–ª–∏–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        current_length = count_length_with_custom_emoji(combined_current_message) if combined_current_message else 0

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            current_message_parts=current_message_parts,
            last_message_time=current_time,
            user_messages=user_messages,
            limit_exceeded=limit_exceeded
        )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞
        file_id = None
        file_ext = None
        media_type = None
        if message.photo:
            file_id = message.photo[-1].file_id
            media_type = 'photo'
            file_ext = 'jpg'
        elif message.animation:
            file_id = message.animation.file_id
            media_type = 'gif'
            file_ext = 'mp4'
        elif message.video:
            file_id = message.video.file_id
            media_type = 'video'
            file_ext = 'mp4'

        # –ï—Å–ª–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∏ —Ç–µ–∫—Å—Ç–∞, –Ω–∏ –º–µ–¥–∏–∞
        if not formatted_text and not (message.photo or message.animation or message.video):
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            except Exception as delete_error:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.message_id}: {str(delete_error)}")
            error_text = (
                f"<tg-emoji emoji-id='5447644880824181073'>‚ö†Ô∏è</tg-emoji> –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –º–µ–¥–∏–∞ –∏–ª–∏ –∏ —Ç–æ, –∏ –¥—Ä—É–≥–æ–µ\n\n"
                f"{FORMATTING_GUIDE_UPDATE}"
            )
            keyboard = await build_navigation_keyboard(state, GiveawayStates.waiting_for_description_and_media)
            previous_message_length = data.get('previous_message_length', 'short')
            sent_message = await send_message_auto(
                bot=bot,
                chat_id=message.chat.id,
                text=error_text,
                reply_markup=keyboard.as_markup(),
                message_id=last_message_id,
                parse_mode='HTML',
                image_url=data.get('media_url', placeholder_url),
                media_type=None,
                previous_message_length=previous_message_length
            )
            if sent_message:
                await state.update_data(
                    last_message_id=sent_message.message_id,
                    previous_message_length=previous_message_length
                )
            return

        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–π –¥–ª–∏–Ω—ã –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        total_length = sum(count_length_with_custom_emoji(msg) for msg in user_messages if msg)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        if formatted_text and (
                total_length > MAX_DESCRIPTION_LENGTH or not combined_current_message or total_length > MAX_CAPTION_LENGTH):
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if last_message_id:
                try:
                    await bot.delete_message(chat_id=message.chat.id, message_id=last_message_id)
                except Exception as delete_error:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {last_message_id}: {str(delete_error)}")

            await state.update_data(
                user_messages=user_messages,
                current_message_parts=[],
                limit_exceeded=True,
                last_message_id=None,
                last_message_time=current_time
            )

            error_message = (
                f"<tg-emoji emoji-id='5447644880824181073'>‚ö†Ô∏è</tg-emoji> –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç ({MAX_DESCRIPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤).\n–û–±—â–∞—è –¥–ª–∏–Ω–∞: {total_length}\n\n{FORMATTING_GUIDE_UPDATE}"
                if total_length > MAX_DESCRIPTION_LENGTH or not combined_current_message
                else f"<tg-emoji emoji-id='5447644880824181073'>‚ö†Ô∏è</tg-emoji> –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram ({MAX_CAPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤).\n–û–±—â–∞—è –¥–ª–∏–Ω–∞: {total_length}\n\n{FORMATTING_GUIDE_UPDATE}"
            )
            keyboard = await build_navigation_keyboard(state, GiveawayStates.waiting_for_description_and_media)
            previous_message_length = data.get('previous_message_length', 'short')
            sent_message = await send_message_auto(
                bot=bot,
                chat_id=message.chat.id,
                text=error_message,
                reply_markup=keyboard.as_markup(),
                message_id=None,
                parse_mode='HTML',
                image_url=data.get('media_url', placeholder_url),
                media_type=None,
                previous_message_length=previous_message_length
            )
            if sent_message:
                await state.update_data(
                    last_message_id=sent_message.message_id,
                    previous_message_length=previous_message_length
                )
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            except Exception as delete_error:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.message_id}: {str(delete_error)}")
            return

        if formatted_text and total_length <= MAX_DESCRIPTION_LENGTH and total_length <= MAX_CAPTION_LENGTH:
            try:
                await state.update_data(
                    description=combined_current_message,
                    user_messages=[],
                    current_message_parts=[],
                    limit_exceeded=False,
                    last_message_time=None
                )
            except Exception as save_error:
                logger.error(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è: {str(save_error)}")
                try:
                    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                except Exception as delete_error:
                    logger.warning(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.message_id}: {str(delete_error)}")
                error_text = "<tg-emoji emoji-id='5210952531676504517'>‚ùå</tg-emoji> –û–π –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ üòî"
                keyboard = await build_navigation_keyboard(state, GiveawayStates.waiting_for_description_and_media)
                previous_message_length = data.get('previous_message_length', 'short')
                sent_message = await send_message_auto(
                    bot=bot,
                    chat_id=message.chat.id,
                    text=error_text,
                    reply_markup=keyboard.as_markup(),
                    message_id=last_message_id,
                    parse_mode='HTML',
                    image_url=data.get('media_url', placeholder_url),
                    media_type=None,
                    previous_message_length=previous_message_length
                )
                if sent_message:
                    await state.update_data(
                        last_message_id=sent_message.message_id,
                        previous_message_length=previous_message_length
                    )
                return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞
        if file_id and file_ext:
            try:
                file = await bot.get_file(file_id)
                if file.file_size / (1024 * 1024) > MAX_MEDIA_SIZE_MB:
                    try:
                        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                    except Exception as delete_error:
                        logger.warning(
                            f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.message_id}: {str(delete_error)}")
                    error_text = (
                        f"<tg-emoji emoji-id='5197564405650307134'>ü§Ø</tg-emoji> –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –ú–∞–∫—Å–∏–º—É–º {MAX_MEDIA_SIZE_MB} –ú–ë\n\n"
                        f"{FORMATTING_GUIDE_UPDATE}"
                    )
                    keyboard = await build_navigation_keyboard(state, GiveawayStates.waiting_for_description_and_media)
                    previous_message_length = data.get('previous_message_length', 'short')
                    sent_message = await send_message_auto(
                        bot=bot,
                        chat_id=message.chat.id,
                        text=error_text,
                        reply_markup=keyboard.as_markup(),
                        message_id=last_message_id,
                        parse_mode='HTML',
                        image_url=placeholder_url,
                        media_type=None,
                        previous_message_length=previous_message_length
                    )
                    if sent_message:
                        await state.update_data(
                            last_message_id=sent_message.message_id,
                            previous_message_length=previous_message_length
                        )
                    return

                file_content = await bot.download_file(file.file_path)
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                filename = f"{timestamp}_{message.message_id}.{file_ext}"
                success, media_url = await upload_to_storage(file_content.read(), filename)

                if not success:
                    try:
                        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                    except Exception as delete_error:
                        logger.warning(
                            f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.message_id}: {str(delete_error)}")
                    error_text = (
                        f"<tg-emoji emoji-id='5210952531676504517'>‚ùå</tg-emoji> –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞: {media_url}\n\n"
                        f"{FORMATTING_GUIDE_UPDATE}"
                    )
                    keyboard = await build_navigation_keyboard(state, GiveawayStates.waiting_for_description_and_media)
                    previous_message_length = data.get('previous_message_length', 'short')
                    sent_message = await send_message_auto(
                        bot=bot,
                        chat_id=message.chat.id,
                        text=error_text,
                        reply_markup=keyboard.as_markup(),
                        message_id=last_message_id,
                        parse_mode='HTML',
                        image_url=placeholder_url,
                        media_type=None,
                        previous_message_length=previous_message_length
                    )
                    if sent_message:
                        await state.update_data(
                            last_message_id=sent_message.message_id,
                            previous_message_length=previous_message_length
                        )
                    return

                await state.update_data(media_url=media_url, media_type=media_type)
            except Exception as media_error:
                logger.error(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞: {str(media_error)}")
                try:
                    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                except Exception as delete_error:
                    logger.warning(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.message_id}: {str(delete_error)}")
                error_text = (
                    f"<tg-emoji emoji-id='5210952531676504517'>‚ùå</tg-emoji> –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞: {str(media_error)}\n\n"
                    f"{FORMATTING_GUIDE_UPDATE}"
                )
                keyboard = await build_navigation_keyboard(state, GiveawayStates.waiting_for_description_and_media)
                previous_message_length = data.get('previous_message_length', 'short')
                sent_message = await send_message_auto(
                    bot=bot,
                    chat_id=message.chat.id,
                    text=error_text,
                    reply_markup=keyboard.as_markup(),
                    message_id=last_message_id,
                    parse_mode='HTML',
                    image_url=placeholder_url,
                    media_type=None,
                    previous_message_length=previous_message_length
                )
                if sent_message:
                    await state.update_data(
                        last_message_id=sent_message.message_id,
                        previous_message_length=previous_message_length
                    )
                return

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        except Exception as delete_error:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.message_id}: {str(delete_error)}")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            user_messages=[],
            current_message_parts=[],
            last_message_time=None
        )

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        data = await state.get_data()
        description = data.get('description', '')
        media_url = data.get('media_url', '')
        media_type = data.get('media_type', '')
        image_url = media_url if media_url else placeholder_url
        media_display = (
            f"üì∏ –¢–µ–∫—É—â–µ–µ –º–µ–¥–∏–∞: {'–§–æ—Ç–æ' if media_type == 'photo' else 'GIF' if media_type == 'gif' else '–í–∏–¥–µ–æ'}."
            if media_url else "üì∏ –¢–µ–∫—É—â–µ–µ –º–µ–¥–∏–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
        )
        message_text = (
            f"<tg-emoji emoji-id='5395444784611480792'>‚úèÔ∏è</tg-emoji> –¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n{description if description else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
            f"{media_display}\n\n"
            f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞\n\n"
            f"{FORMATTING_GUIDE_UPDATE if description else FORMATTING_GUIDE_INITIAL}"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        keyboard = await build_navigation_keyboard(state, GiveawayStates.waiting_for_description_and_media)
        previous_message_length = data.get('previous_message_length', 'short')

        logger.info(f"–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è: description={description}, media_url={media_url}")

        sent_message = await send_message_auto(
            bot=bot,
            chat_id=message.chat.id,
            text=message_text,
            reply_markup=keyboard.as_markup(),
            message_id=last_message_id,
            parse_mode='HTML',
            image_url=image_url,
            media_type=media_type,
            previous_message_length=previous_message_length
        )
        if sent_message:
            await state.update_data(
                last_message_id=sent_message.message_id,
                previous_message_length=previous_message_length
            )

    @dp.callback_query(lambda c: c.data == "next_to_description_and_media")
    async def next_to_description_and_media(callback_query: CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞, –∫–∞–∫ –≤ process_description_and_media
        await state.update_data(
            user_messages=[],
            current_message_parts=[],
            limit_exceeded=False,
            last_message_time=None
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∏ –º–µ–¥–∏–∞
        await state.set_state(GiveawayStates.waiting_for_description_and_media)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        description = data.get('description', '')
        media_url = data.get('media_url', '')
        media_type = data.get('media_type', '')

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = await build_navigation_keyboard(state, GiveawayStates.waiting_for_description_and_media)

        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–¥–∏–∞
        image_url = media_url if media_url else 'https://storage.yandexcloud.net/raffle/snapi/snapi_opis2.jpg'
        media_display = (
            f"üì∏ –¢–µ–∫—É—â–µ–µ –º–µ–¥–∏–∞: {'–§–æ—Ç–æ' if media_type == 'photo' else 'GIF' if media_type == 'gif' else '–í–∏–¥–µ–æ'}."
            if media_url else "üì∏ –¢–µ–∫—É—â–µ–µ –º–µ–¥–∏–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
        )

        message_text = (
            f"<tg-emoji emoji-id='5395444784611480792'>‚úèÔ∏è</tg-emoji> –¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n{description if description else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
            f"{media_display}\n\n"
            f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞\n"
            f"{FORMATTING_GUIDE_UPDATE if description else FORMATTING_GUIDE_INITIAL}"
        )

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        previous_message_length = data.get('previous_message_length', 'short')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º send_message_auto
        sent_message = await send_message_auto(
            bot=bot,
            chat_id=callback_query.from_user.id,
            text=message_text,
            reply_markup=keyboard.as_markup(),
            message_id=callback_query.message.message_id,
            parse_mode='HTML',
            image_url=image_url,
            media_type=media_type,
            previous_message_length=previous_message_length
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if sent_message:
            await state.update_data(
                last_message_id=sent_message.message_id,
                previous_message_length=previous_message_length
            )

    @dp.callback_query(lambda c: c.data == "delete_media")
    async def delete_media(callback_query: CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)
        await state.update_data(media_url=None, media_type=None)
        data = await state.get_data()
        keyboard = await build_navigation_keyboard(state, GiveawayStates.waiting_for_description_and_media)
        description = data.get('description', '')
        placeholder_url = 'https://storage.yandexcloud.net/raffle/snapi/snapi_opis2.jpg'
        message_text = (
            f"üì∏ –¢–µ–∫—É—â–µ–µ –º–µ–¥–∏–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.\n"
            f"<tg-emoji emoji-id='5395444784611480792'>‚úèÔ∏è</tg-emoji> –¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n{description if description else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
            f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–º –∏–ª–∏ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –º–µ–¥–∏–∞\n\n"
            f"{FORMATTING_GUIDE_UPDATE}"
        )
        previous_message_length = data.get('previous_message_length', 'short')

        sent_message = await send_message_auto(
            bot,
            chat_id=callback_query.from_user.id,
            text=message_text,
            reply_markup=keyboard.as_markup(),
            message_id=callback_query.message.message_id,
            parse_mode='HTML',
            image_url=placeholder_url,
            media_type=None,
            previous_message_length=previous_message_length
        )
        if sent_message:
            await state.update_data(
                last_message_id=sent_message.message_id,
                previous_message_length=previous_message_length
            )

    @dp.callback_query(lambda c: c.data == "back_to_name")
    async def back_to_name(callback_query: CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)
        await state.update_data(
            user_messages=[],
            current_message_parts=[],
            limit_exceeded=False,
            last_message_time=None
        )
        await state.set_state(GiveawayStates.waiting_for_name)
        data = await state.get_data()
        name = data.get('name', '')
        keyboard = await build_navigation_keyboard(state, GiveawayStates.waiting_for_name)
        image_url = 'https://storage.yandexcloud.net/raffle/snapi/snapi_name2.jpg'
        message_text = f"<tg-emoji emoji-id='5395444784611480792'>‚úèÔ∏è</tg-emoji> –¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {name if name else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:"
        previous_message_length = data.get('previous_message_length', 'short')

        sent_message = await send_message_auto(
            bot,
            chat_id=callback_query.from_user.id,
            text=message_text,
            reply_markup=keyboard.as_markup(),
            message_id=callback_query.message.message_id,
            parse_mode='HTML',
            image_url=image_url,
            media_type=None,
            previous_message_length=previous_message_length
        )
        if sent_message:
            await state.update_data(
                last_message_id=sent_message.message_id,
                previous_message_length=previous_message_length
            )

    @dp.callback_query(lambda c: c.data == "next_to_end_time")
    async def next_to_end_time(callback_query: CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)
        await state.set_state(GiveawayStates.waiting_for_end_time)
        data = await state.get_data()
        end_time = data.get('end_time', '')
        keyboard = await build_navigation_keyboard(state, GiveawayStates.waiting_for_end_time)
        current_time = datetime.now(pytz.timezone('Europe/Moscow')).strftime('%d.%m.%Y %H:%M')
        image_url = 'https://storage.yandexcloud.net/raffle/snapi/snapi2.jpg'
        message_text = (
            f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{end_time}</b>\n\n"
            f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</b> –ø–æ –ú–°–ö\n\n"
            f"<tg-emoji emoji-id='5413879192267805083'>üóì</tg-emoji> –°–µ–π—á–∞—Å –≤ –ú–æ—Å–∫–≤–µ: <code>{current_time}</code>"
            if end_time else
            f"–ö–æ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Ä–æ–∑—ã–≥—Ä—ã—à? –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</b> (–ø–æ –ú–°–ö)\n\n"
            f"<tg-emoji emoji-id='5413879192267805083'>üóì</tg-emoji> –°–µ–π—á–∞—Å –≤ –ú–æ—Å–∫–≤–µ: <code>{current_time}</code>"
        )
        previous_message_length = data.get('previous_message_length', 'short')

        sent_message = await send_message_auto(
            bot,
            chat_id=callback_query.from_user.id,
            text=message_text,
            reply_markup=keyboard.as_markup(),
            message_id=callback_query.message.message_id,
            parse_mode='HTML',
            image_url=image_url,
            media_type=None,
            previous_message_length=previous_message_length
        )
        if sent_message:
            await state.update_data(
                last_message_id=sent_message.message_id,
                previous_message_length=previous_message_length
            )

    @dp.callback_query(lambda c: c.data == "back_to_description_and_media")
    async def back_to_description_and_media(callback_query: CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)
        await state.update_data(
            user_messages=[],
            current_message_parts=[],
            limit_exceeded=False,
            last_message_time=None
        )
        await state.set_state(GiveawayStates.waiting_for_description_and_media)
        data = await state.get_data()
        description = data.get('description', '')
        media_url = data.get('media_url', '')
        media_type = data.get('media_type', '')
        keyboard = await build_navigation_keyboard(state, GiveawayStates.waiting_for_description_and_media)
        image_url = media_url if media_url else 'https://storage.yandexcloud.net/raffle/snapi/snapi_opis2.jpg'
        media_display = (
            f"üì∏ –¢–µ–∫—É—â–µ–µ –º–µ–¥–∏–∞: {'–§–æ—Ç–æ' if media_type == 'photo' else 'GIF' if media_type == 'gif' else '–í–∏–¥–µ–æ'}."
            if media_url else "üì∏ –¢–µ–∫—É—â–µ–µ –º–µ–¥–∏–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
        )
        message_text = (
            f"<tg-emoji emoji-id='5395444784611480792'>‚úèÔ∏è</tg-emoji> –¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n{description if description else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
            f"{media_display}\n"
            f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞\n"
            f"{FORMATTING_GUIDE_UPDATE if description else FORMATTING_GUIDE_INITIAL}"
        )
        previous_message_length = data.get('previous_message_length', 'short')
        sent_message = await send_message_auto(
            bot=bot,
            chat_id=callback_query.from_user.id,
            text=message_text,
            reply_markup=keyboard.as_markup(),
            message_id=callback_query.message.message_id,
            parse_mode='HTML',
            image_url=image_url,
            media_type=media_type,
            previous_message_length=previous_message_length
        )
        if sent_message:
            await state.update_data(
                last_message_id=sent_message.message_id,
                previous_message_length=previous_message_length
            )

    @dp.message(GiveawayStates.waiting_for_end_time)
    async def process_end_time(message: types.Message, state: FSMContext):
        global previous_message_length
        if message.text and message.text.startswith('/'):
            return

        data = await state.get_data()
        last_message_id = data.get('last_message_id')
        current_time = datetime.now(pytz.timezone('Europe/Moscow')).strftime('%d.%m.%Y %H:%M')
        image_url = 'https://storage.yandexcloud.net/raffle/snapi/snapi2.jpg'

        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.message_id}: {str(e)}")

        try:
            end_time_dt = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
            moscow_tz = pytz.timezone('Europe/Moscow')
            end_time_tz = moscow_tz.localize(end_time_dt)
            if end_time_tz <= datetime.now(moscow_tz):
                raise ValueError("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")

            await state.update_data(end_time=message.text)
            await state.set_state(GiveawayStates.waiting_for_winner_count)

            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_end_time")
            keyboard.button(text="–í –º–µ–Ω—é", callback_data="back_to_main_menu")
            keyboard.adjust(1)

            message_text = f"<tg-emoji emoji-id='5440539497383087970'>ü•á</tg-emoji> –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π? –ú–∞–∫—Å–∏–º—É–º {MAX_WINNERS}"
            previous_message_length = data.get('previous_message_length', 'short')
            sent_message = await send_message_auto(
                bot,
                chat_id=message.chat.id,
                text=message_text,
                reply_markup=keyboard.as_markup(),
                message_id=last_message_id,
                parse_mode='HTML',
                image_url=image_url,
                media_type=None,
                previous_message_length=previous_message_length
            )
            if sent_message:
                await state.update_data(
                    last_message_id=sent_message.message_id,
                    previous_message_length=previous_message_length
                )

        except ValueError as e:
            keyboard = await build_navigation_keyboard(state, GiveawayStates.waiting_for_end_time)
            if "day is out of range for month" in str(e):
                error_msg = "‚ö†Ô∏è –î–µ–Ω—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è –º–µ—Å—è—Ü–∞\n"
            elif "does not match format" in str(e):
                error_msg = "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.03.2025 12:00)\n"
            else:
                error_msg = str(e)

            error_text = f"{error_msg}\nüóì –°–µ–π—á–∞—Å –≤ –ú–æ—Å–∫–≤–µ: <code>{current_time}</code>"
            current_message_type = 'photo' if count_length_with_custom_emoji(error_text) <= 800 else 'image'
            sent_message = await send_message_auto(
                bot,
                chat_id=message.chat.id,
                text=error_text,
                reply_markup=keyboard.as_markup(),
                message_id=last_message_id,
                parse_mode='HTML',
                image_url=image_url,
                media_type=None,
                previous_message_length=previous_message_length
            )
            if sent_message:
                await state.update_data(
                    last_message_id=sent_message.message_id,
                    previous_message_length=previous_message_length
                )

    @dp.callback_query(lambda c: c.data == "next_to_winner_count")
    async def next_to_winner_count(callback_query: CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)
        await state.set_state(GiveawayStates.waiting_for_winner_count)
        data = await state.get_data()
        image_url = 'https://storage.yandexcloud.net/raffle/snapi/snapi2.jpg'

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_end_time")
        keyboard.button(text="–í –º–µ–Ω—é", callback_data="back_to_main_menu")
        keyboard.adjust(1)

        message_text = f"<tg-emoji emoji-id='5440539497383087970'>ü•á</tg-emoji> –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π? –ú–∞–∫—Å–∏–º—É–º {MAX_WINNERS}"
        previous_message_length = data.get('previous_message_length', 'short')
        sent_message = await send_message_auto(
            bot,
            chat_id=callback_query.from_user.id,
            text=message_text,
            reply_markup=keyboard.as_markup(),
            message_id=callback_query.message.message_id,
            parse_mode='HTML',
            image_url=image_url,
            media_type=None,
            previous_message_length=previous_message_length
        )
        if sent_message:
            await state.update_data(
                last_message_id=sent_message.message_id,
                previous_message_length=previous_message_length
            )

    @dp.callback_query(lambda c: c.data == "back_to_end_time")
    async def back_to_end_time(callback_query: CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)
        await state.set_state(GiveawayStates.waiting_for_end_time)
        data = await state.get_data()
        end_time = data.get('end_time', '')
        keyboard = await build_navigation_keyboard(state, GiveawayStates.waiting_for_end_time)
        current_time = datetime.now(pytz.timezone('Europe/Moscow')).strftime('%d.%m.%Y %H:%M')
        image_url = 'https://storage.yandexcloud.net/raffle/snapi/snapi2.jpg'
        message_text = (
            f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{end_time}</b>\n\n"
            f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</b> –ø–æ –ú–°–ö\n\n"
            f"<tg-emoji emoji-id='5413879192267805083'>üóì</tg-emoji> –°–µ–π—á–∞—Å –≤ –ú–æ—Å–∫–≤–µ: <code>{current_time}</code>"
            if end_time else
            f"–ö–æ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Ä–æ–∑—ã–≥—Ä—ã—à? –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</b> (–ø–æ –ú–°–ö)\n\n"
            f"<tg-emoji emoji-id='5413879192267805083'>üóì</tg-emoji> –°–µ–π—á–∞—Å –≤ –ú–æ—Å–∫–≤–µ: <code>{current_time}</code>"
        )
        previous_message_length = data.get('previous_message_length', 'short')

        sent_message = await send_message_auto(
            bot,
            chat_id=callback_query.from_user.id,
            text=message_text,
            reply_markup=keyboard.as_markup(),
            message_id=callback_query.message.message_id,
            parse_mode='HTML',
            image_url=image_url,
            media_type=None,
            previous_message_length=previous_message_length
        )
        if sent_message:
            await state.update_data(
                last_message_id=sent_message.message_id,
                previous_message_length=previous_message_length
            )

    @dp.message(GiveawayStates.waiting_for_winner_count)
    async def process_winner_count(message: types.Message, state: FSMContext):
        global previous_message_length
        if message.text and message.text.startswith('/'):
            return

        data = await state.get_data()
        last_message_id = data.get('last_message_id')
        image_url = 'https://storage.yandexcloud.net/raffle/snapi/snapi2.jpg'

        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.message_id}: {str(e)}")

        try:
            winner_count = int(message.text)
            if winner_count <= 0:
                raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
            if winner_count > MAX_WINNERS:
                raise ValueError(f"–ú–∞–∫—Å–∏–º—É–º {MAX_WINNERS} –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π")

            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="–í –º–µ–Ω—é", callback_data="back_to_main_menu")

            message_text = f"<tg-emoji emoji-id='5386367538735104399'>‚åõÔ∏è</tg-emoji> –°–æ–∑–¥–∞—ë–º –≤–∞—à —Ä–æ–∑—ã–≥—Ä—ã—à..."
            previous_message_length = data.get('previous_message_length', 'short')
            sent_message = await send_message_auto(
                bot,
                chat_id=message.chat.id,
                text=message_text,
                reply_markup=keyboard.as_markup(),
                message_id=last_message_id,
                parse_mode='HTML',
                image_url=image_url,
                media_type=None,
                previous_message_length=previous_message_length
            )
            if sent_message:
                await state.update_data(
                    last_message_id=sent_message.message_id,
                    previous_message_length=previous_message_length
                )

            media_url = data.get('media_url')
            media_type = data.get('media_type')

            success, giveaway_id = await save_giveaway(
                conn,
                cursor,
                message.from_user.id,
                data['name'],
                data['description'],
                data['end_time'],
                winner_count,
                media_type,
                media_url
            )

            if success:
                await display_giveaway(
                    bot,
                    message.chat.id,
                    giveaway_id,
                    conn,
                    cursor,
                    message_id=last_message_id,
                    state=state
                )
                await state.clear()
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à")

        except ValueError as ve:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_end_time")
            keyboard.button(text="–í –º–µ–Ω—é", callback_data="back_to_main_menu")
            keyboard.adjust(1)

            if "invalid literal for int()" in str(ve):
                error_msg = "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –ù–∞–ø—Ä–∏–º–µ—Ä, 1, 5 –∏–ª–∏ 10"
            else:
                error_msg = str(ve) if str(ve) else f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {MAX_WINNERS}"

            error_text = f"<tg-emoji emoji-id='5447644880824181073'>‚ö†Ô∏è</tg-emoji> {error_msg}"
            current_message_type = 'photo' if count_length_with_custom_emoji(error_text) <= 800 else 'image'
            sent_message = await send_message_auto(
                bot,
                chat_id=message.chat.id,
                text=error_text,
                reply_markup=keyboard.as_markup(),
                message_id=last_message_id,
                parse_mode='HTML',
                image_url=image_url,
                media_type=None,
                previous_message_length=previous_message_length
            )
            if sent_message:
                await state.update_data(
                    last_message_id=sent_message.message_id,
                    previous_message_length=previous_message_length
                )

        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="create_giveaway")
            keyboard.button(text="–í –º–µ–Ω—é", callback_data="back_to_main_menu")
            keyboard.adjust(1)
            error_message = f"‚ùå –û—à–∏–±–∫–∞: {str(e) if str(e) else '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'}"
            previous_message_length = data.get('previous_message_length', 'short')

            sent_message = await send_message_auto(
                bot,
                chat_id=message.chat.id,
                text=error_message,
                reply_markup=keyboard.as_markup(),
                message_id=last_message_id,
                parse_mode='HTML',
                image_url=image_url,
                media_type=None,
                previous_message_length=previous_message_length
            )
            if sent_message:
                await state.update_data(
                    last_message_id=sent_message.message_id,
                    previous_message_length=previous_message_length
                )

    async def display_giveaway(bot: Bot, chat_id: int, giveaway_id: str, conn, cursor, message_id: int = None, state: Optional[FSMContext] = None):
        try:
            cursor.execute("SELECT * FROM giveaways WHERE id = %s", (giveaway_id,))
            columns = [desc[0] for desc in cursor.description]
            giveaway = dict(zip(columns, cursor.fetchone()))
            if not giveaway:
                raise Exception("Giveaway not found in database")

            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_post:{giveaway_id}")
            keyboard.button(text="üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"preview_giveaway:{giveaway_id}")
            keyboard.button(text="üë• –ü—Ä–∏–≤—è–∑–∞—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–∞", callback_data=f"bind_communities:{giveaway_id}")
            keyboard.button(text="üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"activate_giveaway:{giveaway_id}")
            keyboard.button(text="üì© –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è", callback_data=f"add_invite_task:{giveaway_id}")
            keyboard.button(text="üéâ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º", callback_data=f"message_winners:{giveaway_id}")
            keyboard.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_giveaway:{giveaway_id}")
            keyboard.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="created_giveaways")
            keyboard.adjust(2, 2, 1, 1, 1, 1)

            description = giveaway['description']
            winner_count = str(giveaway['winner_count'])
            end_time = giveaway['end_time'].strftime('%d.%m.%Y %H:%M (–ú–°–ö)') if giveaway['end_time'] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            formatted_description = description.replace('{win}', winner_count).replace('{data}', end_time)
            formatted_description = sanitize_html(formatted_description)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º image_url –∏ media_type
            image_url = None
            media_type = None
            if giveaway['media_type'] and giveaway['media_file_id']:
                image_url = giveaway['media_file_id']
                media_type = giveaway['media_type']
                if not image_url.startswith('http'):
                    image_url = await get_file_url(bot, giveaway['media_file_id'])
            else:
                image_url = 'https://storage.yandexcloud.net/raffle/snapi/snapi2.jpg'
                media_type = None

            giveaway_info = formatted_description
            data = await state.get_data() if state else {}
            previous_message_length = data.get('previous_message_length', 'short')

            sent_message = await send_message_auto(
                bot,
                chat_id=chat_id,
                text=giveaway_info,
                reply_markup=keyboard.as_markup(),
                message_id=message_id,
                parse_mode='HTML',
                image_url=image_url,
                media_type=media_type,
                previous_message_length=previous_message_length
            )
            if sent_message and state:
                await state.update_data(
                    last_message_id=sent_message.message_id,
                    previous_message_length=previous_message_length
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {str(e)}")
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="created_giveaways")
            image_url = 'https://storage.yandexcloud.net/raffle/snapi/snapi2.jpg'
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
            data = await state.get_data() if state else {}
            previous_message_length = data.get('previous_message_length', 'short')

            sent_message = await send_message_auto(
                bot,
                chat_id=chat_id,
                text=error_text,
                reply_markup=keyboard.as_markup(),
                message_id=message_id,
                parse_mode='HTML',
                image_url=image_url,
                media_type=None,
                previous_message_length=previous_message_length
            )
            if sent_message and state:
                await state.update_data(
                    last_message_id=sent_message.message_id,
                    previous_message_length=previous_message_length
                )
