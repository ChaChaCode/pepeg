from typing import List, Dict, Union
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
import json
import re

from utils import send_message_auto

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

storage = MemoryStorage()
dp = Dispatcher(storage=storage)

user_selected_communities = {}
paid_users: Dict[int, str] = {}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
MAX_CONGRATS_LENGTH = 1000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

FORMATTING_GUIDE = """
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ç–µ–∫—Å—Ç–∞:
<blockquote expandable>- –¶–∏—Ç–∞—Ç–∞
- –ñ–∏—Ä–Ω—ã–π: <b>—Ç–µ–∫—Å—Ç</b>
- –ö—É—Ä—Å–∏–≤: <i>—Ç–µ–∫—Å—Ç</i>
- –ü–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π: <u>—Ç–µ–∫—Å—Ç</u>
- –ó–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π: <s>—Ç–µ–∫—Å—Ç</s>
- –ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π
- –°–∫—Ä—ã—Ç—ã–π: <tg-spoiler>—Ç–µ–∫—Å—Ç</tg-spoiler>
- –°—Å—ã–ª–∫–∞: <a href="https://t.me/PepeGift_Bot">—Ç–µ–∫—Å—Ç</a>
- –ö–æ–¥: <code>—Ç–µ–∫—Å—Ç</code>
- –ö–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏ <tg-emoji emoji-id='5199885118214255386'>üëã</tg-emoji>

<b>–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ</b>
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö:  
- <code>{win}</code> ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π  
- <code>{data}</code> ‚Äî –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, 30.03.2025 20:45 (–ø–æ –ú–°–ö)  

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ ‚Äî 1000 —Å–∏–º–≤–æ–ª–æ–≤. –ú–∞–∫—Å–∏–º—É–º 100 –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.</blockquote>
"""

# States for the FSM
class GiveawayStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_media_choice = State()
    waiting_for_media_upload = State()
    waiting_for_end_time = State()
    waiting_for_winner_count = State()
    waiting_for_community_name = State()
    waiting_for_new_end_time = State()
    waiting_for_media_edit = State()
    waiting_for_congrats_message = State()
    waiting_for_common_congrats_message = State()
    waiting_for_edit_name = State()
    waiting_for_edit_description = State()
    waiting_for_edit_winner_count = State()
    creating_giveaway = State()
    binding_communities = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ HTML-—Ç–µ–≥–æ–≤
def count_length_with_custom_emoji(text: str) -> int:
    # –£–¥–∞–ª—è–µ–º HTML-—Ç–µ–≥–∏
    tag_pattern = r'<[^>]+>'
    cleaned_text = re.sub(tag_pattern, '', text)

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ —Ç–µ–≥–æ–≤
    length = len(cleaned_text)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–ª–∏–Ω—É –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    length += text.count('{win}') * (5 - len('{win}'))  # 5 —Å–∏–º–≤–æ–ª–æ–≤ –º–∏–Ω—É—Å –¥–ª–∏–Ω–∞ —Å–∞–º–æ–π —Å—Ç—Ä–æ–∫–∏ "{win}"
    length += text.count('{data}') * (16 - len('{data}'))  # 16 —Å–∏–º–≤–æ–ª–æ–≤ –º–∏–Ω—É—Å –¥–ª–∏–Ω–∞ —Å–∞–º–æ–π —Å—Ç—Ä–æ–∫–∏ "{data}"

    return length

def register_congratulations_messages(dp: Dispatcher, bot: Bot, conn, cursor):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""

    @dp.callback_query(lambda c: c.data.startswith('message_winners:') or c.data.startswith('message_winners_page:'))
    async def process_message_winners(callback_query: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
        data_parts = callback_query.data.split(':')
        giveaway_id = data_parts[1]
        current_page = int(data_parts[2]) if len(data_parts) > 2 else 1
        ITEMS_PER_PAGE = 20

        cursor.execute("SELECT * FROM giveaways WHERE id = %s", (giveaway_id,))
        giveaway = cursor.fetchone()
        if not giveaway:
            await bot.answer_callback_query(callback_query.id, text="–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        columns = [desc[0] for desc in cursor.description]
        giveaway = dict(zip(columns, giveaway))

        winner_count = giveaway['winner_count']
        total_pages = max(1, (winner_count + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE)
        start_place = (current_page - 1) * ITEMS_PER_PAGE + 1
        end_place = min(current_page * ITEMS_PER_PAGE, winner_count)

        keyboard = InlineKeyboardBuilder()
        buttons = []
        buttons.append(InlineKeyboardButton(
            text="–û–±—â–µ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ",
            callback_data=f"edit_common_congrats:{giveaway_id}"
        ))
        for place in range(start_place, end_place + 1):
            buttons.append(InlineKeyboardButton(
                text=f"–ú–µ—Å—Ç–æ {place}",
                callback_data=f"congrats_message:{giveaway_id}:{place}"
            ))

        for button in buttons:
            keyboard.add(button)
        keyboard.adjust(1)

        if total_pages > 1:
            prev_page = current_page - 1 if current_page > 1 else total_pages
            next_page = current_page + 1 if current_page < total_pages else 1
            keyboard.row(
                InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"message_winners_page:{giveaway_id}:{prev_page}"),
                InlineKeyboardButton(text=f"üìÑ {current_page}/{total_pages}", callback_data="ignore"),
                InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"message_winners_page:{giveaway_id}:{next_page}")
            )

        keyboard.row(
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_created_giveaway:{giveaway_id}")
        )

        message_text = (
            f"<tg-emoji emoji-id='5467538555158943525'>üí≠</tg-emoji> "
            f"–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ–±—â–µ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π.\n"
            f"–û—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –º–µ—Å—Ç–∞ {start_place}-{end_place} –∏–∑ {winner_count}."
        )

        try:
            await send_message_auto(
                bot=bot,
                chat_id=callback_query.from_user.id,
                text=message_text,
                reply_markup=keyboard.as_markup(),
                message_id=callback_query.message.message_id,  # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await send_message_auto(
                bot=bot,
                chat_id=callback_query.from_user.id,
                text=message_text,
                reply_markup=keyboard.as_markup(),
                parse_mode='HTML'
            )
        await callback_query.answer()

    def extract_message(obj: Union[str, Dict, List]) -> Union[str, None]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞."""
        if isinstance(obj, str):
            try:
                parsed = json.loads(obj)
                return extract_message(parsed)
            except json.JSONDecodeError:
                return obj.strip()

        if isinstance(obj, dict):
            if 'message' in obj:
                return obj['message']
            for value in obj.values():
                result = extract_message(value)
                if result:
                    return result

        if isinstance(obj, list):
            if obj and isinstance(obj[0], dict) and 'message' in obj[0]:
                return obj[0]['message']

        return None

    @dp.callback_query(lambda c: c.data.startswith('congrats_message:'))
    async def process_congrats_message(callback_query: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Å—Ç–∞."""
        giveaway_id, place = callback_query.data.split(':')[1:]

        existing_message = None
        try:
            cursor.execute(
                "SELECT message FROM congratulations WHERE giveaway_id = %s AND place = %s",
                (giveaway_id, place)
            )
            result = cursor.fetchone()
            if result:
                existing_message = result[0]
            logger.info(f"Extracted message: {existing_message}")
        except Exception as e:
            logger.error(f"Error fetching congratulation for place {place}: {str(e)}")

        await state.update_data(giveaway_id=giveaway_id, place=place)
        await state.set_state(GiveawayStates.waiting_for_congrats_message)

        message_text = (
            f"<tg-emoji emoji-id='5253742260054409879'>‚úâÔ∏è</tg-emoji> –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, –∑–∞–Ω—è–≤—à–µ–≥–æ {place} –º–µ—Å—Ç–æ "
            f"(–¥–æ {MAX_CONGRATS_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤).\n{FORMATTING_GUIDE}"
        )
        if existing_message:
            message_text += f"\n\n–¢–µ–∫—É—â–µ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ:\n{existing_message}"

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"message_winners:{giveaway_id}")

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º message_id –∏–∑ callback_query –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            sent_message = await send_message_auto(
                bot=bot,
                chat_id=callback_query.from_user.id,
                text=message_text,
                reply_markup=keyboard.as_markup(),
                message_id=callback_query.message.message_id,  # –ü–µ—Ä–µ–¥–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                parse_mode='HTML'
            )
            if sent_message:
                await state.update_data(original_message_id=sent_message.message_id)
            else:
                logger.error("Failed to edit message with send_message_auto")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            sent_message = await send_message_auto(
                bot=bot,
                chat_id=callback_query.from_user.id,
                text=message_text,
                reply_markup=keyboard.as_markup(),
                parse_mode='HTML'
            )
            if sent_message:
                await state.update_data(original_message_id=sent_message.message_id)

        await callback_query.answer()

    @dp.message(GiveawayStates.waiting_for_congrats_message)
    async def save_congrats_message(message: types.Message, state: FSMContext):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Å—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–ª–∏–Ω—ã."""
        data = await state.get_data()
        giveaway_id = data['giveaway_id']
        place = data['place']
        original_message_id = data.get('original_message_id')

        formatted_text = message.html_text if message.text else ""
        text_length = count_length_with_custom_emoji(formatted_text)

        if text_length > MAX_CONGRATS_LENGTH:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"message_winners:{giveaway_id}")
            error_message = (
                f"‚ö†Ô∏è –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º {MAX_CONGRATS_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤, —Å–µ–π—á–∞—Å {text_length}. "
                f"–°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç!\n{FORMATTING_GUIDE}"
            )
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            await send_message_auto(
                bot=bot,
                chat_id=message.chat.id,
                text=error_message,
                reply_markup=keyboard.as_markup(),
                message_id=original_message_id,
                parse_mode='HTML'
            )
            return

        try:
            cursor.execute(
                "DELETE FROM congratulations WHERE giveaway_id = %s AND place = %s",
                (giveaway_id, place)
            )
            cursor.execute(
                """
                INSERT INTO congratulations (giveaway_id, place, message)
                VALUES (%s, %s, %s)
                """,
                (giveaway_id, place, formatted_text)
            )
            conn.commit()

            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="–ì–æ—Ç–æ–≤–æ", callback_data=f"message_winners:{giveaway_id}")
            keyboard.adjust(1)

            updated_text = (
                f"–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è {place} –º–µ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:\n\n"
                f"{formatted_text}\n\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å."
            )

            await send_message_auto(
                bot=bot,
                chat_id=message.chat.id,
                text=updated_text,
                reply_markup=keyboard.as_markup(),
                message_id=original_message_id,
                parse_mode='HTML'
            )
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è: {str(e)}")
            conn.rollback()
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"message_winners:{giveaway_id}")
            await send_message_auto(
                bot=bot,
                chat_id=message.chat.id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=keyboard.as_markup(),
                message_id=original_message_id,
                parse_mode='HTML'
            )

    @dp.callback_query(lambda c: c.data == 'show_common_congrats')
    async def show_common_congrats(callback_query: types.CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –æ–±—â–µ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ."""
        data = await state.get_data()
        giveaway_id = data['giveaway_id']

        try:
            cursor.execute(
                "SELECT message, place FROM congratulations WHERE giveaway_id = %s",
                (giveaway_id,)
            )
            congratulations = cursor.fetchall()
            congratulations = [{'place': row[1], 'message': row[0]} for row in congratulations]

            if not congratulations:
                message_text = f"–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
            else:
                congrats_dict = {item['place']: item['message'] for item in congratulations}
                if len(set(congrats_dict.values())) == 1:
                    common_message = next(iter(congrats_dict.values()))
                    message_text = f"–¢–µ–∫—É—â–µ–µ –æ–±—â–µ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ:\n\n{common_message}"
                else:
                    message_text = f"–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –æ–±—â–µ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç."

            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="–ò–∑–º–µ–Ω–∏—Ç—å –æ–±—â–µ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data=f"edit_common_congrats:{giveaway_id}")
            keyboard.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"message_winners:{giveaway_id}")
            keyboard.adjust(1)

            await bot.edit_message_text(
                chat_id=callback_query.from_user.id,
                message_id=callback_query.message.message_id,
                text=message_text,
                reply_markup=keyboard.as_markup(),
                parse_mode='HTML'
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è: {str(e)}")
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—â–µ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è.")

        await callback_query.answer()

    @dp.callback_query(lambda c: c.data.startswith('edit_common_congrats:'))
    async def edit_common_congrats(callback_query: types.CallbackQuery, state: FSMContext):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è."""
        giveaway_id = callback_query.data.split(':')[1]

        try:
            cursor.execute(
                "SELECT message FROM congratulations WHERE giveaway_id = %s",
                (giveaway_id,)
            )
            existing_messages = [row[0] for row in cursor.fetchall()]
            existing_message = existing_messages[0] if existing_messages and len(set(existing_messages)) == 1 else None

            await state.update_data(giveaway_id=giveaway_id)
            await state.set_state(GiveawayStates.waiting_for_common_congrats_message)

            message_text = (
                f"–ù–∞–ø–∏—à–∏—Ç–µ –æ–±—â–µ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (–¥–æ {MAX_CONGRATS_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤).\n"
                f"{FORMATTING_GUIDE}"
            )
            if existing_message:
                message_text += f"\n\n–¢–µ–∫—É—â–µ–µ –æ–±—â–µ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ:\n{existing_message}"

            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"message_winners:{giveaway_id}")

            sent_message = await send_message_auto(
                bot=bot,
                chat_id=callback_query.from_user.id,
                text=message_text,
                reply_markup=keyboard.as_markup(),
                message_id=callback_query.message.message_id,  # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                parse_mode='HTML'
            )
            if sent_message:
                await state.update_data(original_message_id=sent_message.message_id)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –æ–±—â–µ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è: {str(e)}")
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –æ–±—â–µ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è.")

        await callback_query.answer()

    @dp.message(GiveawayStates.waiting_for_common_congrats_message)
    async def save_common_congrats_message(message: types.Message, state: FSMContext):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –º–µ—Å—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–ª–∏–Ω—ã."""
        data = await state.get_data()
        giveaway_id = data['giveaway_id']
        original_message_id = data.get('original_message_id')

        formatted_text = message.html_text if message.text else ""
        text_length = count_length_with_custom_emoji(formatted_text)

        if text_length > MAX_CONGRATS_LENGTH:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"message_winners:{giveaway_id}")
            error_message = (
                f"‚ö†Ô∏è –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º {MAX_CONGRATS_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤, —Å–µ–π—á–∞—Å {text_length}. "
                f"–°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç!\n{FORMATTING_GUIDE}"
            )
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            await send_message_auto(
                bot=bot,
                chat_id=message.chat.id,
                text=error_message,
                reply_markup=keyboard.as_markup(),
                message_id=original_message_id,
                parse_mode='HTML'
            )
            return

        try:
            cursor.execute(
                "SELECT winner_count FROM giveaways WHERE id = %s",
                (giveaway_id,)
            )
            winner_count = cursor.fetchone()[0]

            cursor.execute(
                "DELETE FROM congratulations WHERE giveaway_id = %s",
                (giveaway_id,)
            )

            for place in range(1, winner_count + 1):
                cursor.execute(
                    """
                    INSERT INTO congratulations (giveaway_id, place, message)
                    VALUES (%s, %s, %s)
                    """,
                    (giveaway_id, place, formatted_text)
                )

            conn.commit()

            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="–ì–æ—Ç–æ–≤–æ", callback_data=f"message_winners:{giveaway_id}")
            keyboard.adjust(1)

            success_message = (
                f"–û–±—â–µ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –∫–æ –≤—Å–µ–º –º–µ—Å—Ç–∞–º –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ.\n\n"
                f"–¢–µ–∫—Å—Ç:\n{formatted_text}\n\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å."
            )

            await send_message_auto(
                bot=bot,
                chat_id=message.chat.id,
                text=success_message,
                reply_markup=keyboard.as_markup(),
                message_id=original_message_id,
                parse_mode='HTML'
            )
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—â–µ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è: {str(e)}")
            conn.rollback()
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"message_winners:{giveaway_id}")
            await send_message_auto(
                bot=bot,
                chat_id=message.chat.id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=keyboard.as_markup(),
                message_id=original_message_id,
                parse_mode='HTML'
            )
