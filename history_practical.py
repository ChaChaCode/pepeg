import logging
import math
from aiogram import Bot, types
from aiogram.types import CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from utils import send_message_with_image

logger = logging.getLogger(__name__)


def register_history_handlers(dp, bot: Bot, conn, cursor):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π."""

    @dp.callback_query(lambda c: c.data == 'giveaway_history' or c.data.startswith('giveaway_history_page:'))
    async def process_giveaway_history(callback_query: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
        user_id = callback_query.from_user.id
        ITEMS_PER_PAGE = 5
        current_page = int(callback_query.data.split(':')[1]) if ':' in callback_query.data else 1

        try:
            # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
            cursor.execute(
                "SELECT COUNT(*) FROM giveaways WHERE user_id = %s AND is_completed = 'true'",
                (user_id,)
            )
            total_giveaways = cursor.fetchone()[0]
            if total_giveaways == 0:
                await bot.answer_callback_query(callback_query.id,
                                                text="üìú –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π.")
                return

            total_pages = max(1, math.ceil(total_giveaways / ITEMS_PER_PAGE))
            offset = (current_page - 1) * ITEMS_PER_PAGE

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
            cursor.execute(
                """
                SELECT id, name, end_time 
                FROM giveaways 
                WHERE user_id = %s AND is_completed = 'true'
                ORDER BY end_time DESC
                LIMIT %s OFFSET %s
                """,
                (user_id, ITEMS_PER_PAGE, offset)
            )
            completed_giveaways = cursor.fetchall()

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            keyboard = InlineKeyboardBuilder()
            for giveaway_id, name, end_time in completed_giveaways:
                name = str(name) if name is not None else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                clean_name = name[:61] + "..." if len(name) > 64 else name
                end_time_str = end_time.strftime("%d.%m.%Y") if end_time else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
                keyboard.row(InlineKeyboardButton(
                    text=f"{clean_name} ({end_time_str})",
                    callback_data=f"view_completed_giveaway:{giveaway_id}"
                ))

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            if total_pages > 1:
                nav_buttons = [
                    InlineKeyboardButton(
                        text="‚óÄÔ∏è",
                        callback_data=f"giveaway_history_page:{current_page - 1 if current_page > 1 else total_pages}"
                    ),
                    InlineKeyboardButton(text=f"üìÑ {current_page}/{total_pages}", callback_data="ignore"),
                    InlineKeyboardButton(
                        text="‚ñ∂Ô∏è",
                        callback_data=f"giveaway_history_page:{current_page + 1 if current_page < total_pages else 1}"
                    )
                ]
                keyboard.row(*nav_buttons)

            keyboard.row(InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="back_to_main_menu"))

            message_text = (
                "<tg-emoji emoji-id='5462967237434655386'>üéâ</tg-emoji> "
                "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π:\n\n"
            )

            await bot.answer_callback_query(callback_query.id)
            await send_message_with_image(
                bot,
                user_id,
                message_text,
                reply_markup=keyboard.as_markup(),
                message_id=callback_query.message.message_id
            )

        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π: {str(e)}")
            conn.rollback()
            await bot.answer_callback_query(callback_query.id, text="–£–ø—Å! –ß—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å üòî")

    @dp.callback_query(lambda c: c.data.startswith('view_completed_giveaway:'))
    async def process_view_completed_giveaway(callback_query: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏."""
        giveaway_id = callback_query.data.split(':')[1]
        user_id = callback_query.from_user.id

        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ
            cursor.execute(
                """
                SELECT id, name, description, end_time, winner_count, media_type, media_file_id 
                FROM giveaways 
                WHERE id = %s AND user_id = %s AND is_completed = 'true'
                """,
                (giveaway_id, user_id)
            )
            giveaway = cursor.fetchone()

            if not giveaway:
                await bot.answer_callback_query(callback_query.id,
                                                text="üîç –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω üòï")
                return

            giveaway_id, name, description, end_time, winner_count, media_type, media_file_id = giveaway
            end_time_str = end_time.strftime("%d.%m.%Y") if end_time else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
            cursor.execute(
                """
                SELECT place, username, name 
                FROM giveaway_winners 
                WHERE giveaway_id = %s 
                ORDER BY place
                """,
                (giveaway_id,)
            )
            winners = cursor.fetchall()

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
            winners_text = "–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã"
            if winners:
                winners_formatted = []
                for place, username, winner_name in winners:
                    medal = {1: "ü•á", 2: "ü•à", 3: "ü•â"}.get(place, "üèÖ")
                    display_name = f"@{username}" if username else winner_name or f"–£—á–∞—Å—Ç–Ω–∏–∫ {place}"
                    winners_formatted.append(f"{medal} {place}. {display_name}")
                winners_text = "\n".join(winners_formatted)

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ
            giveaway_info = (
                f"<b>{name}</b>\n\n"
                f"{description or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
                f"<b>–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:</b> {end_time_str}\n"
                f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:</b> {winner_count}\n\n"
                f"<b>–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:</b>\n<blockquote expandable>{winners_text}</blockquote>"
            )

            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã"
            keyboard = InlineKeyboardBuilder()
            keyboard.button(
                text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                url=f"https://t.me/Snapi/app?startapp={giveaway_id}"
            )
            keyboard.button(text="üìú –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="giveaway_history")
            keyboard.button(text="üè† –í –º–µ–Ω—é", callback_data="back_to_main_menu")
            keyboard.adjust(1)

            await bot.answer_callback_query(callback_query.id)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–¥–∏–∞ –∏–ª–∏ –±–µ–∑
            if media_type and media_file_id:
                media_types = {
                    'photo': types.InputMediaPhoto,
                    'gif': types.InputMediaAnimation,
                    'video': types.InputMediaVideo
                }
                await bot.edit_message_media(
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    media=media_types[media_type](
                        media=media_file_id,
                        caption=giveaway_info,
                        parse_mode='HTML'
                    ),
                    reply_markup=keyboard.as_markup()
                )
            else:
                await send_message_with_image(
                    bot,
                    user_id,
                    giveaway_info,
                    reply_markup=keyboard.as_markup(),
                    message_id=callback_query.message.message_id,
                    parse_mode='HTML'
                )

        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {str(e)}")
            conn.rollback()
            await bot.answer_callback_query(callback_query.id, text="–£–ø—Å! –ß—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å üòî")
            await bot.send_message(
                callback_query.from_user.id,
                "‚ö†Ô∏è –£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!"
            )