from utils import end_giveaway, send_message_with_image
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
import pytz
from aiogram.utils.keyboard import InlineKeyboardBuilder
import aiogram.exceptions
import json
import math
import boto3
from botocore.client import Config
import requests
import re
from aiogram.types import CallbackQuery
from typing import Dict, List, Optional, Tuple, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è üìù
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Yandex Cloud S3 ‚òÅÔ∏è
YANDEX_ACCESS_KEY = 'YCAJEDluWSn-XI0tyGyfwfnVL'
YANDEX_SECRET_KEY = 'YCPkR9H9Ucebg6L6eMGvtfKuFIcO_MK7gyiffY6H'
YANDEX_BUCKET_NAME = 'raffle'
YANDEX_ENDPOINT_URL = 'https://storage.yandexcloud.net'
YANDEX_REGION = 'ru-central1'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è S3 –∫–ª–∏–µ–Ω—Ç–∞ üì¶
s3_client = boto3.client(
    's3',
    region_name=YANDEX_REGION,
    aws_access_key_id=YANDEX_ACCESS_KEY,
    aws_secret_access_key=YANDEX_SECRET_KEY,
    endpoint_url=YANDEX_ENDPOINT_URL,
    config=Config(signature_version='s3v4')
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚öôÔ∏è
MAX_CAPTION_LENGTH = 850
MAX_NAME_LENGTH = 50
MAX_DESCRIPTION_LENGTH = 850
MAX_MEDIA_SIZE_MB = 10
MAX_WINNERS = 100

FORMATTING_GUIDE = """
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ç–µ–∫—Å—Ç–∞:
<blockquote expandable>
- –¶–∏—Ç–∞—Ç–∞
- –ñ–∏—Ä–Ω—ã–π: <b>—Ç–µ–∫—Å—Ç</b>
- –ö—É—Ä—Å–∏–≤: <i>—Ç–µ–∫—Å—Ç</i>
- –ü–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π: <u>—Ç–µ–∫—Å—Ç</u>
- –ó–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π: <s>—Ç–µ–∫—Å—Ç</s>
- –ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π
- –°–∫—Ä—ã—Ç—ã–π: <tg-spoiler>—Ç–µ–∫—Å—Ç</tg-spoiler>
- –°—Å—ã–ª–∫–∞: <a href="https://t.me/PepeGift_Bot">—Ç–µ–∫—Å—Ç</a>
- –ö–æ–¥: <code>—Ç–µ–∫—Å—Ç</code>
- –ö–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏ <tg-emoji emoji-id='5199885118214255386'>üëã</tg-emoji>

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å Telegram –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ 100 —ç–º–æ–¥–∑–∏.</blockquote>
"""

def strip_html_tags(text: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç HTML-—Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ üßπ"""
    return re.sub(r'<[^>]+>', '', text)

def count_length_with_custom_emoji(text: str) -> int:
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞, —Å—á–∏—Ç–∞—è –∫–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏ –∫–∞–∫ 1 —Å–∏–º–≤–æ–ª."""
    emoji_pattern = r'<tg-emoji emoji-id="[^"]+">[^<]+</tg-emoji>'
    custom_emojis = re.findall(emoji_pattern, text)
    cleaned_text = text
    for emoji in custom_emojis:
        cleaned_text = cleaned_text.replace(emoji, ' ')
    return len(cleaned_text)

def fetch_giveaway_data(cursor: Any, query: str, params: Tuple) -> List[Dict[str, Any]]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏—Ö –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π."""
    cursor.execute(query, params)
    columns = [desc[0] for desc in cursor.description]
    return [dict(zip(columns, row)) for row in cursor.fetchall()]

class EditGiveawayStates(StatesGroup):
    waiting_for_new_name_active = State()  # ‚úèÔ∏è
    waiting_for_new_description_active = State()  # üìú
    waiting_for_new_winner_count_active = State()  # üèÜ
    waiting_for_new_end_time_active = State()  # ‚è∞
    waiting_for_new_media_active = State()  # üñºÔ∏è

async def upload_to_storage(file_content: bytes, filename: str) -> Tuple[bool, str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ üì§"""
    try:
        file_size_mb = len(file_content) / (1024 * 1024)
        if file_size_mb > MAX_MEDIA_SIZE_MB:
            return False, f"<tg-emoji emoji-id='5197564405650307134'>ü§Ø</tg-emoji> –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º—É–º: {MAX_MEDIA_SIZE_MB} –ú–ë üòî"

        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        unique_filename = f"{timestamp}_{filename}"

        presigned_url = s3_client.generate_presigned_url(
            'put_object',
            Params={
                'Bucket': YANDEX_BUCKET_NAME,
                'Key': unique_filename,
                'ContentType': 'application/octet-stream'
            },
            ExpiresIn=3600
        )

        response = requests.put(
            presigned_url,
            data=file_content,
            headers={'Content-Type': 'application/octet-stream'}
        )

        if response.status_code == 200:
            public_url = f"https://{YANDEX_BUCKET_NAME}.storage.yandexcloud.net/{unique_filename}"
            logger.info(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {unique_filename}")
            return True, public_url
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}")
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: {response.status_code}")

    except Exception as e:
        logger.error(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
        return False, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}"

def register_active_giveaways_handlers(dp: Dispatcher, bot: Bot, conn: Any, cursor: Any) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π üéÅ"""

    @dp.callback_query(lambda c: c.data == 'active_giveaways' or c.data.startswith('active_giveaways_page:'))
    async def process_active_giveaways(callback_query: types.CallbackQuery) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π üìã"""
        user_id = callback_query.from_user.id
        ITEMS_PER_PAGE = 5
        current_page = int(callback_query.data.split(':')[1]) if ':' in callback_query.data else 1

        try:
            # –í—ã–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ PostgreSQL
            giveaways = fetch_giveaway_data(
                cursor,
                "SELECT * FROM giveaways WHERE is_active = %s AND user_id = %s ORDER BY end_time",
                ('true', user_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É 'true' –≤–º–µ—Å—Ç–æ –±—É–ª–µ–≤–æ–≥–æ True
            )

            if not giveaways:
                await bot.answer_callback_query(callback_query.id,
                                                text="üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π! –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π? üöÄ")
                return

            total_giveaways = len(giveaways)
            total_pages = math.ceil(total_giveaways / ITEMS_PER_PAGE)
            start_idx = (current_page - 1) * ITEMS_PER_PAGE
            current_giveaways = giveaways[start_idx:start_idx + ITEMS_PER_PAGE]

            keyboard = InlineKeyboardBuilder()
            for giveaway in current_giveaways:
                name = str(giveaway['name']) if giveaway['name'] is not None else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                clean_name = strip_html_tags(name)[:61] + "..." if len(name) > 64 else strip_html_tags(name)
                keyboard.row(types.InlineKeyboardButton(
                    text=clean_name,
                    callback_data=f"view_active_giveaway:{giveaway['id']}"
                ))

            nav_buttons = []
            if current_page > 1:
                nav_buttons.append(
                    types.InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"active_giveaways_page:{current_page - 1}"))
            if total_pages > 1:
                nav_buttons.append(
                    types.InlineKeyboardButton(text=f"üìÑ {current_page}/{total_pages}", callback_data="ignore"))
            if current_page < total_pages:
                nav_buttons.append(
                    types.InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"active_giveaways_page:{current_page + 1}"))

            if nav_buttons:
                keyboard.row(*nav_buttons)
            keyboard.row(types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main_menu"))

            await bot.answer_callback_query(callback_query.id)
            await send_message_with_image(
                bot,
                user_id,
                f"<tg-emoji emoji-id='5210956306952758910'>üëÄ</tg-emoji> –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!",
                reply_markup=keyboard.as_markup(),
                message_id=callback_query.message.message_id
            )
        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
            await bot.answer_callback_query(callback_query.id, text="‚ùå –£–ø—Å! –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π üòî")

    @dp.callback_query(lambda c: c.data == "ignore")
    async def process_ignore(callback_query: types.CallbackQuery) -> None:
        await bot.answer_callback_query(callback_query.id)

    @dp.callback_query(lambda c: c.data.startswith('view_active_giveaway:'))
    async def process_view_active_giveaway(callback_query: types.CallbackQuery) -> None:
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ üëÄ"""
        giveaway_id = callback_query.data.split(':')[1]

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –∏–∑ PostgreSQL
        giveaways = fetch_giveaway_data(cursor, "SELECT * FROM giveaways WHERE id = %s", (giveaway_id,))
        if not giveaways:
            await bot.answer_callback_query(callback_query.id, text="üîç –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω üòï")
            return
        giveaway = giveaways[0]

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        cursor.execute("SELECT COUNT(*) FROM participations WHERE giveaway_id = %s", (giveaway_id,))
        participants_count = cursor.fetchone()[0]

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö –∏–∑ published_messages
        published_messages = giveaway['published_messages'] if isinstance(giveaway['published_messages'], list) else []
        channel_info = ""
        if published_messages:
            channel_links = []
            unique_chat_ids = set(msg['chat_id'] for msg in published_messages)

            for chat_id in unique_chat_ids:
                try:
                    chat = await bot.get_chat(chat_id)
                    channel_name = chat.title
                    invite_link = chat.invite_link if chat.invite_link else f"https://t.me/c/{str(chat_id).replace('-100', '')}"
                    channel_links.append(f"<a href=\"{invite_link}\">{channel_name}</a>")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ {chat_id}: {str(e)}")
                    channel_links.append("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª")

            if channel_links:
                channel_info = f"\n<tg-emoji emoji-id='5424818078833715060'>üì£</tg-emoji> <b>–†–æ–∑—ã–≥—Ä—ã—à –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤:</b> {', '.join(channel_links)}"
            else:
                channel_info = "\n<tg-emoji emoji-id='5424818078833715060'>üì£</tg-emoji> <b>–†–æ–∑—ã–≥—Ä—ã—à –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–∞—Ö</b>"
        else:
            channel_info = "\n<tg-emoji emoji-id='5424818078833715060'>üì£</tg-emoji> <b>–†–æ–∑—ã–≥—Ä—ã—à –µ—â—ë –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω</b>"

        # –£—Å–ª–æ–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç text_type
        additional_info = (
            f"<tg-emoji emoji-id='5440539497383087970'>ü•á</tg-emoji> <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:</b> {giveaway['winner_count']}\n"
            f"<tg-emoji emoji-id='5413879192267805083'>üóì</tg-emoji> <b>–ö–æ–Ω–µ—Ü:</b> {(giveaway['end_time'] + timedelta(hours=3)).strftime('%d.%m.%Y %H:%M')} (–ú–°–ö)"
        ) if giveaway['text_type'] == 0 else ""

        giveaway_info = f"""
<b>{giveaway['name']}</b>

{giveaway['description']}

{additional_info}
<tg-emoji emoji-id='5449683594425410231'>üîº</tg-emoji> <b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {participants_count}
{channel_info}
"""

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_active_post:{giveaway_id}")
        keyboard.button(text="üéâ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º", callback_data=f"message_winners_active:{giveaway_id}")
        keyboard.button(text="‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"confirm_force_end_giveaway:{giveaway_id}")
        keyboard.button(text="üîó –û—Ç–∫—Ä—ã—Ç—å", url=f"https://t.me/Snapi/app?startapp={giveaway_id}")
        keyboard.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="created_giveaways")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ active_giveaways
        keyboard.adjust(1)

        try:
            await bot.answer_callback_query(callback_query.id)
            if giveaway['media_type'] and giveaway['media_file_id']:
                media_types = {
                    'photo': types.InputMediaPhoto,
                    'gif': types.InputMediaAnimation,
                    'video': types.InputMediaVideo
                }
                media_class = media_types.get(giveaway['media_type'])
                if media_class:
                    await bot.edit_message_media(
                        chat_id=callback_query.message.chat.id,
                        message_id=callback_query.message.message_id,
                        media=media_class(media=giveaway['media_file_id'], caption=giveaway_info, parse_mode='HTML'),
                        reply_markup=keyboard.as_markup()
                    )
                else:
                    raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞: {giveaway['media_type']}")
            else:
                await send_message_with_image(
                    bot,
                    callback_query.from_user.id,
                    giveaway_info,
                    reply_markup=keyboard.as_markup(),
                    message_id=callback_query.message.message_id,
                    parse_mode='HTML'
                )
        except aiogram.exceptions.TelegramBadRequest as e:
            if "message to edit not found" in str(e):
                logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {e}")
                await send_new_giveaway_message(callback_query.message.chat.id, giveaway, giveaway_info, keyboard)
            else:
                raise

    @dp.callback_query(lambda c: c.data.startswith('confirm_force_end_giveaway:'))
    async def process_confirm_force_end_giveaway(callback_query: types.CallbackQuery) -> None:
        """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ ‚èπÔ∏è"""
        giveaway_id = callback_query.data.split(':')[1]
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚úÖ –î–∞", callback_data=f"force_end_giveaway:{giveaway_id}")
        keyboard.button(text="‚ùå –ù–µ—Ç", callback_data=f"view_active_giveaway:{giveaway_id}")
        keyboard.adjust(2)

        await bot.answer_callback_query(callback_query.id)
        await send_message_with_image(
            bot,
            chat_id=callback_query.from_user.id,
            message_id=callback_query.message.message_id,
            text="<tg-emoji emoji-id='5352640560718949874'>ü§®</tg-emoji> –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=keyboard.as_markup()
        )

    @dp.callback_query(lambda c: c.data.startswith('force_end_giveaway:'))
    async def process_force_end_giveaway(callback_query: types.CallbackQuery) -> None:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚èπÔ∏è"""
        giveaway_id = callback_query.data.split(':')[1]

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
        await send_message_with_image(
            bot,
            chat_id=callback_query.from_user.id,
            text="<tg-emoji emoji-id='5386367538735104399'>‚åõÔ∏è</tg-emoji> –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à...",
            message_id=callback_query.message.message_id,
            parse_mode='HTML'
        )
        await bot.answer_callback_query(callback_query.id)

        try:
            await end_giveaway(bot=bot, giveaway_id=giveaway_id, conn=conn, cursor=cursor)

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ
            giveaways = fetch_giveaway_data(cursor, "SELECT participant_counter_tasks FROM giveaways WHERE id = %s", (giveaway_id,))
            giveaway = giveaways[0]

            # –ò–∑–≤–ª–µ–∫–∞–µ–º chat_id –∏–∑ participant_counter_tasks
            participant_counter_tasks = giveaway['participant_counter_tasks']
            channel_links = []
            if participant_counter_tasks:
                try:
                    tasks = participant_counter_tasks if isinstance(participant_counter_tasks, list) else []
                    unique_chat_ids = set(task['chat_id'] for task in tasks if 'chat_id' in task)
                    for chat_id in unique_chat_ids:
                        try:
                            chat = await bot.get_chat(chat_id)
                            channel_name = chat.title
                            invite_link = chat.invite_link if chat.invite_link else f"https://t.me/c/{str(chat_id).replace('-100', '')}"
                            channel_links.append(f"<a href=\"{invite_link}\">{channel_name}</a>")
                        except Exception as e:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ {chat_id}: {str(e)}")
                            channel_links.append("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ participant_counter_tasks –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ {giveaway_id}: {str(e)}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–∞—Ö
            channel_info = f"\n<tg-emoji emoji-id='5424818078833715060'>üì£</tg-emoji> <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –≤:</b> {', '.join(channel_links)}" if channel_links else ""

            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="–í –º–µ–Ω—é", callback_data="back_to_main_menu")
            await send_message_with_image(
                bot,
                chat_id=callback_query.from_user.id,
                message_id=callback_query.message.message_id,
                text=f"‚úÖ –†–æ–∑—ã–≥—Ä—ã—à –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω!{channel_info}",
                reply_markup=keyboard.as_markup(),
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {str(e)}")
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="created_giveaways")
            await send_message_with_image(
                bot,
                chat_id=callback_query.from_user.id,
                message_id=callback_query.message.message_id,
                text="‚ùå –£–ø—Å! –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à üòî –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!",
                reply_markup=keyboard.as_markup(),
                parse_mode='HTML'
            )

    @dp.callback_query(lambda c: c.data.startswith('edit_active_post:'))
    async def process_edit_active_post(callback_query: CallbackQuery) -> None:
        giveaway_id = callback_query.data.split(':')[1]
        await _show_edit_menu_active(callback_query.from_user.id, giveaway_id, callback_query.message.message_id)

    async def _show_edit_menu_active(user_id: int, giveaway_id: str, message_id: Optional[int] = None) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ ‚úèÔ∏è"""
        giveaways = fetch_giveaway_data(cursor, "SELECT * FROM giveaways WHERE id = %s", (giveaway_id,))
        if not giveaways:
            await bot.send_message(user_id, "üîç –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω üòï")
            return
        giveaway = giveaways[0]

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_name_active:{giveaway_id}")
        keyboard.button(text="üìÑ –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_description_active:{giveaway_id}")
        keyboard.button(text="üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏", callback_data=f"edit_winner_count_active:{giveaway_id}")
        keyboard.button(text="‚è∞ –î–∞—Ç–∞", callback_data=f"change_end_date_active:{giveaway_id}")
        keyboard.button(text="üñºÔ∏è –ú–µ–¥–∏–∞", callback_data=f"view_manage_media:{giveaway_id}")
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–£–±—Ä–∞—Ç—å/–í–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—Å—Ç –≤ –∫–æ–Ω—Ü–µ"
        text_type_label = "‚úÇÔ∏è –£–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –∫–æ–Ω—Ü–µ" if giveaway['text_type'] == 0 else "üìå –í–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—Å—Ç –≤ –∫–æ–Ω—Ü–µ"
        keyboard.button(text=text_type_label, callback_data=f"toggle_text_type_active:{giveaway_id}")
        keyboard.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_active_giveaway:{giveaway_id}")
        keyboard.adjust(2, 2, 1, 1, 1)  # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫

        invite_info = f"\n<tg-emoji emoji-id='5424818078833715060'>üì£</tg-emoji> –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ {giveaway['quantity_invite']} –¥—Ä—É–∑–µ–π!" if giveaway['invite'] else ""
        # –£—Å–ª–æ–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç text_type
        additional_info = (
            f"<tg-emoji emoji-id='5440539497383087970'>ü•á</tg-emoji> <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:</b> {giveaway['winner_count']}\n"
            f"<tg-emoji emoji-id='5413879192267805083'>üóì</tg-emoji> <b>–ö–æ–Ω–µ—Ü:</b> {(giveaway['end_time'] + timedelta(hours=3)).strftime('%d.%m.%Y %H:%M')} (–ú–°–ö)"
        ) if giveaway['text_type'] == 0 else ""

        giveaway_info = f"""
<tg-emoji emoji-id='5395444784611480792'>‚úèÔ∏è</tg-emoji> –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?

<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {giveaway['name']}

<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {giveaway['description']}

{additional_info}
<tg-emoji emoji-id='5282843764451195532'>üñ•</tg-emoji> <b>–ú–µ–¥–∏–∞:</b> {'‚úÖ –ï—Å—Ç—å' if giveaway['media_type'] else '‚ùå –ù–µ—Ç'}
{invite_info}
"""

        try:
            if giveaway['media_type'] and giveaway['media_file_id']:
                media_types = {
                    'photo': types.InputMediaPhoto,
                    'gif': types.InputMediaAnimation,
                    'video': types.InputMediaVideo
                }
                media_class = media_types.get(giveaway['media_type'])
                if media_class:
                    await bot.edit_message_media(
                        chat_id=user_id,
                        message_id=message_id,
                        media=media_class(media=giveaway['media_file_id'], caption=giveaway_info, parse_mode='HTML'),
                        reply_markup=keyboard.as_markup()
                    )
                else:
                    raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞: {giveaway['media_type']}")
            else:
                await send_message_with_image(
                    bot,
                    user_id,
                    giveaway_info,
                    reply_markup=keyboard.as_markup(),
                    message_id=message_id,
                    parse_mode='HTML'
                )
        except aiogram.exceptions.TelegramBadRequest as e:
            if "message to edit not found" in str(e):
                logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {e}")
                await send_new_giveaway_message(user_id, giveaway, giveaway_info, keyboard)
            else:
                raise
        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
            await bot.send_message(user_id, "‚ùå –£–ø—Å! –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é üòî –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!", parse_mode='HTML')

    @dp.callback_query(lambda c: c.data.startswith('toggle_text_type_active:'))
    async def process_toggle_text_type_active(callback_query: CallbackQuery):
        giveaway_id = callback_query.data.split(':')[1]

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∏–∑ –±–∞–∑—ã
        cursor.execute("SELECT * FROM giveaways WHERE id = %s", (giveaway_id,))
        columns = [desc[0] for desc in cursor.description]
        giveaway = dict(zip(columns, cursor.fetchone()))
        if not giveaway:
            await bot.answer_callback_query(callback_query.id, text="üîç –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω üòï")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ text_type
        current_text_type = giveaway['text_type']

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        new_text_type = 1 if current_text_type == 0 else 0
        action_text = (
            f"–•–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –∫–æ–Ω—Ü–µ –ø–æ—Å—Ç–∞?\n\n"
            f"<tg-emoji emoji-id='5440539497383087970'>ü•á</tg-emoji> <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:</b> {giveaway['winner_count']}\n"
            f"<tg-emoji emoji-id='5413879192267805083'>üóì</tg-emoji> <b>–ö–æ–Ω–µ—Ü:</b> {(giveaway['end_time'] + timedelta(hours=3)).strftime('%d.%m.%Y %H:%M')} (–ú–°–ö)"
        ) if current_text_type == 0 else (
            f"–•–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—Å—Ç –≤ –∫–æ–Ω—Ü–µ –ø–æ—Å—Ç–∞?\n\n"
            f"<tg-emoji emoji-id='5440539497383087970'>ü•á</tg-emoji> <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:</b> {giveaway['winner_count']}\n"
            f"<tg-emoji emoji-id='5413879192267805083'>üóì</tg-emoji> <b>–ö–æ–Ω–µ—Ü:</b> {(giveaway['end_time'] + timedelta(hours=3)).strftime('%d.%m.%Y %H:%M')} (–ú–°–ö)"
        )

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚úÖ –î–∞", callback_data=f"confirm_toggle_text_type_active:{giveaway_id}:{new_text_type}")
        keyboard.button(text="‚ùå –ù–µ—Ç", callback_data=f"edit_active_post:{giveaway_id}")
        keyboard.adjust(2)

        await bot.answer_callback_query(callback_query.id)
        await send_message_with_image(
            bot,
            callback_query.from_user.id,
            f"<tg-emoji emoji-id='5395444784611480792'>‚úèÔ∏è</tg-emoji>{action_text}",
            reply_markup=keyboard.as_markup(),
            message_id=callback_query.message.message_id,
            parse_mode='HTML'
        )

    @dp.callback_query(lambda c: c.data.startswith('confirm_toggle_text_type_active:'))
    async def process_confirm_toggle_text_type_active(callback_query: CallbackQuery):
        parts = callback_query.data.split(':')
        giveaway_id = parts[1]
        new_text_type = int(parts[2])

        try:
            cursor.execute(
                "UPDATE giveaways SET text_type = %s WHERE id = %s",
                (new_text_type, giveaway_id)
            )
            conn.commit()

            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
            giveaways = fetch_giveaway_data(cursor, "SELECT * FROM giveaways WHERE id = %s", (giveaway_id,))
            giveaway_data = giveaways[0]
            giveaway_dict = {
                'id': giveaway_data['id'],
                'name': giveaway_data['name'],
                'description': giveaway_data['description'],
                'end_time': giveaway_data['end_time'].isoformat(),
                'winner_count': giveaway_data['winner_count'],
                'media_type': giveaway_data['media_type'],
                'media_file_id': giveaway_data['media_file_id'],
                'text_type': giveaway_data['text_type']
            }
            await update_published_posts_active(giveaway_id, giveaway_dict)

            await bot.answer_callback_query(callback_query.id, text="‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            await _show_edit_menu_active(callback_query.from_user.id, giveaway_id, callback_query.message.message_id)
        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
            conn.rollback()
            await bot.answer_callback_query(callback_query.id, text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π üòî")

    async def send_new_giveaway_message(chat_id: int, giveaway: Dict[str, Any], giveaway_info: str, keyboard: InlineKeyboardBuilder) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ üì¨"""
        if giveaway['media_type'] and giveaway['media_file_id']:
            if giveaway['media_type'] == 'photo':
                await bot.send_photo(chat_id, giveaway['media_file_id'], caption=giveaway_info, reply_markup=keyboard.as_markup(), parse_mode='HTML')
            elif giveaway['media_type'] == 'gif':
                await bot.send_animation(chat_id, animation=giveaway['media_file_id'], caption=giveaway_info, reply_markup=keyboard.as_markup(), parse_mode='HTML')
            elif giveaway['media_type'] == 'video':
                await bot.send_video(chat_id, video=giveaway['media_file_id'], caption=giveaway_info, reply_markup=keyboard.as_markup(), parse_mode='HTML')
        else:
            await send_message_with_image(bot, chat_id, giveaway_info, reply_markup=keyboard.as_markup(), parse_mode='HTML')

    async def update_published_posts_active(giveaway_id: str, new_giveaway_data: Dict[str, Any]) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ üì¢"""
        try:
            cursor.execute("SELECT published_messages FROM giveaways WHERE id = %s", (giveaway_id,))
            published_messages = cursor.fetchone()[0]
            published_messages = published_messages if isinstance(published_messages, list) else []

            cursor.execute("SELECT COUNT(*) FROM participations WHERE giveaway_id = %s", (giveaway_id,))
            participants_count = cursor.fetchone()[0]

            # –£—Å–ª–æ–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç text_type
            additional_info = (
                f"<tg-emoji emoji-id='5440539497383087970'>ü•á</tg-emoji> <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:</b> {new_giveaway_data['winner_count']}\n"
                f"<tg-emoji emoji-id='5413879192267805083'>üóì</tg-emoji> <b>–ö–æ–Ω–µ—Ü:</b> {(datetime.fromisoformat(new_giveaway_data['end_time']) + timedelta(hours=3)).strftime('%d.%m.%Y %H:%M')} (–ú–°–ö)"
            ) if new_giveaway_data['text_type'] == 0 else ""

            new_post_text = f"""
<b>{new_giveaway_data['name']}</b>

{new_giveaway_data['description']}

{additional_info}
"""

            keyboard = InlineKeyboardBuilder()
            keyboard.button(text=f"üéâ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å ({participants_count})", url=f"https://t.me/Snapi/app?startapp={giveaway_id}")

            for message in published_messages:
                chat_id = message['chat_id']
                message_id = message['message_id']

                try:
                    if new_giveaway_data['media_type'] and new_giveaway_data['media_file_id']:
                        media_types = {
                            'photo': types.InputMediaPhoto,
                            'gif': types.InputMediaAnimation,
                            'video': types.InputMediaVideo
                        }
                        media_class = media_types.get(new_giveaway_data['media_type'])
                        if media_class:
                            await bot.edit_message_media(
                                chat_id=chat_id,
                                message_id=message_id,
                                media=media_class(media=new_giveaway_data['media_file_id'], caption=new_post_text, parse_mode='HTML'),
                                reply_markup=keyboard.as_markup()
                            )
                        else:
                            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞: {new_giveaway_data['media_type']}")
                    else:
                        try:
                            await bot.edit_message_text(
                                chat_id=chat_id,
                                message_id=message_id,
                                text=new_post_text,
                                reply_markup=keyboard.as_markup(),
                                parse_mode='HTML'
                            )
                        except aiogram.exceptions.TelegramBadRequest as e:
                            if "there is no text in the message to edit" in str(e).lower():
                                new_message = await bot.send_message(chat_id, text=new_post_text, reply_markup=keyboard.as_markup(), parse_mode='HTML')
                                try:
                                    await bot.delete_message(chat_id=chat_id, message_id=message_id)
                                except aiogram.exceptions.TelegramBadRequest:
                                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id}")
                                updated_messages = [msg for msg in published_messages if msg['message_id'] != message_id]
                                updated_messages.append({'chat_id': chat_id, 'message_id': new_message.message_id})
                                cursor.execute(
                                    "UPDATE giveaways SET published_messages = %s WHERE id = %s",
                                    (json.dumps(updated_messages), giveaway_id)
                                )
                                conn.commit()
                            else:
                                raise
                except Exception as e:
                    logger.error(f"üö´ –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞: {str(e)}")
        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: {str(e)}")

    @dp.callback_query(lambda c: c.data.startswith('edit_name_active:'))
    async def process_edit_name_active(callback_query: CallbackQuery, state: FSMContext) -> None:
        giveaway_id = callback_query.data.split(':')[1]
        await state.update_data(giveaway_id=giveaway_id, last_message_id=callback_query.message.message_id)
        await state.set_state(EditGiveawayStates.waiting_for_new_name_active)
        await bot.answer_callback_query(callback_query.id)

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_active_post:{giveaway_id}")

        await send_message_with_image(
            bot,
            callback_query.from_user.id,
            f"<tg-emoji emoji-id='5395444784611480792'>‚úèÔ∏è</tg-emoji> –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–¥–æ {MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):\n{FORMATTING_GUIDE}",
            reply_markup=keyboard.as_markup(),
            message_id=callback_query.message.message_id,
            parse_mode='HTML'
        )

    @dp.message(EditGiveawayStates.waiting_for_new_name_active)
    async def process_new_name_active(message: types.Message, state: FSMContext) -> None:
        data = await state.get_data()
        giveaway_id = data['giveaway_id']
        new_name = message.html_text if message.text else ""

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –¥–ª–∏–Ω—ã
        text_length = count_length_with_custom_emoji(new_name)

        if text_length > MAX_NAME_LENGTH:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_active_post:{giveaway_id}")
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            await send_message_with_image(
                bot,
                message.chat.id,
                f"<tg-emoji emoji-id='5447644880824181073'>‚ö†Ô∏è</tg-emoji> –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º {MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤, —Å–µ–π—á–∞—Å {text_length}. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ!\n{FORMATTING_GUIDE}",
                reply_markup=keyboard.as_markup(),
                message_id=data['last_message_id'],
                parse_mode='HTML'
            )
            return

        if text_length > MAX_CAPTION_LENGTH:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_active_post:{giveaway_id}")
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            await send_message_with_image(
                bot,
                message.chat.id,
                f"<tg-emoji emoji-id='5447644880824181073'>‚ö†Ô∏è</tg-emoji> –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram ({MAX_CAPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –º–µ–¥–∏–∞)! –°–µ–π—á–∞—Å {text_length}. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ!\n{FORMATTING_GUIDE}",
                reply_markup=keyboard.as_markup(),
                message_id=data['last_message_id'],
                parse_mode='HTML'
            )
            return

        try:
            cursor.execute("UPDATE giveaways SET name = %s WHERE id = %s", (new_name, giveaway_id))
            conn.commit()
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

            giveaways = fetch_giveaway_data(cursor, "SELECT * FROM giveaways WHERE id = %s", (giveaway_id,))
            giveaway_data = giveaways[0]
            giveaway_dict = {
                'id': giveaway_data['id'],
                'name': giveaway_data['name'],
                'description': giveaway_data['description'],
                'end_time': giveaway_data['end_time'].isoformat(),
                'winner_count': giveaway_data['winner_count'],
                'media_type': giveaway_data['media_type'],
                'media_file_id': giveaway_data['media_file_id'],
                'text_type': giveaway_data['text_type']
            }
            await update_published_posts_active(giveaway_id, giveaway_dict)
            await _show_edit_menu_active(message.from_user.id, giveaway_id, data['last_message_id'])
        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_active_post:{giveaway_id}")
            await send_message_with_image(
                bot,
                message.chat.id,
                "‚ùå –û–π! –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ üòî",
                reply_markup=keyboard.as_markup(),
                message_id=data['last_message_id'],
                parse_mode='HTML'
            )
        await state.clear()

    @dp.callback_query(lambda c: c.data.startswith('edit_description_active:'))
    async def process_edit_description_active(callback_query: CallbackQuery, state: FSMContext) -> None:
        giveaway_id = callback_query.data.split(':')[1]
        await state.update_data(giveaway_id=giveaway_id, last_message_id=callback_query.message.message_id)
        await state.set_state(EditGiveawayStates.waiting_for_new_description_active)
        await bot.answer_callback_query(callback_query.id)

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_active_post:{giveaway_id}")

        await send_message_with_image(
            bot,
            callback_query.from_user.id,
            f"<tg-emoji emoji-id='5395444784611480792'>‚úèÔ∏è</tg-emoji> –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–¥–æ {MAX_DESCRIPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):\n{FORMATTING_GUIDE}",
            reply_markup=keyboard.as_markup(),
            message_id=callback_query.message.message_id,
            parse_mode='HTML'
        )

    @dp.message(EditGiveawayStates.waiting_for_new_description_active)
    async def process_new_description_active(message: types.Message, state: FSMContext) -> None:
        data = await state.get_data()
        giveaway_id = data['giveaway_id']
        new_description = message.html_text if message.text else ""

        text_length = count_length_with_custom_emoji(new_description)

        if text_length > MAX_DESCRIPTION_LENGTH:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_active_post:{giveaway_id}")
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            await send_message_with_image(
                bot,
                message.chat.id,
                f"<tg-emoji emoji-id='5447644880824181073'>‚ö†Ô∏è</tg-emoji> –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º {MAX_DESCRIPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤, —Å–µ–π—á–∞—Å {text_length}. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ!\n{FORMATTING_GUIDE}",
                reply_markup=keyboard.as_markup(),
                message_id=data['last_message_id'],
                parse_mode='HTML'
            )
            return

        if text_length > MAX_CAPTION_LENGTH:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_active_post:{giveaway_id}")
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            await send_message_with_image(
                bot,
                message.chat.id,
                f"<tg-emoji emoji-id='5447644880824181073'>‚ö†Ô∏è</tg-emoji> –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram ({MAX_CAPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –º–µ–¥–∏–∞)! –°–µ–π—á–∞—Å {text_length}. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ!\n{FORMATTING_GUIDE}",
                reply_markup=keyboard.as_markup(),
                message_id=data['last_message_id'],
                parse_mode='HTML'
            )
            return

        try:
            cursor.execute("UPDATE giveaways SET description = %s WHERE id = %s", (new_description, giveaway_id))
            conn.commit()
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

            giveaways = fetch_giveaway_data(cursor, "SELECT * FROM giveaways WHERE id = %s", (giveaway_id,))
            giveaway_data = giveaways[0]
            giveaway_dict = {
                'id': giveaway_data['id'],
                'name': giveaway_data['name'],
                'description': giveaway_data['description'],
                'end_time': giveaway_data['end_time'].isoformat(),
                'winner_count': giveaway_data['winner_count'],
                'media_type': giveaway_data['media_type'],
                'media_file_id': giveaway_data['media_file_id'],
                'text_type': giveaway_data['text_type']
            }
            await update_published_posts_active(giveaway_id, giveaway_dict)
            await _show_edit_menu_active(message.from_user.id, giveaway_id, data['last_message_id'])
        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_active_post:{giveaway_id}")
            await send_message_with_image(
                bot,
                message.chat.id,
                "‚ùå –û–π! –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ üòî",
                reply_markup=keyboard.as_markup(),
                message_id=data['last_message_id'],
                parse_mode='HTML'
            )
        await state.clear()

    @dp.callback_query(lambda c: c.data.startswith('edit_winner_count_active:'))
    async def process_edit_winner_count_active(callback_query: CallbackQuery, state: FSMContext) -> None:
        giveaway_id = callback_query.data.split(':')[1]
        await state.update_data(giveaway_id=giveaway_id, last_message_id=callback_query.message.message_id)
        await state.set_state(EditGiveawayStates.waiting_for_new_winner_count_active)
        await bot.answer_callback_query(callback_query.id)

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_active_post:{giveaway_id}")

        await send_message_with_image(
            bot,
            callback_query.from_user.id,
            f"<tg-emoji emoji-id='5440539497383087970'>ü•á</tg-emoji> –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π? –ú–∞–∫—Å–∏–º—É–º {MAX_WINNERS}! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ",
            reply_markup=keyboard.as_markup(),
            message_id=callback_query.message.message_id
        )

    @dp.message(EditGiveawayStates.waiting_for_new_winner_count_active)
    async def process_new_winner_count_active(message: types.Message, state: FSMContext) -> None:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        data = await state.get_data()
        giveaway_id = data['giveaway_id']

        try:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_active_post:{giveaway_id}")
            await send_message_with_image(
                bot,
                message.chat.id,
                "<tg-emoji emoji-id='5386367538735104399'>‚åõÔ∏è</tg-emoji> –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π...",
                message_id=data.get('last_message_id'),
            )

            new_winner_count = int(message.text)
            if new_winner_count <= 0:
                raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")

            if new_winner_count > MAX_WINNERS:
                await send_message_with_image(
                    bot,
                    message.chat.id,
                    f"<tg-emoji emoji-id='5447644880824181073'>‚ö†Ô∏è</tg-emoji> –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ! –ú–∞–∫—Å–∏–º—É–º {MAX_WINNERS} –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π",
                    message_id=data.get('last_message_id'),
                    reply_markup=keyboard.as_markup()
                )
                return

            cursor.execute("SELECT winner_count FROM giveaways WHERE id = %s", (giveaway_id,))
            current_winner_count = cursor.fetchone()[0]

            cursor.execute("UPDATE giveaways SET winner_count = %s WHERE id = %s", (new_winner_count, giveaway_id))
            conn.commit()

            if new_winner_count > current_winner_count:
                for place in range(current_winner_count + 1, new_winner_count + 1):
                    cursor.execute(
                        "INSERT INTO congratulations (giveaway_id, place, message) VALUES (%s, %s, %s)",
                        (giveaway_id, place, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–Ω—è–ª–∏ {place} –º–µ—Å—Ç–æ!")
                    )
            elif new_winner_count < current_winner_count:
                cursor.execute(
                    "DELETE FROM congratulations WHERE giveaway_id = %s AND place >= %s",
                    (giveaway_id, new_winner_count + 1)
                )
            conn.commit()

            giveaways = fetch_giveaway_data(cursor, "SELECT * FROM giveaways WHERE id = %s", (giveaway_id,))
            giveaway_data = giveaways[0]
            giveaway_dict = {
                'id': giveaway_data['id'],
                'name': giveaway_data['name'],
                'description': giveaway_data['description'],
                'end_time': giveaway_data['end_time'].isoformat(),
                'winner_count': giveaway_data['winner_count'],
                'media_type': giveaway_data['media_type'],
                'media_file_id': giveaway_data['media_file_id']
            }
            await update_published_posts_active(giveaway_id, giveaway_dict)
            await state.clear()
            await _show_edit_menu_active(message.from_user.id, giveaway_id, data['last_message_id'])

        except ValueError:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_active_post:{giveaway_id}")
            await send_message_with_image(
                bot,
                message.chat.id,
                "<tg-emoji emoji-id='5447644880824181073'>‚ö†Ô∏è</tg-emoji> –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ! –ù–∞–ø—Ä–∏–º–µ—Ä, 3",
                message_id=data.get('last_message_id'),
                reply_markup=keyboard.as_markup()
            )
        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_active_post:{giveaway_id}")
            await send_message_with_image(
                bot,
                message.chat.id,
                "‚ùå –û–π! –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π üòî",
                message_id=data.get('last_message_id'),
                reply_markup=keyboard.as_markup()
            )

    @dp.callback_query(lambda c: c.data.startswith('change_end_date_active:'))
    async def process_change_end_date_active(callback_query: CallbackQuery, state: FSMContext) -> None:
        giveaway_id = callback_query.data.split(':')[1]
        await state.update_data(giveaway_id=giveaway_id, last_message_id=callback_query.message.message_id)
        await state.set_state(EditGiveawayStates.waiting_for_new_end_time_active)
        await callback_query.answer()

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_active_post:{giveaway_id}")

        current_time = datetime.now(pytz.timezone('Europe/Moscow')).strftime('%d.%m.%Y %H:%M')
        html_message = f"""
–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú

<tg-emoji emoji-id='5413879192267805083'>üóì</tg-emoji> –°–µ–π—á–∞—Å –≤ –ú–æ—Å–∫–≤–µ:\n<code>{current_time}</code>
"""
        await send_message_with_image(
            bot,
            callback_query.from_user.id,
            html_message,
            reply_markup=keyboard.as_markup(),
            message_id=callback_query.message.message_id,
            parse_mode='HTML'
        )

    @dp.message(EditGiveawayStates.waiting_for_new_end_time_active)
    async def process_new_end_time_active(message: types.Message, state: FSMContext) -> None:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        data = await state.get_data()
        giveaway_id = data['giveaway_id']

        if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
            await state.clear()
            await _show_edit_menu_active(message.from_user.id, giveaway_id, data['last_message_id'])
            return

        try:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_active_post:{giveaway_id}")
            await send_message_with_image(
                bot,
                message.chat.id,
                "<tg-emoji emoji-id='5386367538735104399'>‚åõÔ∏è</tg-emoji> –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É...",
                message_id=data.get('last_message_id'),
            )

            new_end_time = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
            moscow_tz = pytz.timezone('Europe/Moscow')
            new_end_time_tz = moscow_tz.localize(new_end_time)

            cursor.execute("UPDATE giveaways SET end_time = %s WHERE id = %s", (new_end_time_tz, giveaway_id))
            conn.commit()

            giveaways = fetch_giveaway_data(cursor, "SELECT * FROM giveaways WHERE id = %s", (giveaway_id,))
            giveaway_data = giveaways[0]
            giveaway_dict = {
                'id': giveaway_data['id'],
                'name': giveaway_data['name'],
                'description': giveaway_data['description'],
                'end_time': giveaway_data['end_time'].isoformat(),
                'winner_count': giveaway_data['winner_count'],
                'media_type': giveaway_data['media_type'],
                'media_file_id': giveaway_data['media_file_id']
            }
            await update_published_posts_active(giveaway_id, giveaway_dict)
            await state.clear()
            await _show_edit_menu_active(message.from_user.id, giveaway_id, data['last_message_id'])

        except ValueError:
            current_time = datetime.now(pytz.timezone('Europe/Moscow')).strftime('%d.%m.%Y %H:%M')
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_active_post:{giveaway_id}")
            html_message = f"""
<tg-emoji emoji-id='5447644880824181073'>‚ö†Ô∏è</tg-emoji> –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú

<tg-emoji emoji-id='5413879192267805083'>üóì</tg-emoji> –°–µ–π—á–∞—Å –≤ –ú–æ—Å–∫–≤–µ:\n<code>{current_time}</code>
"""
            await send_message_with_image(
                bot,
                message.chat.id,
                html_message,
                message_id=data.get('last_message_id'),
                reply_markup=keyboard.as_markup(),
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_active_post:{giveaway_id}")
            await send_message_with_image(
                bot,
                message.chat.id,
                "‚ùå –û–π! –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É üòî",
                message_id=data.get('last_message_id'),
                reply_markup=keyboard.as_markup()
            )

    @dp.callback_query(lambda c: c.data.startswith('view_manage_media:'))
    async def process_view_manage_media_active(callback_query: CallbackQuery, state: FSMContext) -> None:
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ üñºÔ∏è"""
        giveaway_id = callback_query.data.split(':')[1]
        giveaways = fetch_giveaway_data(cursor, "SELECT * FROM giveaways WHERE id = %s", (giveaway_id,))
        giveaway = giveaways[0]

        if giveaway['media_type']:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞", callback_data=f"change_media_active:{giveaway_id}")
            keyboard.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞", callback_data=f"delete_media_active:{giveaway_id}")
            keyboard.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_active_post:{giveaway_id}")
            keyboard.adjust(1)
            text = "<tg-emoji emoji-id='5352640560718949874'>ü§®</tg-emoji> –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –º–µ–¥–∏–∞?"
        else:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"add_media_active:{giveaway_id}")
            keyboard.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_active_post:{giveaway_id}")
            keyboard.adjust(2)
            text = f"<tg-emoji emoji-id='5282843764451195532'>üñ•</tg-emoji> –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, GIF –∏–ª–∏ –≤–∏–¥–µ–æ? –ú–∞–∫—Å–∏–º—É–º {MAX_MEDIA_SIZE_MB} –ú–ë! üìé"

        await send_message_with_image(
            bot,
            callback_query.from_user.id,
            text,
            reply_markup=keyboard.as_markup(),
            message_id=callback_query.message.message_id
        )
        await bot.answer_callback_query(callback_query.id)

    @dp.callback_query(lambda c: c.data.startswith('add_media_active:') or c.data.startswith('change_media_active:'))
    async def process_add_or_change_media_active(callback_query: CallbackQuery, state: FSMContext) -> None:
        giveaway_id = callback_query.data.split(':')[1]
        await state.update_data(giveaway_id=giveaway_id, last_message_id=callback_query.message.message_id)
        await state.set_state(EditGiveawayStates.waiting_for_new_media_active)

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_manage_media:{giveaway_id}")

        await send_message_with_image(
            bot,
            callback_query.from_user.id,
            f"<tg-emoji emoji-id='5235837920081887219'>üì∏</tg-emoji> –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, GIF –∏–ª–∏ –≤–∏–¥–µ–æ (–¥–æ {MAX_MEDIA_SIZE_MB} –ú–ë)!",
            reply_markup=keyboard.as_markup(),
            message_id=callback_query.message.message_id
        )
        await bot.answer_callback_query(callback_query.id)

    @dp.message(EditGiveawayStates.waiting_for_new_media_active)
    async def process_new_media_active(message: types.Message, state: FSMContext) -> None:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        data = await state.get_data()
        giveaway_id = data['giveaway_id']

        try:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_active_post:{giveaway_id}")
            await send_message_with_image(
                bot,
                message.chat.id,
                "<tg-emoji emoji-id='5386367538735104399'>‚åõÔ∏è</tg-emoji> –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ–¥–∏–∞...",
                message_id=data.get('last_message_id'),
            )

            if message.photo:
                file_id = message.photo[-1].file_id
                media_type = 'photo'
                file_ext = 'jpg'
            elif message.animation:
                file_id = message.animation.file_id
                media_type = 'gif'
                file_ext = 'gif'
            elif message.video:
                file_id = message.video.file_id
                media_type = 'video'
                file_ext = 'mp4'
            else:
                await send_message_with_image(
                    bot,
                    message.chat.id,
                    "<tg-emoji emoji-id='5447644880824181073'>‚ö†Ô∏è</tg-emoji> –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, GIF –∏–ª–∏ –≤–∏–¥–µ–æ! ",
                    message_id=data.get('last_message_id'),
                    reply_markup=keyboard.as_markup()
                )
                return

            file = await bot.get_file(file_id)
            file_content = await bot.download_file(file.file_path)
            file_size_mb = file.file_size / (1024 * 1024)

            if file_size_mb > MAX_MEDIA_SIZE_MB:
                await send_message_with_image(
                    bot,
                    message.from_user.id,
                    f"<tg-emoji emoji-id='5197564405650307134'>ü§Ø</tg-emoji> –§–∞–π–ª –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º—É–º {MAX_MEDIA_SIZE_MB} –ú–ë, —Å–µ–π—á–∞—Å {file_size_mb:.2f} –ú–ë üòî",
                    reply_markup=keyboard.as_markup(),
                    message_id=data.get('last_message_id')
                )
                return

            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"{timestamp}_{message.message_id}.{file_ext}"
            success, result = await upload_to_storage(file_content.read(), filename)

            if not success:
                raise Exception(result)

            cursor.execute(
                "UPDATE giveaways SET media_type = %s, media_file_id = %s WHERE id = %s",
                (media_type, result, giveaway_id)
            )
            conn.commit()

            giveaways = fetch_giveaway_data(cursor, "SELECT * FROM giveaways WHERE id = %s", (giveaway_id,))
            giveaway_data = giveaways[0]
            giveaway_dict = {
                'id': giveaway_data['id'],
                'name': giveaway_data['name'],
                'description': giveaway_data['description'],
                'end_time': giveaway_data['end_time'].isoformat(),
                'winner_count': giveaway_data['winner_count'],
                'media_type': giveaway_data['media_type'],
                'media_file_id': giveaway_data['media_file_id']
            }
            await update_published_posts_active(giveaway_id, giveaway_dict)
            await _show_edit_menu_active(message.from_user.id, giveaway_id, data['last_message_id'])
            await state.clear()

        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_active_post:{giveaway_id}")
            await send_message_with_image(
                bot,
                message.chat.id,
                "‚ùå –û–π! –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏–∞ üòî",
                message_id=data.get('last_message_id'),
                reply_markup=keyboard.as_markup()
            )

    @dp.callback_query(lambda c: c.data.startswith('delete_media_active:'))
    async def process_delete_media_active(callback_query: CallbackQuery, state: FSMContext) -> None:
        giveaway_id = callback_query.data.split(':')[1]
        try:
            cursor.execute("UPDATE giveaways SET media_type = NULL, media_file_id = NULL WHERE id = %s", (giveaway_id,))
            conn.commit()

            giveaways = fetch_giveaway_data(cursor, "SELECT * FROM giveaways WHERE id = %s", (giveaway_id,))
            giveaway_data = giveaways[0]
            giveaway_dict = {
                'id': giveaway_data['id'],
                'name': giveaway_data['name'],
                'description': giveaway_data['description'],
                'end_time': giveaway_data['end_time'].isoformat(),
                'winner_count': giveaway_data['winner_count'],
                'media_type': giveaway_data['media_type'],
                'media_file_id': giveaway_data['media_file_id']
            }
            await update_published_posts_active(giveaway_id, giveaway_dict)
            await _show_edit_menu_active(callback_query.from_user.id, giveaway_id, callback_query.message.message_id)
            await bot.answer_callback_query(callback_query.id, text="‚úÖ –ú–µ–¥–∏–∞ —É–¥–∞–ª–µ–Ω–æ! ‚ú®")
        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
            await bot.answer_callback_query(callback_query.id, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞ üòî")
